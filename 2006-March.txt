From nobody at sheep.berlios.de  Thu Mar  2 08:51:23 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 2 Mar 2006 08:51:23 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory QuartzSchedulerFactory.java,1.5,1.6
Message-ID: <200603020751.k227pNE16290@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory
In directory sheep:/tmp/cvs-serv17234/src/main/java/org/apache/fulcrum/quartz/factory

Modified Files:
	QuartzSchedulerFactory.java 
Log Message:


Index: QuartzSchedulerFactory.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory/QuartzSchedulerFactory.java,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** QuartzSchedulerFactory.java	8 Feb 2006 17:19:00 -0000	1.5
--- QuartzSchedulerFactory.java	2 Mar 2006 07:51:19 -0000	1.6
***************
*** 50,54 ****
  	private static final String HIBERNATE_USERNAME_KEY = "hibernate.connection.username";
  
- 	private static final String HIBERNATE_POOL_SIZE_KEY = "hibernate.connection.pool_size";
  
  	private static final String DEFAULT_MAX_CONNECTIONS = "10";
--- 50,53 ----
***************
*** 62,67 ****
  	private static final String POSTGRESQL = "org.postgresql.Driver";
  	
- 	private SchedulerFactory schedulerFactory = new StdSchedulerFactory();
- 
  	private Scheduler scheduler = null;
  
--- 61,64 ----



From nobody at sheep.berlios.de  Mon Mar  6 18:00:01 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 6 Mar 2006 18:00:01 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind/src/main/java/org/apache/fulcrum/hivemind RegistryManager.java,1.1,1.2
Message-ID: <200603061700.k26H01b25258@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/main/java/org/apache/fulcrum/hivemind
In directory sheep:/tmp/cvs-serv15938/src/main/java/org/apache/fulcrum/hivemind

Modified Files:
	RegistryManager.java 
Log Message:


Index: RegistryManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/main/java/org/apache/fulcrum/hivemind/RegistryManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** RegistryManager.java	24 Nov 2005 15:09:41 -0000	1.1
--- RegistryManager.java	6 Mar 2006 16:01:21 -0000	1.2
***************
*** 5,8 ****
--- 5,10 ----
  import java.util.Locale;
  
+ import org.apache.commons.logging.Log;
+ import org.apache.commons.logging.LogFactory;
  import org.apache.hivemind.Registry;
  import org.apache.hivemind.Resource;
***************
*** 13,16 ****
--- 15,20 ----
  public class RegistryManager {
  
+     private static final Log log = LogFactory.getLog(RegistryManager.class);
+ 
      private Registry registry = null;
  
***************
*** 20,24 ****
  
      private RegistryManager() {
!         
      }
  
--- 24,28 ----
  
      private RegistryManager() {
!         log.debug("Registry Manager Constructed");
      }
  
***************
*** 28,32 ****
       */
      protected Registry constructRegistry() {
! 
          RegistryBuilder builder = new RegistryBuilder();
  
--- 32,36 ----
       */
      protected Registry constructRegistry() {
!         log.debug("Constructing Registry (in call)");
          RegistryBuilder builder = new RegistryBuilder();
  
***************
*** 41,46 ****
      }
  
!     public static RegistryManager getInstance() {
          if (_instance == null) {
              _instance = new RegistryManager();
          }
--- 45,51 ----
      }
  
!     public static RegistryManager getInstance() {        
          if (_instance == null) {
+             log.debug("Constructing RegistryManager");
              _instance = new RegistryManager();
          }
***************
*** 48,55 ****
      }
  
!     public Registry getRegistry() {
!         if (this.registry==null){
              this.registry = constructRegistry();
!         }        
          return this.registry;
      }
--- 53,62 ----
      }
  
!     public synchronized Registry getRegistry() {
!         if (this.registry == null) {
!             log.debug("Constructing Registry");
              this.registry = constructRegistry();
!             log.debug("Constructed Registry");
!         }
          return this.registry;
      }



From nobody at sheep.berlios.de  Mon Mar  6 18:00:01 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 6 Mar 2006 18:00:01 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind pom.xml,1.3,1.4
Message-ID: <200603061700.k26H01b25254@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind
In directory sheep:/tmp/cvs-serv15938

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/pom.xml,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** pom.xml	6 Feb 2006 16:37:50 -0000	1.3
--- pom.xml	6 Mar 2006 16:01:21 -0000	1.4
***************
*** 7,11 ****
    <packaging>jar</packaging>
    <name>Fulcrum Hivemind</name>
!   <version>1.4</version>
    <description>Fulcrum Hivemind.</description>
    <url>http://zebra.berlios.de</url>
--- 7,11 ----
    <packaging>jar</packaging>
    <name>Fulcrum Hivemind</name>
!   <version>1.5</version>
    <description>Fulcrum Hivemind.</description>
    <url>http://zebra.berlios.de</url>
***************
*** 146,149 ****
--- 146,155 ----
          <artifactId>hivedoc-maven-plugin</artifactId>
          <version>0.2</version>
+         <configuration>
+           <ignoredJars>            
+             <ignoredJar>hivemind-1.1.jar</ignoredJar>
+             <ignoredJar>hivemind-lib-1.1.jar</ignoredJar>            
+           </ignoredJars>
+         </configuration>
        </plugin>
      </plugins>



From nobody at sheep.berlios.de  Mon Mar  6 18:03:52 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 6 Mar 2006 18:03:52 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-hibernate pom.xml,1.16,1.17
Message-ID: <200603061703.k26H3qb25509@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate
In directory sheep:/tmp/cvs-serv16686

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/pom.xml,v
retrieving revision 1.16
retrieving revision 1.17
diff -C2 -d -r1.16 -r1.17
*** pom.xml	14 Feb 2006 09:33:17 -0000	1.16
--- pom.xml	6 Mar 2006 16:05:13 -0000	1.17
***************
*** 6,10 ****
      <artifactId>fulcrum-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.10</version>
      <name>fulcrum-hivemind-hibernate - Hibernate Session manager for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.11</version>
      <name>fulcrum-hivemind-hibernate - Hibernate Session manager for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
***************
*** 66,70 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hivemind</artifactId>
!             <version>1.4</version>
          </dependency>
          <!-- Hibernate -->
--- 66,70 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hivemind</artifactId>
!             <version>1.5</version>
          </dependency>
          <!-- Hibernate -->



From nobody at sheep.berlios.de  Mon Mar  6 18:06:29 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 6 Mar 2006 18:06:29 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-crypto pom.xml,1.3,1.4
Message-ID: <200603061706.k26H6Tb25786@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-crypto
In directory sheep:/tmp/cvs-serv17247

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-crypto/pom.xml,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** pom.xml	6 Feb 2006 16:41:04 -0000	1.3
--- pom.xml	6 Mar 2006 16:07:50 -0000	1.4
***************
*** 7,11 ****
    <packaging>jar</packaging>
    <name>Fulcrum crypto for Hivemind</name>
!   <version>1.3</version>
    <description>A port of Fulcrum crypto to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>
--- 7,11 ----
    <packaging>jar</packaging>
    <name>Fulcrum crypto for Hivemind</name>
!   <version>1.4</version>
    <description>A port of Fulcrum crypto to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>
***************
*** 94,98 ****
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-hivemind</artifactId>
!       <version>1.4</version>
      </dependency>
      <dependency>
--- 94,98 ----
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-hivemind</artifactId>
!       <version>1.5</version>
      </dependency>
      <dependency>
***************
*** 133,136 ****
--- 133,142 ----
          <artifactId>hivedoc-maven-plugin</artifactId>
          <version>0.2</version>
+         <configuration>
+           <ignoredJars>            
+             <ignoredJar>hivemind-1.1.jar</ignoredJar>
+             <ignoredJar>hivemind-lib-1.1.jar</ignoredJar>            
+           </ignoredJars>
+         </configuration>
        </plugin>
      </plugins>



From nobody at sheep.berlios.de  Mon Mar  6 18:07:42 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 6 Mar 2006 18:07:42 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz pom.xml,1.5,1.6
Message-ID: <200603061707.k26H7gb25872@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz
In directory sheep:/tmp/cvs-serv17451

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/pom.xml,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** pom.xml	14 Feb 2006 09:39:31 -0000	1.5
--- pom.xml	6 Mar 2006 16:09:02 -0000	1.6
***************
*** 6,10 ****
      <artifactId>fulcrum-quartz</artifactId>
      <packaging>jar</packaging>
!     <version>1.3</version>
      <name>fulcrum-hivemind-quartz - Scheduler factory for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-quartz</artifactId>
      <packaging>jar</packaging>
!     <version>1.4</version>
      <name>fulcrum-hivemind-quartz - Scheduler factory for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
***************
*** 71,75 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.10</version>
          </dependency>
          <dependency>
--- 71,75 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.11</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Mon Mar  6 18:08:44 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 6 Mar 2006 18:08:44 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind pom.xml,1.13,1.14
Message-ID: <200603061708.k26H8ib25933@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind
In directory sheep:/tmp/cvs-serv17623

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/pom.xml,v
retrieving revision 1.13
retrieving revision 1.14
diff -C2 -d -r1.13 -r1.14
*** pom.xml	6 Feb 2006 16:54:51 -0000	1.13
--- pom.xml	6 Mar 2006 16:10:05 -0000	1.14
***************
*** 7,11 ****
    <packaging>jar</packaging>
    <name>Fulcrum Security for Hivemind</name>
!   <version>1.7</version>
    <description>A port of Fulcrum Security to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>
--- 7,11 ----
    <packaging>jar</packaging>
    <name>Fulcrum Security for Hivemind</name>
!   <version>1.8</version>
    <description>A port of Fulcrum Security to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>
***************
*** 105,109 ****
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-hivemind</artifactId>
!       <version>1.4</version>
      </dependency>
      <dependency>
--- 105,109 ----
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-hivemind</artifactId>
!       <version>1.5</version>
      </dependency>
      <dependency>
***************
*** 115,119 ****
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-crypto</artifactId>
!       <version>1.3</version>
      </dependency>
    </dependencies>
--- 115,119 ----
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-crypto</artifactId>
!       <version>1.4</version>
      </dependency>
    </dependencies>



From nobody at sheep.berlios.de  Mon Mar  6 18:21:51 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 6 Mar 2006 18:21:51 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.23,1.24
Message-ID: <200603061721.k26HLpb26611@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv19669

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.23
retrieving revision 1.24
diff -C2 -d -r1.23 -r1.24
*** pom.xml	21 Feb 2006 09:23:57 -0000	1.23
--- pom.xml	6 Mar 2006 16:23:12 -0000	1.24
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.12</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.13</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
***************
*** 123,132 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-quartz</artifactId>
!             <version>1.3</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.12</version>
          </dependency>
          <dependency>
--- 123,132 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-quartz</artifactId>
!             <version>1.4</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.13</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Tue Mar  7 14:15:54 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Tue, 7 Mar 2006 14:15:54 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate pom.xml,1.10,1.11
Message-ID: <200603071315.k27DFsb14686@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate
In directory sheep:/tmp/cvs-serv6330

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/pom.xml,v
retrieving revision 1.10
retrieving revision 1.11
diff -C2 -d -r1.10 -r1.11
*** pom.xml	16 Feb 2006 16:48:57 -0000	1.10
--- pom.xml	7 Mar 2006 12:17:12 -0000	1.11
***************
*** 6,10 ****
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
! 	<version>1.12</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
! 	<version>1.14</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
***************
*** 77,86 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.7</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.10</version>
          </dependency>
      </dependencies>
--- 77,86 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.8</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.11</version>
          </dependency>
      </dependencies>



From nobody at sheep.berlios.de  Wed Mar  8 18:51:32 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 8 Mar 2006 18:51:32 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind surefire-system.properties,NONE,1.1 pom.xml,1.24,1.25
Message-ID: <200603081751.k28HpWb29810@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv4384

Modified Files:
	pom.xml 
Added Files:
	surefire-system.properties 
Log Message:


--- NEW FILE: surefire-system.properties ---
#system properties
#Wed Mar 08 16:51:59 GMT 2006
java.runtime.name=Java(TM) 2 Runtime Environment, Standard Edition
sun.boot.library.path=c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\bin
java.vm.version=1.5.0_06-b05
java.vm.vendor=Sun Microsystems Inc.
java.vendor.url=http\://java.sun.com/
path.separator=;
java.vm.name=Java HotSpot(TM) Client VM
file.encoding.pkg=sun.io
user.country=GB
sun.os.patch.level=Service Pack 2
java.vm.specification.name=Java Virtual Machine Specification
user.dir=C\:\\Documents and Settings\\ben.gidley\\workspace\\zebra-hivemind
java.runtime.version=1.5.0_06-b05
basedir=C\:\\Documents and Settings\\ben.gidley\\workspace\\zebra-hivemind
java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment
java.endorsed.dirs=c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\lib\\endorsed
os.arch=x86
java.io.tmpdir=C\:\\DOCUME~1\\BEN~1.GID\\LOCALS~1\\Temp\\
line.separator=\r\n
java.vm.specification.vendor=Sun Microsystems Inc.
user.variant=
os.name=Windows XP
classworlds.conf=C\:\\java\\MAVEN-~1.2\\bin\\\\..\\bin\\m2.conf
sun.jnu.encoding=Cp1252
java.library.path=c\:\\Program Files\\Java\\jdk1.5.0_06\\bin;.;C\:\\WINDOWS\\system32;C\:\\WINDOWS;C\:\\WINDOWS\\system32;C\:\\WINDOWS;C\:\\WINDOWS\\System32\\Wbem;C\:\\PROGRA~1\\CA\\SHARED~1\\SCANEN~1;C\:\\PROGRA~1\\CA\\ETRUST~1;C\:\\Program Files\\Apache Software Foundation\\Maven 1.0.2\\bin;C\:\\Program Files\\Microsoft SQL Server\\80\\Tools\\BINN;C\:\\Program Files\\Microsoft SQL Server\\80\\Tools\\Binn\\;C\:\\Program Files\\Borland\\StarTeam SDK 2005 R2\\Lib;C\:\\Program Files\\Borland\\StarTeam SDK 2005 R2\\Bin;C\:\\dev\\Nant\\nant-0.85-rc3\\bin;C\:\\java\\maven-2.0.2\\bin;C\:\\Program Files\\MySQL\\MySQL Server 4.1\\bin;C\:\\Program Files\\PuTTY;C\:\\Program Files\\Common Files\\GTK\\2.0\\bin;C\:\\PROGRA~1\\IBM\\SQLLIB\\BIN;C\:\\PROGRA~1\\IBM\\SQLLIB\\FUNCTION;C\:\\PROGRA~1\\IBM\\SQLLIB\\SAMPLES\\REPL;c\:\\Program Files\\Microsoft SQL Server\\90\\Tools\\binn\\;C\:\\Sun\\jwsdp-1.6\\jwsdp-shared\\bin
java.specification.name=Java Platform API Specification
java.class.version=49.0
sun.management.compiler=HotSpot Client Compiler
os.version=5.1
user.home=C\:\\Documents and Settings\\ben.gidley
user.timezone=Europe/London
java.awt.printerjob=sun.awt.windows.WPrinterJob
file.encoding=Cp1252
java.specification.version=1.5
java.class.path=C\:\\java\\MAVEN-~1.2\\bin\\\\..\\core\\boot\\classworlds-1.1.jar
user.name=ben.gidley
java.vm.specification.version=1.0
java.home=c\:\\Program Files\\Java\\jdk1.5.0_06\\jre
sun.arch.data.model=32
user.language=en
java.specification.vendor=Sun Microsystems Inc.
awt.toolkit=sun.awt.windows.WToolkit
java.vm.info=mixed mode, sharing
java.version=1.5.0_06
java.ext.dirs=c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\lib\\ext
sun.boot.class.path=c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\lib\\rt.jar;c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\lib\\i18n.jar;c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\lib\\sunrsasign.jar;c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\lib\\jsse.jar;c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\lib\\jce.jar;c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\lib\\charsets.jar;c\:\\Program Files\\Java\\jdk1.5.0_06\\jre\\classes
java.vendor=Sun Microsystems Inc.
maven.home=C\:\\java\\MAVEN-~1.2\\bin\\\\..
localRepository=C\:\\Documents and Settings\\ben.gidley\\.m2\\repository
file.separator=\\
java.vendor.url.bug=http\://java.sun.com/cgi-bin/bugreport.cgi
sun.io.unicode.encoding=UnicodeLittle
sun.cpu.endian=little
sun.desktop=windows
sun.cpu.isalist=

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.24
retrieving revision 1.25
diff -C2 -d -r1.24 -r1.25
*** pom.xml	6 Mar 2006 16:23:12 -0000	1.24
--- pom.xml	8 Mar 2006 16:52:53 -0000	1.25
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.13</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.15</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
***************
*** 128,132 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.13</version>
          </dependency>
          <dependency>
--- 128,132 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.14</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Wed Mar  8 18:51:33 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 8 Mar 2006 18:51:33 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl ZebraSecurityManagerTest.java,1.5,1.6 ZebraRunWorkflowTest.java,1.2,1.3
Message-ID: <200603081751.k28HpXb29814@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv4384/src/test/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraSecurityManagerTest.java ZebraRunWorkflowTest.java 
Log Message:


Index: ZebraSecurityManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraSecurityManagerTest.java,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** ZebraSecurityManagerTest.java	16 Feb 2006 08:54:31 -0000	1.5
--- ZebraSecurityManagerTest.java	8 Mar 2006 16:52:53 -0000	1.6
***************
*** 39,42 ****
--- 39,43 ----
  import org.apache.hivemind.util.ClasspathResource;
  
+ import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
  import com.anite.zebra.core.exceptions.TransitionException;
  import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;
***************
*** 217,221 ****
      }
  
!     private boolean checkIfInTaskList(List<ZebraTaskInstance> taskList, String taskName) {
          boolean inTaskList = false;
          for (ZebraTaskInstance instance : taskList) {
--- 218,222 ----
      }
  
!     private boolean checkIfInTaskList(List<ZebraTaskInstance> taskList, String taskName) throws DefinitionNotFoundException {
          boolean inTaskList = false;
          for (ZebraTaskInstance instance : taskList) {

Index: ZebraRunWorkflowTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraRunWorkflowTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** ZebraRunWorkflowTest.java	16 Feb 2006 08:54:31 -0000	1.2
--- ZebraRunWorkflowTest.java	8 Mar 2006 16:52:53 -0000	1.3
***************
*** 29,32 ****
--- 29,33 ----
  import org.apache.hivemind.util.ClasspathResource;
  
+ import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
  import com.anite.zebra.core.exceptions.TransitionException;
  import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;
***************
*** 184,187 ****
--- 185,189 ----
       * @param test
       * @throws TransitionException
+      * @throws DefinitionNotFoundException 
       * @throws ComponentException
       * 
***************
*** 189,193 ****
       */
      private void testTaskDef(String taskName, String test, ZebraProcessInstance processInstance)
!             throws TransitionException {
          log.debug("testing task");
          //get process
--- 191,195 ----
       */
      private void testTaskDef(String taskName, String test, ZebraProcessInstance processInstance)
!             throws TransitionException, DefinitionNotFoundException {
          log.debug("testing task");
          //get process
***************
*** 208,211 ****
--- 210,214 ----
       * @param taskName
       * @throws TransitionException
+      * @throws DefinitionNotFoundException 
       * @throws ComponentException
       * 
***************
*** 213,217 ****
       */
      private void testDualTaskDef(String taskName, String otherTaskName, ZebraProcessInstance processInstance)
!             throws TransitionException  {
          log.debug("testing 2 parallel tasks");
          //get process
--- 216,220 ----
       */
      private void testDualTaskDef(String taskName, String otherTaskName, ZebraProcessInstance processInstance)
!             throws TransitionException, DefinitionNotFoundException  {
          log.debug("testing 2 parallel tasks");
          //get process
***************
*** 262,265 ****
--- 265,269 ----
      /**
       * @param taskName
+      * @throws DefinitionNotFoundException 
       * @throws TransitionException
       * @throws ComponentException
***************
*** 268,272 ****
       */
      private void testTripleTaskDef(String taskName, String otherTaskName,
!             String thirdTaskName, ZebraProcessInstance processInstance) {
          log.debug("testing 3 parallel tasks");
          //get process
--- 272,276 ----
       */
      private void testTripleTaskDef(String taskName, String otherTaskName,
!             String thirdTaskName, ZebraProcessInstance processInstance) throws DefinitionNotFoundException {
          log.debug("testing 3 parallel tasks");
          //get process



From nobody at sheep.berlios.de  Wed Mar  8 18:51:32 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 8 Mar 2006 18:51:32 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state ZebraTaskInstance.java,1.8,1.9 AbstractZebraTaskInstance.java,1.6,1.7
Message-ID: <200603081751.k28HpWb29806@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state
In directory sheep:/tmp/cvs-serv4384/src/main/java/com/anite/zebra/hivemind/om/state

Modified Files:
	ZebraTaskInstance.java AbstractZebraTaskInstance.java 
Log Message:


Index: ZebraTaskInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/ZebraTaskInstance.java,v
retrieving revision 1.8
retrieving revision 1.9
diff -C2 -d -r1.8 -r1.9
*** ZebraTaskInstance.java	20 Feb 2006 15:52:29 -0000	1.8
--- ZebraTaskInstance.java	8 Mar 2006 16:52:52 -0000	1.9
***************
*** 120,124 ****
          }
          else {
!             return "New instance of TD:" + this.getTaskDefinition().getId();
          }
      }
--- 120,124 ----
          }
          else {
!             return "New instance of TD:" + this.getTaskDefinitionId();
          }
      }

Index: AbstractZebraTaskInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/AbstractZebraTaskInstance.java,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** AbstractZebraTaskInstance.java	16 Feb 2006 08:54:29 -0000	1.6
--- AbstractZebraTaskInstance.java	8 Mar 2006 16:52:52 -0000	1.7
***************
*** 32,35 ****
--- 32,37 ----
  
  import org.apache.commons.lang.exception.NestableException;
+ import org.apache.commons.lang.exception.NestableRuntimeException;
+ import org.apache.fulcrum.hivemind.RegistryManager;
  import org.apache.fulcrum.security.entity.Permission;
  import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
***************
*** 37,43 ****
--- 39,47 ----
  
  import com.anite.zebra.core.definitions.api.ITaskDefinition;
+ import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
  import com.anite.zebra.core.state.api.IFOE;
  import com.anite.zebra.core.state.api.IProcessInstance;
  import com.anite.zebra.core.state.api.ITaskInstance;
+ import com.anite.zebra.hivemind.impl.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;
  
***************
*** 52,445 ****
  public abstract class AbstractZebraTaskInstance implements ITaskInstance {
  
! 	/* Properties for implementing the interface */
! 	private IFOE FOE;
  
! 	private ZebraProcessInstance processInstance;
  
! 	private long state;
  
! 	private ZebraTaskDefinition taskDefinition;
  
! 	private Long taskInstanceId;
  
! 	/* Custom Properties */
  
! 	private String routingAnswer;
  
! 	private HibernateDynamicUser taskOwner;
  
! 	private String caption;
  
! 	private String description;
  
! 	private String outcome;
  
! 	private Date dateDue;
  
! 	private Date dateCreated;
  
! 	private Date actualCompletionDate;
  
! 	private HibernateDynamicUser decisionMadeBy;
  
! 	private Priority priority;
  
! 	/**
! 	 * Boolean used to decide if this should be shown on any task list (set by
! 	 * factory)
! 	 */
! 	private boolean showInTaskList;
  
! 	/*
! 	 * (non-Javadoc)
! 	 * 
! 	 * @see com.anite.antelope.zebra.modules.actionlet.Actionlet#doPerformTrigger(org.apache.turbine.util.RunData,
! 	 *      org.apache.velocity.context.Context,
! 	 *      com.anite.antelope.zebra.om.AntelopeTaskInstance,
! 	 *      com.anite.antelope.zebra.om.AntelopeProcessInstance,
! 	 *      com.anite.penguin.modules.tools.FormTool)
! 	 */
! 	public static final String NOT_COMPLETED = "Not Completed";
  
! 	public static final String COMPLETED = "Completed";
  
! 	public AbstractZebraTaskInstance() {
! 		//noop
! 	}
  
! 	/**
! 	 * Copy constructor Sets all fields EXCEPT for the instanceId
! 	 * 
! 	 * @param AntelopeTaskInstance
! 	 *            a task instance
! 	 */
! 	public AbstractZebraTaskInstance(
! 			AbstractZebraTaskInstance taskInstance) {
! 		/* Standard Properties */
! 		setFOE(taskInstance.getFOE());
! 		setState(taskInstance.getState());
! 		setProcessInstance((ZebraProcessInstance) taskInstance
! 				.getProcessInstance());
! 		setTaskDefinition((ZebraTaskDefinition) taskInstance
! 				.getTaskDefinition());
  
! 		setRoutingAnswer(taskInstance.getRoutingAnswer());
! 		setTaskOwner(taskInstance.getTaskOwner());
! 		setCaption(taskInstance.getCaption());
! 		setDateDue(taskInstance.getDateDue());
! 		setDateCreated(taskInstance.getDateCreated());
! 		setActualCompletionDate(taskInstance.getActualCompletionDate());
! 		setDecisionMadeBy(taskInstance.getDecisionMadeBy());
! 		setPriority(taskInstance.getPriority());
! 		setShowInTaskList(taskInstance.isShowInTaskList());
! 		setOutcome(taskInstance.getOutcome());
! 	}
  
! 	/* ITaskInstance methods */
  
! 	/**
! 	 * @return Returns the taskInstanceId.
! 	 */
! 	@Id @GeneratedValue
! 	public Long getTaskInstanceId() {
! 		return this.taskInstanceId;
! 	}
  
! 	/**
! 	 * @param taskInstanceId
! 	 *            The taskInstanceId to set.
! 	 */
! 	public void setTaskInstanceId(Long taskInstanceId) {
! 		this.taskInstanceId = taskInstanceId;
! 	}
  
! 	/**
! 	 * @return
! 	 */
! 	@ManyToOne(targetEntity = ZebraProcessInstance.class, cascade = {
! 			CascadeType.MERGE, CascadeType.PERSIST })
! 	public IProcessInstance getProcessInstance() {
! 		return this.processInstance;
! 	}
  
! 	/**
! 	 * Provides a pre-casted version of the process instance
! 	 * 
! 	 * @return
! 	 */
! 	@Transient
! 	public ZebraProcessInstance getZebraProcessInstance() {
! 		return this.processInstance;
! 	}
  
! 	public void setProcessInstance(ZebraProcessInstance processInstance) {
! 		this.processInstance = processInstance;
! 	}
  
! 	@Basic
! 	public long getState() {
! 		return this.state;
! 	}
  
! 	public void setState(long newState) {
! 		this.state = newState;
! 	}
  
! 	@ManyToOne(targetEntity = ZebraTaskDefinition.class)
! 	public ITaskDefinition getTaskDefinition() {
! 		return this.taskDefinition;
! 	}
  
! 	/**
! 	 * @param taskDefinition
! 	 *            The taskDefinition to set.
! 	 */
! 	public void setTaskDefinition(ZebraTaskDefinition taskDefinition) {
! 		this.taskDefinition = taskDefinition;
! 	}
  
! 	@ManyToOne(targetEntity = ZebraFOE.class, cascade = { CascadeType.PERSIST,
! 			CascadeType.MERGE })
! 	public IFOE getFOE() {
! 		return this.FOE;
! 	}
  
! 	public void setFOE(IFOE foe) {
! 		this.FOE = foe;
! 	}
  
! 	/* Custom Methods */
  
! 	@Basic
! 	public String getRoutingAnswer() {
! 		return this.routingAnswer;
! 	}
  
! 	public void setRoutingAnswer(String routingAnswer) {
! 		this.routingAnswer = routingAnswer;
! 	}
  
! 	@ManyToOne
! 	public HibernateDynamicUser getTaskOwner() {
! 		return this.taskOwner;
! 	}
  
! 	public void setTaskOwner(HibernateDynamicUser user) {
! 		this.taskOwner = user;
! 	}
  
! 	@Basic
! 	public String getCaption() {
! 		if (this.caption == null && this.getTaskDefinition() != null) {
! 			this.caption = ((ZebraTaskDefinition) this.getTaskDefinition())
! 					.getName();
! 		}
! 		return this.caption;
! 	}
  
! 	/**
! 	 * @param caption
! 	 *            The caption to set.
! 	 */
! 	public void setCaption(String caption) {
! 		this.caption = caption;
! 	}
  
! 	/**
! 	 * @return Returns the dateCreated.
! 	 * 
! 	 */
! 	@Basic
! 	public Date getDateCreated() {
! 		return this.dateCreated;
! 	}
  
! 	/**
! 	 * @param dateCreated
! 	 *            The dateCreated to set.
! 	 */
! 	public void setDateCreated(Date dateCreated) {
! 		this.dateCreated = dateCreated;
! 	}
  
! 	/**
! 	 * @return Returns the dateDue.
! 	 * @hibernate.property
! 	 */
! 	@Basic
! 	public Date getDateDue() {
! 		return this.dateDue;
! 	}
  
! 	/**
! 	 * @param dateDue
! 	 *            The dateDue to set.
! 	 */
! 	public void setDateDue(Date dateDue) {
! 		this.dateDue = dateDue;
! 	}
  
! 	/**
! 	 * @return Returns the actualCompletionDate.
! 	 */
! 	@Basic
! 	public Date getActualCompletionDate() {
! 		return this.actualCompletionDate;
! 	}
  
! 	/**
! 	 * sets the "actual" completion date for the task; this is in addition to
! 	 * the completion date that is automatically set
! 	 * 
! 	 * @param date
! 	 *            date of actual completion
! 	 * 
! 	 */
! 	public void setActualCompletionDate(Date actualCompletionDate) {
! 		this.actualCompletionDate = actualCompletionDate;
! 	}
  
! 	/**
! 	 * @return
! 	 */
! 	@ManyToOne
! 	public HibernateDynamicUser getDecisionMadeBy() {
! 		return this.decisionMadeBy;
! 	}
  
! 	/**
! 	 * sets the "actual" person who made the decision for the task; this is in
! 	 * addition to the task owner who completed the task that is automatically
! 	 * set
! 	 */
! 	public void setDecisionMadeBy(HibernateDynamicUser decisionMadeBy) {
! 		this.decisionMadeBy = decisionMadeBy;
! 	}
  
! 	/**
! 	 * Returns required permissions for this task (both dynamic and static)
! 	 * 
! 	 * @return
! 	 * @throws net.sf.hibernate.exception.NestableException
! 	 * @throws NestableException
! 	 */
! 	@Transient
! 	public PermissionSet getPermissions() {
! 		// Static
! 		PermissionSet permissions = new PermissionSet();
! 		ZebraTaskDefinition antelopeTaskDefinition = (ZebraTaskDefinition) this
! 				.getTaskDefinition();
! 		PermissionSet staticPermissions = antelopeTaskDefinition
! 				.getStaticPermissions();
! 		permissions.add(staticPermissions);
  
! 		// Dynamic
! 		ZebraProcessInstance antelopeProcessInstance = (ZebraProcessInstance) this
! 				.getProcessInstance();
! 		PermissionSet dynamicPermissionSet = antelopeProcessInstance
! 				.getDynamicPermissions(antelopeTaskDefinition
! 						.getDynamicPermissions());
! 		permissions.add(dynamicPermissionSet);
  
! 		return permissions;
! 	}
  
! 	@Transient
! 	public String getCommaSeperatedPermissions() throws NestableException {
! 		PermissionSet permissions = this.getPermissions();
! 		StringBuffer permissionList = new StringBuffer();
  
! 		boolean first = true;
! 		for (Iterator iter = permissions.iterator(); iter.hasNext();) {
! 			if (first) {
! 				first = false;
! 			} else {
! 				permissionList.append(", ");
! 			}
  
! 			Permission permission = (Permission) iter.next();
! 			permissionList.append(permission.getName());
! 		}
  
! 		return permissionList.toString();
! 	}
  
! 	/**
! 	 * Gets the property set for the process that does with this This is a
! 	 * shortcut for those who don't want to call this directly on the process
! 	 * instance
! 	 */
! 	@Transient
! 	public Map getProcessPropertySet() {
! 		return this.getZebraProcessInstance().getPropertySet();
! 	}
  
! 	/**
! 	 * @hibernate.property
! 	 * @return Returns the showInTaskList.
! 	 */
! 	@Basic
! 	public boolean isShowInTaskList() {
! 		return this.showInTaskList;
! 	}
  
! 	/**
! 	 * @param showInTaskList
! 	 *            The showInTaskList to set.
! 	 */
! 	public void setShowInTaskList(boolean showInTaskList) {
! 		this.showInTaskList = showInTaskList;
! 	}
  
! 	/**
! 	 * @return Returns the priority.
! 	 */
! 	@ManyToOne
! 	public Priority getPriority() {
! 		return this.priority;
! 	}
  
! 	/**
! 	 * @param priority
! 	 *            The priority to set.
! 	 */
! 	public void setPriority(Priority priority) {
! 		this.priority = priority;
! 	}
  
! 	/**
! 	 * This is the detailed description of this step - this is not used by the
! 	 * engine but may be useful for example for showing in the history
! 	 * 
! 	 * @return Returns the description.
! 	 */
! 	@Basic
! 	@Column(length=4000)
! 	public String getDescription() {
! 		return this.description;
! 	}
  
! 	/**
! 	 * @param description
! 	 *            The description to set.
! 	 */
! 	public void setDescription(String description) {
! 		this.description = description;
! 	}
  
! 	/**
! 	 * @return Returns the outcome.
! 	 */
! 	@Basic
! 	public String getOutcome() {
! 		return this.outcome;
! 	}
  
! 	/**
! 	 * @param outcome
! 	 *            The outcome to set.
! 	 */
! 	public void setOutcome(String outcome) {
! 		this.outcome = outcome;
! 	}
  }
--- 56,459 ----
  public abstract class AbstractZebraTaskInstance implements ITaskInstance {
  
!     /* Properties for implementing the interface */
!     private IFOE FOE;
  
!     private ZebraProcessInstance processInstance;
  
!     private long state;
  
!     private Long taskInstanceId;
  
!     /* Custom Properties */
  
!     private String routingAnswer;
  
!     private HibernateDynamicUser taskOwner;
  
!     private String caption;
  
!     private String description;
  
!     private String outcome;
  
!     private Date dateDue;
  
!     private Date dateCreated;
  
!     private Date actualCompletionDate;
  
!     private HibernateDynamicUser decisionMadeBy;
  
!     private Priority priority;
  
!     private Long taskDefinitionId;
  
!     /**
!      * Boolean used to decide if this should be shown on any task list (set by
!      * factory)
!      */
!     private boolean showInTaskList;
  
!     /*
!      * (non-Javadoc)
!      * 
!      * @see com.anite.antelope.zebra.modules.actionlet.Actionlet#doPerformTrigger(org.apache.turbine.util.RunData,
!      *      org.apache.velocity.context.Context,
!      *      com.anite.antelope.zebra.om.AntelopeTaskInstance,
!      *      com.anite.antelope.zebra.om.AntelopeProcessInstance,
!      *      com.anite.penguin.modules.tools.FormTool)
!      */
!     public static final String NOT_COMPLETED = "Not Completed";
  
!     public static final String COMPLETED = "Completed";
  
!     public Long getTaskDefinitionId() {
!         return taskDefinitionId;
!     }
  
!     public void setTaskDefinitionId(Long taskDefinitionId) {
!         this.taskDefinitionId = taskDefinitionId;
!     }
  
!     public AbstractZebraTaskInstance() {
!         //noop
!     }
  
!     /**
!      * Copy constructor Sets all fields EXCEPT for the instanceId
!      * 
!      * @param AntelopeTaskInstance
!      *            a task instance
!      */
!     public AbstractZebraTaskInstance(AbstractZebraTaskInstance taskInstance) {
!         /* Standard Properties */
!         setFOE(taskInstance.getFOE());
!         setState(taskInstance.getState());
!         setProcessInstance((ZebraProcessInstance) taskInstance.getProcessInstance());
!         setTaskDefinitionId(taskInstance.getTaskDefinitionId());
  
!         setRoutingAnswer(taskInstance.getRoutingAnswer());
!         setTaskOwner(taskInstance.getTaskOwner());
!         setCaption(taskInstance.getCaption());
!         setDateDue(taskInstance.getDateDue());
!         setDateCreated(taskInstance.getDateCreated());
!         setActualCompletionDate(taskInstance.getActualCompletionDate());
!         setDecisionMadeBy(taskInstance.getDecisionMadeBy());
!         setPriority(taskInstance.getPriority());
!         setShowInTaskList(taskInstance.isShowInTaskList());
!         setOutcome(taskInstance.getOutcome());
!     }
  
!     /* ITaskInstance methods */
  
!     /**
!      * @return Returns the taskInstanceId.
!      */
!     @Id
!     @GeneratedValue
!     public Long getTaskInstanceId() {
!         return this.taskInstanceId;
!     }
  
!     /**
!      * @param taskInstanceId
!      *            The taskInstanceId to set.
!      */
!     public void setTaskInstanceId(Long taskInstanceId) {
!         this.taskInstanceId = taskInstanceId;
!     }
  
!     /**
!      * @return
!      */
!     @ManyToOne(targetEntity = ZebraProcessInstance.class, cascade = { CascadeType.MERGE, CascadeType.PERSIST })
!     public IProcessInstance getProcessInstance() {
!         return this.processInstance;
!     }
  
!     /**
!      * Provides a pre-casted version of the process instance
!      * 
!      * @return
!      */
!     @Transient
!     public ZebraProcessInstance getZebraProcessInstance() {
!         return this.processInstance;
!     }
  
!     public void setProcessInstance(ZebraProcessInstance processInstance) {
!         this.processInstance = processInstance;
!     }
  
!     @Basic
!     public long getState() {
!         return this.state;
!     }
  
!     public void setState(long newState) {
!         this.state = newState;
!     }
  
!     @Transient
!     public ITaskDefinition getTaskDefinition() throws DefinitionNotFoundException {
!         ZebraDefinitionFactory definitons = (ZebraDefinitionFactory) RegistryManager.getInstance().getRegistry()
!                 .getService("zebra.zebraDefinitionFactory", ZebraDefinitionFactory.class);
!         return definitons.getTaskDefinition(this.taskDefinitionId);
!     }
  
!     /**
!      * @param taskDefinition
!      *            The taskDefinition to set.
!      */
!     public void setTaskDefinition(ZebraTaskDefinition taskDefinition) {
  
!         this.taskDefinitionId = taskDefinition.getId();
!     }
  
!     @ManyToOne(targetEntity = ZebraFOE.class, cascade = { CascadeType.PERSIST, CascadeType.MERGE })
!     public IFOE getFOE() {
!         return this.FOE;
!     }
  
!     public void setFOE(IFOE foe) {
!         this.FOE = foe;
!     }
  
!     /* Custom Methods */
  
!     @Basic
!     public String getRoutingAnswer() {
!         return this.routingAnswer;
!     }
  
!     public void setRoutingAnswer(String routingAnswer) {
!         this.routingAnswer = routingAnswer;
!     }
  
!     @ManyToOne
!     public HibernateDynamicUser getTaskOwner() {
!         return this.taskOwner;
!     }
  
!     public void setTaskOwner(HibernateDynamicUser user) {
!         this.taskOwner = user;
!     }
  
!     @Basic
!     public String getCaption() {
!         try {
!             if (this.caption == null && this.getTaskDefinition() != null) {
!                 this.caption = ((ZebraTaskDefinition) this.getTaskDefinition()).getName();
!             }
!             return this.caption;
!         } catch (DefinitionNotFoundException e) {
!            throw new NestableRuntimeException(e);
!         }
!     }
  
!     /**
!      * @param caption
!      *            The caption to set.
!      */
!     public void setCaption(String caption) {
!         this.caption = caption;
!     }
  
!     /**
!      * @return Returns the dateCreated.
!      * 
!      */
!     @Basic
!     public Date getDateCreated() {
!         return this.dateCreated;
!     }
  
!     /**
!      * @param dateCreated
!      *            The dateCreated to set.
!      */
!     public void setDateCreated(Date dateCreated) {
!         this.dateCreated = dateCreated;
!     }
  
!     /**
!      * @return Returns the dateDue.
!      * @hibernate.property
!      */
!     @Basic
!     public Date getDateDue() {
!         return this.dateDue;
!     }
  
!     /**
!      * @param dateDue
!      *            The dateDue to set.
!      */
!     public void setDateDue(Date dateDue) {
!         this.dateDue = dateDue;
!     }
  
!     /**
!      * @return Returns the actualCompletionDate.
!      */
!     @Basic
!     public Date getActualCompletionDate() {
!         return this.actualCompletionDate;
!     }
  
!     /**
!      * sets the "actual" completion date for the task; this is in addition to
!      * the completion date that is automatically set
!      * 
!      * @param date
!      *            date of actual completion
!      * 
!      */
!     public void setActualCompletionDate(Date actualCompletionDate) {
!         this.actualCompletionDate = actualCompletionDate;
!     }
  
!     /**
!      * @return
!      */
!     @ManyToOne
!     public HibernateDynamicUser getDecisionMadeBy() {
!         return this.decisionMadeBy;
!     }
  
!     /**
!      * sets the "actual" person who made the decision for the task; this is in
!      * addition to the task owner who completed the task that is automatically
!      * set
!      */
!     public void setDecisionMadeBy(HibernateDynamicUser decisionMadeBy) {
!         this.decisionMadeBy = decisionMadeBy;
!     }
  
!     /**
!      * Returns required permissions for this task (both dynamic and static)
!      * 
!      * @return
!      * @throws net.sf.hibernate.exception.NestableException
!      * @throws NestableException
!      */
!     @Transient
!     public PermissionSet getPermissions() {
!         try {
!             // Static
!             PermissionSet permissions = new PermissionSet();
!             ZebraTaskDefinition antelopeTaskDefinition = (ZebraTaskDefinition) this.getTaskDefinition();
!             PermissionSet staticPermissions = antelopeTaskDefinition.getStaticPermissions();
!             permissions.add(staticPermissions);
  
!             // Dynamic
!             ZebraProcessInstance antelopeProcessInstance = (ZebraProcessInstance) this.getProcessInstance();
!             PermissionSet dynamicPermissionSet = antelopeProcessInstance.getDynamicPermissions(antelopeTaskDefinition
!                     .getDynamicPermissions());
!             permissions.add(dynamicPermissionSet);
  
!             return permissions;
!         } catch (DefinitionNotFoundException e) {
!             throw new NestableRuntimeException(e);
!         }
!     }
  
!     @Transient
!     public String getCommaSeperatedPermissions() throws NestableException {
!         PermissionSet permissions = this.getPermissions();
!         StringBuffer permissionList = new StringBuffer();
  
!         boolean first = true;
!         for (Iterator iter = permissions.iterator(); iter.hasNext();) {
!             if (first) {
!                 first = false;
!             } else {
!                 permissionList.append(", ");
!             }
  
!             Permission permission = (Permission) iter.next();
!             permissionList.append(permission.getName());
!         }
  
!         return permissionList.toString();
!     }
  
!     /**
!      * Gets the property set for the process that does with this This is a
!      * shortcut for those who don't want to call this directly on the process
!      * instance
!      */
!     @Transient
!     public Map getProcessPropertySet() {
!         return this.getZebraProcessInstance().getPropertySet();
!     }
  
!     /**
!      * @hibernate.property
!      * @return Returns the showInTaskList.
!      */
!     @Basic
!     public boolean isShowInTaskList() {
!         return this.showInTaskList;
!     }
  
!     /**
!      * @param showInTaskList
!      *            The showInTaskList to set.
!      */
!     public void setShowInTaskList(boolean showInTaskList) {
!         this.showInTaskList = showInTaskList;
!     }
  
!     /**
!      * @return Returns the priority.
!      */
!     @ManyToOne
!     public Priority getPriority() {
!         return this.priority;
!     }
  
!     /**
!      * @param priority
!      *            The priority to set.
!      */
!     public void setPriority(Priority priority) {
!         this.priority = priority;
!     }
  
!     /**
!      * This is the detailed description of this step - this is not used by the
!      * engine but may be useful for example for showing in the history
!      * 
!      * @return Returns the description.
!      */
!     @Basic
!     @Column(length = 4000)
!     public String getDescription() {
!         return this.description;
!     }
! 
!     /**
!      * @param description
!      *            The description to set.
!      */
!     public void setDescription(String description) {
!         this.description = description;
!     }
! 
!     /**
!      * @return Returns the outcome.
!      */
!     @Basic
!     public String getOutcome() {
!         return this.outcome;
!     }
! 
!     /**
!      * @param outcome
!      *            The outcome to set.
!      */
!     public void setOutcome(String outcome) {
!         this.outcome = outcome;
!     }
  }



From nobody at sheep.berlios.de  Wed Mar  8 18:51:33 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 8 Mar 2006 18:51:33 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/taskAction QuartzServiceTaskAction.java,1.3,1.4
Message-ID: <200603081751.k28HpXb29822@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/taskAction
In directory sheep:/tmp/cvs-serv4384/src/main/java/com/anite/zebra/hivemind/taskAction

Modified Files:
	QuartzServiceTaskAction.java 
Log Message:


Index: QuartzServiceTaskAction.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/taskAction/QuartzServiceTaskAction.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** QuartzServiceTaskAction.java	20 Feb 2006 15:40:11 -0000	1.3
--- QuartzServiceTaskAction.java	8 Mar 2006 16:52:54 -0000	1.4
***************
*** 27,30 ****
--- 27,31 ----
  import org.quartz.SimpleTrigger;
  
+ import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
  import com.anite.zebra.core.exceptions.RunTaskException;
  import com.anite.zebra.core.factory.exceptions.StateFailureException;
***************
*** 128,132 ****
              } catch (StateFailureException e) {
                  throw new RunTaskException(e);
!             }
          } else {
              // Trigger has fired
--- 129,134 ----
              } catch (StateFailureException e) {
                  throw new RunTaskException(e);
!             } catch (DefinitionNotFoundException e) {
!                 throw new RunTaskException(e);            }
          } else {
              // Trigger has fired



From nobody at sheep.berlios.de  Wed Mar  8 18:51:33 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 8 Mar 2006 18:51:33 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/.settings org.eclipse.jdt.core.prefs,1.6,1.7
Message-ID: <200603081751.k28HpXb29817@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/.settings
In directory sheep:/tmp/cvs-serv4384/.settings

Modified Files:
	org.eclipse.jdt.core.prefs 
Log Message:


Index: org.eclipse.jdt.core.prefs
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/.settings/org.eclipse.jdt.core.prefs,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** org.eclipse.jdt.core.prefs	21 Feb 2006 09:23:57 -0000	1.6
--- org.eclipse.jdt.core.prefs	8 Mar 2006 16:52:53 -0000	1.7
***************
*** 1,3 ****
! #Tue Feb 21 08:57:25 GMT 2006
  org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
  eclipse.preferences.version=1
--- 1,3 ----
! #Tue Mar 07 12:02:45 GMT 2006
  org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
  eclipse.preferences.version=1



From nobody at sheep.berlios.de  Wed Mar  8 18:53:41 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Wed, 8 Mar 2006 18:53:41 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state ZebraProcessInstance.java,1.12,1.13
Message-ID: <200603081753.k28Hrfb29966@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state
In directory sheep:/tmp/cvs-serv4837/src/main/java/com/anite/zebra/hivemind/om/state

Modified Files:
	ZebraProcessInstance.java 
Log Message:
Added defensive code to toString() method;

Index: ZebraProcessInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/ZebraProcessInstance.java,v
retrieving revision 1.12
retrieving revision 1.13
diff -C2 -d -r1.12 -r1.13
*** ZebraProcessInstance.java	20 Feb 2006 15:52:29 -0000	1.12
--- ZebraProcessInstance.java	8 Mar 2006 16:55:01 -0000	1.13
***************
*** 783,787 ****
      @Override
      public String toString() {
!         return this.getProcessInstanceId().toString();
      }
  }
--- 783,791 ----
      @Override
      public String toString() {
!     	if (this.getProcessInstanceId() != null) {
!     		return this.getProcessInstanceId().toString();
!     	} else {
!     		return super.toString();
!     	}
      }
  }



From nobody at sheep.berlios.de  Thu Mar  9 12:13:00 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Thu, 9 Mar 2006 12:13:00 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state ZebraProcessInstance.java,1.13,1.14
Message-ID: <200603091113.k29BCxb02589@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state
In directory sheep:/tmp/cvs-serv953/src/main/java/com/anite/zebra/hivemind/om/state

Modified Files:
	ZebraProcessInstance.java 
Log Message:
Added code to ensure non-cached processDefs and taskDefs are retrieved

Index: ZebraProcessInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/ZebraProcessInstance.java,v
retrieving revision 1.13
retrieving revision 1.14
diff -C2 -d -r1.13 -r1.14
*** ZebraProcessInstance.java	8 Mar 2006 16:55:01 -0000	1.13
--- ZebraProcessInstance.java	9 Mar 2006 10:14:16 -0000	1.14
***************
*** 257,261 ****
          ZebraDefinitionFactory definitons = (ZebraDefinitionFactory) RegistryManager.getInstance().getRegistry()
                  .getService("zebra.zebraDefinitionFactory", ZebraDefinitionFactory.class);
!         return definitons.getAllProcessDefinitionsById().get(this.processDefinitionId);
  
      }
--- 257,261 ----
          ZebraDefinitionFactory definitons = (ZebraDefinitionFactory) RegistryManager.getInstance().getRegistry()
                  .getService("zebra.zebraDefinitionFactory", ZebraDefinitionFactory.class);
!         return definitons.getProcessDefinitionById(this.processDefinitionId);
  
      }



From nobody at sheep.berlios.de  Thu Mar  9 12:13:00 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Thu, 9 Mar 2006 12:13:00 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl ZebraStateFactoryTest.java,1.4,1.5 ZebraDefinitionsFactoryTest.java,1.5,1.6 LockMangerTest.java,1.3,1.4
Message-ID: <200603091113.k29BD0b02590@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv953/src/test/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraStateFactoryTest.java ZebraDefinitionsFactoryTest.java 
	LockMangerTest.java 
Log Message:
Added code to ensure non-cached processDefs and taskDefs are retrieved

Index: ZebraStateFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraStateFactoryTest.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** ZebraStateFactoryTest.java	13 Feb 2006 16:11:16 -0000	1.4
--- ZebraStateFactoryTest.java	9 Mar 2006 10:14:17 -0000	1.5
***************
*** 18,23 ****
  package com.anite.zebra.hivemind.impl;
  
- import java.util.Iterator;
- 
  import junit.framework.TestCase;
  
--- 18,21 ----
***************
*** 46,49 ****
--- 44,48 ----
   */
  public class ZebraStateFactoryTest extends TestCase {
+ 	private static final String SIMPLEWORKFLOW = "SimpleWorkflow";
  
      private IStateFactory stateFactory;
***************
*** 118,125 ****
          // Load the first process definition it has (e.g. we don't care which
          // process)
!         Iterator processDefinitions = this.definitionsFactory.getAllProcessDefinitionsById().keySet().iterator();
!         ZebraProcessDefinition processDefinition = this.definitionsFactory.getAllProcessDefinitionsById().get(
!                 processDefinitions.next());
!         return processDefinition;
      }
  
--- 117,121 ----
          // Load the first process definition it has (e.g. we don't care which
          // process)
!         return this.definitionsFactory.getProcessDefinitionByName(SIMPLEWORKFLOW);
      }
  

Index: ZebraDefinitionsFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraDefinitionsFactoryTest.java,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** ZebraDefinitionsFactoryTest.java	12 Dec 2005 09:43:47 -0000	1.5
--- ZebraDefinitionsFactoryTest.java	9 Mar 2006 10:14:17 -0000	1.6
***************
*** 75,81 ****
  	 */
  	public void testStartUp() {
! 		assertTrue(this.zebraDefinitionFactory.getAllProcessDefinitionsByName()
! 				.size() > 0);
! 
  	}
  
--- 75,79 ----
  	 */
  	public void testStartUp() {
! 		assertNotNull(this.zebraDefinitionFactory.getProcessDefinitionByName(SIMPLEWORKFLOW));
  	}
  
***************
*** 86,90 ****
  	public void testSimpleWorkflow() {
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getAllProcessDefinitionsByName().get(SIMPLEWORKFLOW);
  		assertNotNull(processDefinition);
  		assertEquals(SIMPLEWORKFLOW, processDefinition.getName());
--- 84,88 ----
  	public void testSimpleWorkflow() {
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getProcessDefinitionByName(SIMPLEWORKFLOW);
  		assertNotNull(processDefinition);
  		assertEquals(SIMPLEWORKFLOW, processDefinition.getName());
***************
*** 154,158 ****
  	public void testSplitWorkflow(){
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getAllProcessDefinitionsByName().get(SPLIT);
  		assertNotNull(processDefinition);
  		assertEquals(SPLIT, processDefinition.getName());
--- 152,156 ----
  	public void testSplitWorkflow(){
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getProcessDefinitionByName(SPLIT);
  		assertNotNull(processDefinition);
  		assertEquals(SPLIT, processDefinition.getName());
***************
*** 245,249 ****
  			{
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getAllProcessDefinitionsByName().get(SIMPLEWORKFLOW);
  		assertNotNull(processDefinition);
  		assertEquals(SIMPLEWORKFLOW, processDefinition.getName());
--- 243,247 ----
  			{
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getProcessDefinitionByName(SIMPLEWORKFLOW);
  		assertNotNull(processDefinition);
  		assertEquals(SIMPLEWORKFLOW, processDefinition.getName());
***************
*** 253,259 ****
  	public void testGetProcessDefinitionByID() {
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getAllProcessDefinitionsByName().get(SIMPLEWORKFLOW);
  		ZebraProcessDefinition processDefinitionById = this.zebraDefinitionFactory
! 				.getAllProcessDefinitionsById().get(processDefinition.getId());
  
  		assertEquals(processDefinition, processDefinitionById);
--- 251,257 ----
  	public void testGetProcessDefinitionByID() {
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getProcessDefinitionByName(SIMPLEWORKFLOW);
  		ZebraProcessDefinition processDefinitionById = this.zebraDefinitionFactory
! 				.getProcessDefinitionById(processDefinition.getId());
  
  		assertEquals(processDefinition, processDefinitionById);
***************
*** 270,274 ****
  		Long taskID = null;
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getAllProcessDefinitionsByName().get(SIMPLEWORKFLOW);
  		assertNotNull(processDefinition);
  		assertEquals(SIMPLEWORKFLOW, processDefinition.getName());
--- 268,272 ----
  		Long taskID = null;
  		ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
! 				.getProcessDefinitionByName(SIMPLEWORKFLOW);
  		assertNotNull(processDefinition);
  		assertEquals(SIMPLEWORKFLOW, processDefinition.getName());

Index: LockMangerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/LockMangerTest.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** LockMangerTest.java	12 Dec 2005 09:43:48 -0000	1.3
--- LockMangerTest.java	9 Mar 2006 10:14:17 -0000	1.4
***************
*** 19,23 ****
  import java.util.Calendar;
  import java.util.Date;
- import java.util.Iterator;
  
  import junit.framework.TestCase;
--- 19,22 ----
***************
*** 36,39 ****
--- 35,39 ----
  
  public class LockMangerTest extends TestCase {
+ 	private static final String SIMPLEWORKFLOW = "SimpleWorkflow";
  
      public void setUp() {
***************
*** 59,66 ****
          // Load the first process definition it has (e.g. we don't care which
          // process)
!         Iterator processDefinitions = this.definitionsFactory.getAllProcessDefinitionsById().keySet().iterator();
!         ZebraProcessDefinition processDefinition = this.definitionsFactory.getAllProcessDefinitionsById().get(
!                 processDefinitions.next());
!         return processDefinition;
      }
  
--- 59,63 ----
          // Load the first process definition it has (e.g. we don't care which
          // process)
!         return this.definitionsFactory.getProcessDefinitionByName(SIMPLEWORKFLOW);
      }
  



From nobody at sheep.berlios.de  Thu Mar  9 12:13:00 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Thu, 9 Mar 2006 12:13:00 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl ZebraDefinitionFactory.java,1.1,1.2 Zebra.java,1.7,1.8
Message-ID: <200603091113.k29BD0b02595@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv953/src/main/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraDefinitionFactory.java Zebra.java 
Log Message:
Added code to ensure non-cached processDefs and taskDefs are retrieved

Index: ZebraDefinitionFactory.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/ZebraDefinitionFactory.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** ZebraDefinitionFactory.java	25 Nov 2005 10:32:02 -0000	1.1
--- ZebraDefinitionFactory.java	9 Mar 2006 10:14:17 -0000	1.2
***************
*** 13,16 ****
--- 13,17 ----
  import org.apache.commons.logging.LogFactory;
  import org.hibernate.HibernateException;
+ import org.hibernate.LockMode;
  import org.hibernate.Query;
  import org.hibernate.Session;
***************
*** 257,270 ****
  	}
  
! 	public Map<Long, ZebraProcessDefinition> getAllProcessDefinitionsById() {
! 		return this.allProcessDefinitionsById;
  	}
  
! 	public Map<String, ZebraProcessDefinition> getAllProcessDefinitionsByName() {
! 		return this.allProcessDefinitionsByName;
  	}
  
! 	public Map<Long, ZebraTaskDefinition> getAllTaskDefinitionsById() {
! 		return this.latestTaskDefinitionsById;
  	}
  
--- 258,277 ----
  	}
  
! 	public ZebraProcessDefinition getProcessDefinitionById(Long id) {
! 		ZebraProcessDefinition processDef = allProcessDefinitionsById.get(id);
! 		session.lock(processDef, LockMode.NONE);
! 		return processDef;
  	}
  
! 	public ZebraProcessDefinition getProcessDefinitionByName(String name) {
! 		ZebraProcessDefinition processDef = allProcessDefinitionsByName.get(name);
! 		session.lock(processDef, LockMode.NONE);
! 		return processDef;
  	}
  
! 	public ZebraTaskDefinition getTaskDefinitionById(Long id) {
! 		ZebraTaskDefinition taskDef = latestTaskDefinitionsById.get(id);
! 		session.lock(taskDef, LockMode.NONE);
! 		return taskDef;
  	}
  

Index: Zebra.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/Zebra.java,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** Zebra.java	3 Jan 2006 07:48:31 -0000	1.7
--- Zebra.java	9 Mar 2006 10:14:17 -0000	1.8
***************
*** 19,27 ****
  import java.util.Iterator;
  import java.util.List;
- import java.util.Map;
  import java.util.Set;
  
  import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
  
  import com.anite.zebra.core.Engine;
--- 19,27 ----
  import java.util.Iterator;
  import java.util.List;
  import java.util.Set;
  
  import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
+ import org.hibernate.LockMode;
  
  import com.anite.zebra.core.Engine;
***************
*** 65,70 ****
      }
  
!     public Map<String, ZebraProcessDefinition> getAllProcessDefinitions() {
!         return this.definitionFactory.getAllProcessDefinitionsByName();
      }
  
--- 65,70 ----
      }
  
!     public ZebraProcessDefinition getProcessDefinition(String processName) {
!         return this.definitionFactory.getProcessDefinitionByName(processName);
      }
  
***************
*** 76,80 ****
       */
      public ZebraProcessInstance createProcessPaused(String processName) throws CreateProcessException {
!         return createProcessPaused(this.getAllProcessDefinitions().get(processName));
  
      }
--- 76,80 ----
       */
      public ZebraProcessInstance createProcessPaused(String processName) throws CreateProcessException {
!         return createProcessPaused(this.getProcessDefinition(processName));
  
      }
***************
*** 87,91 ****
       */
      public ZebraProcessInstance createProcessPaused(ZebraProcessDefinition process) throws CreateProcessException {
- 
          return (ZebraProcessInstance) engine.createProcess(process);
  
--- 87,90 ----



From nobody at sheep.berlios.de  Thu Mar  9 17:08:31 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 9 Mar 2006 17:08:31 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.25,1.26 surefire-system.properties,1.1,NONE
Message-ID: <200603091608.k29G8Vb19191@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv32483

Modified Files:
	pom.xml 
Removed Files:
	surefire-system.properties 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.25
retrieving revision 1.26
diff -C2 -d -r1.25 -r1.26
*** pom.xml	8 Mar 2006 16:52:53 -0000	1.25
--- pom.xml	9 Mar 2006 15:09:51 -0000	1.26
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.15</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>2.0</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
***************
*** 20,24 ****
      </developers>
      <scm>
!         <connection>scm:cvs:pserver:anonymous at cvs.zebra.berlios.de:/cvsroot/zebra:zebra/src/java/zebra-hivemind</connection>
      </scm>
      <build>
--- 20,24 ----
      </developers>
      <scm>
!         <connection>scm:cvs:pserver:anonymous:@cvs.zebra.berlios.de:/cvsroot/zebra:zebra/src/java/zebra-hivemind</connection>
      </scm>
      <build>
***************
*** 185,201 ****
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-javadoc-plugin</artifactId>
!             </plugin>
!            <!-- <plugin>
!                 <groupId>fulcrum-hivemind</groupId>
!                 <artifactId>hivedoc-maven-plugin</artifactId>
!                 <version>0.2</version>
!                 <configuration>
!                     <ignoredJars>
!                         <ignoredJar>hivemind-1.1.jar</ignoredJar>
!                         <ignoredJar>hivemind-lib-1.1.jar</ignoredJar>
!                         <ignoredJar>tapestry-contrib-4.0.jar</ignoredJar>
!                     </ignoredJars>
!                 </configuration>
!             </plugin>-->
          </plugins>
      </reporting>
--- 185,189 ----
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-javadoc-plugin</artifactId>
!             </plugin>        
          </plugins>
      </reporting>

--- surefire-system.properties DELETED ---



From nobody at sheep.berlios.de  Tue Mar 14 10:24:37 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 14 Mar 2006 10:24:37 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl ZebraDefinitionFactory.java,1.2,1.3
Message-ID: <200603140924.k2E9Obb30697@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv7248/src/main/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraDefinitionFactory.java 
Log Message:
Added convenience method to retrieve task definition ids.


Index: ZebraDefinitionFactory.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/ZebraDefinitionFactory.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** ZebraDefinitionFactory.java	9 Mar 2006 10:14:17 -0000	1.2
--- ZebraDefinitionFactory.java	14 Mar 2006 08:25:56 -0000	1.3
***************
*** 1,4 ****
--- 1,6 ----
  package com.anite.zebra.hivemind.impl;
  
+ import java.math.BigInteger;
+ import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.Iterator;
***************
*** 249,252 ****
--- 251,281 ----
  		getDistinctLatestVersions();
  	}
+ 
+ 	@SuppressWarnings("unchecked")
+ 	public List<Long> getTaskDefinitionIds(String processName, String taskName) {
+     	StringBuffer sql = new StringBuffer();
+     	sql.append("SELECT td.id ");
+     	sql.append("FROM ZebraProcessDefinition pd, processTaskDefinitions ptd, ZebraTaskDefinition td, ZebraProcessVersions pv ");
+     	sql.append("WHERE pd.id=ptd.processDefinitionId ");
+     	sql.append("AND pd.versionId=pv.id ");
+     	sql.append("AND pd.id=ptd.processDefinitionId ");
+     	sql.append("AND ptd.taskDefinitionId=td.id ");
+     	sql.append("AND pv.name=:processName ");
+     	sql.append("AND td.name=:taskName");
+     	
+     	Query q = session.createSQLQuery(sql.toString());
+     	q.setString("processName", processName);
+     	q.setString("taskName", taskName);
+     	
+     	// Query stupidly returns a list of BigIntegers. 
+     	// Need to convert them into Longs. Yawn.
+     	List<BigInteger> results = q.list();
+     	List<Long> properResults = new ArrayList<Long>(results.size());
+     	for (BigInteger i : results) {
+     		properResults.add(i.longValue());
+     	}
+     	
+     	return properResults;
+     }
  
  	public Session getSession() {



From nobody at sheep.berlios.de  Tue Mar 14 10:25:41 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 14 Mar 2006 10:25:41 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.26,1.27
Message-ID: <200603140925.k2E9Pfb30738@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv7483

Modified Files:
	pom.xml 
Log Message:
Added convenience method to retrieve task definition ids.


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.26
retrieving revision 1.27
diff -C2 -d -r1.26 -r1.27
*** pom.xml	9 Mar 2006 15:09:51 -0000	1.26
--- pom.xml	14 Mar 2006 08:27:01 -0000	1.27
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>2.0</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>2.1</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>



From nobody at sheep.berlios.de  Wed Mar 15 13:43:20 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 13:43:20 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl ZebraDefinitionsFactoryCleanUpTest.java,NONE,1.1
Message-ID: <200603151243.k2FChKb09597@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv28237/src/test/java/com/anite/zebra/hivemind/impl

Added Files:
	ZebraDefinitionsFactoryCleanUpTest.java 
Log Message:


--- NEW FILE: ZebraDefinitionsFactoryCleanUpTest.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.impl;

import java.util.Iterator;
import java.util.Set;

import junit.framework.TestCase;

import org.apache.fulcrum.hivemind.RegistryManager;
import org.apache.hivemind.Resource;
import org.apache.hivemind.impl.DefaultClassResolver;
import org.apache.hivemind.util.ClasspathResource;

import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
import com.anite.zebra.ext.definitions.api.IPropertyGroups;
import com.anite.zebra.ext.definitions.impl.RoutingDefinition;
import com.anite.zebra.ext.definitions.impl.TaskDefinition;
import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;

public class ZebraDefinitionsFactoryCleanUpTest extends TestCase {
    private static final String WELCOME_TO_WORKFLOW = "Welcome to workflow";

    private static final String SIMPLEWORKFLOW = "SimpleWorkflow";

    private ZebraDefinitionFactory zebraDefinitionFactory;

    protected void setUp() throws Exception {

        Resource resource = new ClasspathResource(new DefaultClassResolver(),
                "META-INF/hivemodule_zebradefinitions.xml");
        RegistryManager.getInstance().getResources().add(resource);

        this.zebraDefinitionFactory = (ZebraDefinitionFactory) RegistryManager.getInstance().getRegistry().getService(
                "zebra.zebraDefinitionFactory", ZebraDefinitionFactory.class);
    }

    /**
     * As we cache definitions we can get session issues when we change threads
     * or cleanup the registry. This test simulates that behaviour.
     * @throws DefinitionNotFoundException 
     *
     */
    public void testGetTaskDefinitionFromCache() {

        ZebraProcessDefinition processDefinition = this.zebraDefinitionFactory
                .getProcessDefinitionByName(SIMPLEWORKFLOW);
        assertNotNull(processDefinition);
        assertEquals(SIMPLEWORKFLOW, processDefinition.getName());

        assertTrue(processDefinition.getTaskDefinitions().size() == 5);
        // find a task
        TaskDefinition task = (TaskDefinition) processDefinition.getFirstTask();
        // discover task name (we are using the Welcome to workflow one)
        assertEquals(WELCOME_TO_WORKFLOW, task.getName());

        Long taskId = task.getId();
        // Now we have loaded the task up (as normal) clean up the thread 
        RegistryManager.getInstance().getRegistry().cleanupThread();

        TaskDefinition taskDefinition = this.zebraDefinitionFactory.getTaskDefinition(taskId);
        forceLoadOfAllItems(taskDefinition);

    }

    public void forceLoadOfAllItems(TaskDefinition taskDefinition) {
        Set routings = taskDefinition.getRoutingOut();
        for (Iterator iter = routings.iterator(); iter.hasNext();) {
            RoutingDefinition routing = (RoutingDefinition) iter.next();
            assertNotNull(routing.getId());
        }

        IPropertyGroups groups = taskDefinition.getPropertyGroups();
        assertNotNull(groups.toString());

    }
}



From nobody at sheep.berlios.de  Wed Mar 15 13:43:20 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 13:43:20 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl ZebraDefinitionFactory.java,1.3,1.4 Zebra.java,1.8,1.9
Message-ID: <200603151243.k2FChKb09601@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv28237/src/main/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraDefinitionFactory.java Zebra.java 
Log Message:


Index: ZebraDefinitionFactory.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/ZebraDefinitionFactory.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** ZebraDefinitionFactory.java	14 Mar 2006 08:25:56 -0000	1.3
--- ZebraDefinitionFactory.java	15 Mar 2006 11:44:41 -0000	1.4
***************
*** 3,10 ****
  import java.math.BigInteger;
  import java.util.ArrayList;
- import java.util.HashMap;
  import java.util.Iterator;
  import java.util.List;
- import java.util.Map;
  import java.util.Set;
  
--- 3,8 ----
***************
*** 14,24 ****
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;
  import org.hibernate.HibernateException;
- import org.hibernate.LockMode;
  import org.hibernate.Query;
  import org.hibernate.Session;
  import org.hibernate.Transaction;
  
- import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
  import com.anite.zebra.ext.xmlloader.LoadFromFile;
  import com.anite.zebra.hivemind.om.defs.IXmlDefinition;
--- 12,22 ----
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;
+ import org.hibernate.Criteria;
  import org.hibernate.HibernateException;
  import org.hibernate.Query;
  import org.hibernate.Session;
  import org.hibernate.Transaction;
+ import org.hibernate.criterion.Restrictions;
  
  import com.anite.zebra.ext.xmlloader.LoadFromFile;
  import com.anite.zebra.hivemind.om.defs.IXmlDefinition;
***************
*** 39,315 ****
   */
  public class ZebraDefinitionFactory {
! 	/** logging */
! 	private static Log log = LogFactory.getLog(ZebraDefinitionFactory.class);
! 
! 	/* Variables for configuration */
! 	private String processesPath;
! 
! 	/**
! 	 * Hibernate Session for loading definitions
! 	 */
! 	private Session session;
! 
! 	/**
! 	 * All the process definitions
! 	 */
! 	private Map<String, ZebraProcessDefinition> allProcessDefinitionsByName = new HashMap<String, ZebraProcessDefinition>();
! 
! 	private Map<Long, ZebraProcessDefinition> allProcessDefinitionsById = new HashMap<Long, ZebraProcessDefinition>();
! 
! 	private Map<Long, ZebraTaskDefinition> latestTaskDefinitionsById = new HashMap<Long, ZebraTaskDefinition>();
! 
! 	/**
! 	 * Get a task definition
! 	 */
! 	public ZebraTaskDefinition getTaskDefinition(Long id)
! 			throws DefinitionNotFoundException {
! 		ZebraTaskDefinition taskDefinition;
  
! 		taskDefinition = this.latestTaskDefinitionsById.get(id);
  
! 		if (taskDefinition == null) {
! 			try {
  
! 				taskDefinition = (ZebraTaskDefinition) this.session.get(
! 						ZebraTaskDefinition.class, id);
! 			} catch (Exception e) {
! 				log.error("Exception while loading task definition:" + id, e);
! 				throw new DefinitionNotFoundException(e);
! 			}
! 		}
  
! 		if (taskDefinition == null) {
! 			throw new DefinitionNotFoundException(
! 					"Definition not found in DB or Cache:" + id.toString());
! 		}
! 		return taskDefinition;
! 	}
  
! 	/**
! 	 * Checks to see if given definition is in the database
! 	 * 
! 	 * @param definition
! 	 * @return
! 	 * @throws HibernateException
! 	 * @throws PersistenceException
! 	 */
! 	protected boolean checkIfXmlProcessDefinitionInDatabase(
! 			ZebraProcessDefinition definition) throws HibernateException {
  
! 		Query query = this.session
! 				.createQuery("from "
! 						+ ZebraProcessDefinition.class.getName()
! 						+ " cpd where cpd.processVersions.name=:name and cpd.version = :version");
! 		query.setString("name", definition.getName());
! 		query.setLong("version", definition.getVersion().longValue());
  
! 		List q = query.list();
! 		if (q.size() == 1) {
! 			return true;
! 		}
! 		return false;
  
! 	}
  
! 	/**
! 	 * Save an XML process definition
! 	 * 
! 	 * @param processDefinition
! 	 * @throws HibernateException
! 	 * @throws PersistenceException
! 	 */
! 	protected void saveXmlProcessDefinitionInDatabase(
! 			ZebraProcessDefinition processDefinition) throws HibernateException {
  
! 		Transaction t = this.session.beginTransaction();
  
! 		initXmlSet(processDefinition.getRoutingDefinitions());
  
! 		for (Iterator i = processDefinition.getTaskDefinitions().iterator(); i
! 				.hasNext();) {
! 			ZebraTaskDefinition taskDefinition = (ZebraTaskDefinition) i.next();
! 			initXmlId(taskDefinition);
! 			initXmlSet(taskDefinition.getRoutingOut());
! 			initXmlSet(taskDefinition.getRoutingIn());
! 		}
! 		ZebraProcessVersions processVersions = findOrCreateProcessVersion(processDefinition
! 				.getName());
! 		processVersions.addProcessVersion(processDefinition);
! 		this.session.saveOrUpdate(processDefinition);
! 		t.commit();
! 	}
  
! 	/**
! 	 * Finds/Creates a process version
! 	 * 
! 	 * @param name
! 	 * @throws PersistenceException
! 	 * @throws HibernateException
! 	 */
! 	protected ZebraProcessVersions findOrCreateProcessVersion(String name)
! 			throws HibernateException {
  
! 		ZebraProcessVersions processVersions = null;
! 		Query query = this.session.createQuery("from "
! 				+ ZebraProcessVersions.class.getName()
! 				+ " apv where name=:name");
! 		query.setString("name", name);
! 		List q = query.list();
! 		if (q.size() == 1) {
! 			processVersions = (ZebraProcessVersions) q.get(0);
! 		} else if (q.size() == 0) {
! 			processVersions = new ZebraProcessVersions();
! 			processVersions.setName(name);
! 			this.session.save(processVersions);
! 		} else {
! 			// More than 1 process with this name (this is impossible!)
! 			throw new NestableRuntimeException(
! 					"There is more than one process with name:" + name);
! 		}
! 		return processVersions;
! 	}
  
! 	private void initXmlId(IXmlDefinition xmlDefinition) {
! 		xmlDefinition.setXmlId(xmlDefinition.getId());
! 		xmlDefinition.setId(null);
! 	}
  
! 	private void initXmlSet(Set xmlSet) {
! 		for (Iterator j = xmlSet.iterator(); j.hasNext();) {
! 			IXmlDefinition xmlDefinition = (IXmlDefinition) j.next();
! 			initXmlId(xmlDefinition);
! 		}
! 	}
  
! 	/**
! 	 * Fetches the latest version of each process in a map
! 	 * 
! 	 * @return
! 	 * @throws Exception
! 	 */
! 	protected void getDistinctLatestVersions() throws Exception {
  
! 		Query q = this.session.createQuery("from ZebraProcessVersions");
! 		List results = q.list();
! 		for (Iterator i = results.iterator(); i.hasNext();) {
! 			ZebraProcessVersions zebraProcessVersions = (ZebraProcessVersions) i
! 					.next();
! 			ZebraProcessDefinition latestProcessDefinition = (ZebraProcessDefinition) zebraProcessVersions
! 					.getLatestProcessVersion();
! 			this.allProcessDefinitionsByName.put(
! 					zebraProcessVersions.getName(), latestProcessDefinition);
! 			this.allProcessDefinitionsById.put(latestProcessDefinition.getId(),
! 					latestProcessDefinition);
  
! 			// Cache the last version's task defs only
! 			Iterator tasks = latestProcessDefinition.getTaskDefinitions()
! 					.iterator();
! 			while (tasks.hasNext()) {
! 				ZebraTaskDefinition taskDefinition = (ZebraTaskDefinition) tasks
! 						.next();
! 				this.latestTaskDefinitionsById.put(taskDefinition.getId(),
! 						taskDefinition);
! 			}
! 		}
! 	}
  
! 	/* Avalon Methods */
! 	/**
! 	 * Initialize service
! 	 */
! 	public void initializeService() throws Exception {
  
! 		LoadFromFile loadFromFile = new LoadFromFile();
! 		loadFromFile.setProcessDefinitionClass(ZebraProcessDefinition.class);
! 		loadFromFile.setTaskDefinitionClass(ZebraTaskDefinition.class);
! 		loadFromFile.setProcessVersionsClass(ZebraProcessVersions.class);
! 		loadFromFile.setPropertyElementClass(ZebraPropertyElement.class);
! 		loadFromFile.setPropertyGroupsClass(ZebraPropertyGroups.class);
! 		loadFromFile.setRoutingDefinitionClass(ZebraRoutingDefinition.class);
  
! 		loadFromFile.loadProcessDefs(this.processesPath);
  
! 		for (Iterator i = loadFromFile.getAllProcessVersions().iterator(); i
! 				.hasNext();) {
! 			try {
! 				ZebraProcessVersions processVersions = (ZebraProcessVersions) i
! 						.next();
! 				for (Iterator j = processVersions.getProcessVersions()
! 						.iterator(); j.hasNext();) {
! 					ZebraProcessDefinition processDefinition = (ZebraProcessDefinition) j
! 							.next();
! 					if (!checkIfXmlProcessDefinitionInDatabase(processDefinition)) {
! 						saveXmlProcessDefinitionInDatabase(processDefinition);
! 					}
! 				}
! 			} catch (Exception e) {
! 				log.error(e);
! 				throw e;
! 			}
! 		}
! 		// Set up the two maps
! 		getDistinctLatestVersions();
! 	}
  
! 	@SuppressWarnings("unchecked")
! 	public List<Long> getTaskDefinitionIds(String processName, String taskName) {
!     	StringBuffer sql = new StringBuffer();
!     	sql.append("SELECT td.id ");
!     	sql.append("FROM ZebraProcessDefinition pd, processTaskDefinitions ptd, ZebraTaskDefinition td, ZebraProcessVersions pv ");
!     	sql.append("WHERE pd.id=ptd.processDefinitionId ");
!     	sql.append("AND pd.versionId=pv.id ");
!     	sql.append("AND pd.id=ptd.processDefinitionId ");
!     	sql.append("AND ptd.taskDefinitionId=td.id ");
!     	sql.append("AND pv.name=:processName ");
!     	sql.append("AND td.name=:taskName");
!     	
!     	Query q = session.createSQLQuery(sql.toString());
!     	q.setString("processName", processName);
!     	q.setString("taskName", taskName);
!     	
!     	// Query stupidly returns a list of BigIntegers. 
!     	// Need to convert them into Longs. Yawn.
!     	List<BigInteger> results = q.list();
!     	List<Long> properResults = new ArrayList<Long>(results.size());
!     	for (BigInteger i : results) {
!     		properResults.add(i.longValue());
!     	}
!     	
!     	return properResults;
      }
  
! 	public Session getSession() {
! 		return this.session;
! 	}
  
! 	public void setSession(Session session) {
! 		this.session = session;
! 	}
  
! 	public ZebraProcessDefinition getProcessDefinitionById(Long id) {
! 		ZebraProcessDefinition processDef = allProcessDefinitionsById.get(id);
! 		session.lock(processDef, LockMode.NONE);
! 		return processDef;
! 	}
  
! 	public ZebraProcessDefinition getProcessDefinitionByName(String name) {
! 		ZebraProcessDefinition processDef = allProcessDefinitionsByName.get(name);
! 		session.lock(processDef, LockMode.NONE);
! 		return processDef;
! 	}
  
! 	public ZebraTaskDefinition getTaskDefinitionById(Long id) {
! 		ZebraTaskDefinition taskDef = latestTaskDefinitionsById.get(id);
! 		session.lock(taskDef, LockMode.NONE);
! 		return taskDef;
! 	}
  
! 	public String getProcessesPath() {
! 		return this.processesPath;
! 	}
  
! 	public void setProcessesPath(String processesPath) {
! 		this.processesPath = processesPath;
! 	}
  
  }
--- 37,277 ----
   */
  public class ZebraDefinitionFactory {
!     /** logging */
!     private static Log log = LogFactory.getLog(ZebraDefinitionFactory.class);
  
!     /* Variables for configuration */
!     private String processesPath;
  
!     /**
!      * Hibernate Session for loading definitions
!      */
!     private Session session;
  
!     /**
!      * All the process definitions
!      */
!     //private Map<String, ZebraProcessDefinition> allProcessDefinitionsByName = new HashMap<String, ZebraProcessDefinition>();
!     //	private Map<Long, ZebraProcessDefinition> allProcessDefinitionsById = new HashMap<Long, ZebraProcessDefinition>();
!     //private Map<Long, ZebraTaskDefinition> latestTaskDefinitionsById = new HashMap<Long, ZebraTaskDefinition>();
!     /**
!      * Get a task definition
!      */
!     public ZebraTaskDefinition getTaskDefinition(Long id) {
!         ZebraTaskDefinition taskDefinition;
!         taskDefinition = (ZebraTaskDefinition) this.session.get(ZebraTaskDefinition.class, id);
!         return taskDefinition;
!     }
  
!     /**
!      * Checks to see if given definition is in the database
!      * 
!      * @param definition
!      * @return
!      * @throws HibernateException
!      * @throws PersistenceException
!      */
!     protected boolean checkIfXmlProcessDefinitionInDatabase(ZebraProcessDefinition definition)
!             throws HibernateException {
  
!         Query query = this.session.createQuery("from " + ZebraProcessDefinition.class.getName()
!                 + " cpd where cpd.processVersions.name=:name and cpd.version = :version");
!         query.setString("name", definition.getName());
!         query.setLong("version", definition.getVersion().longValue());
  
!         List q = query.list();
!         if (q.size() == 1) {
!             return true;
!         }
!         return false;
  
!     }
  
!     /**
!      * Save an XML process definition
!      * 
!      * @param processDefinition
!      * @throws HibernateException
!      * @throws PersistenceException
!      */
!     protected void saveXmlProcessDefinitionInDatabase(ZebraProcessDefinition processDefinition)
!             throws HibernateException {
  
!         Transaction t = this.session.beginTransaction();
  
!         initXmlSet(processDefinition.getRoutingDefinitions());
  
!         for (Iterator i = processDefinition.getTaskDefinitions().iterator(); i.hasNext();) {
!             ZebraTaskDefinition taskDefinition = (ZebraTaskDefinition) i.next();
!             initXmlId(taskDefinition);
!             initXmlSet(taskDefinition.getRoutingOut());
!             initXmlSet(taskDefinition.getRoutingIn());
!         }
!         ZebraProcessVersions processVersions = findOrCreateProcessVersion(processDefinition.getName());
!         processVersions.addProcessVersion(processDefinition);
!         this.session.saveOrUpdate(processDefinition);
!         t.commit();
!     }
  
!     /**
!      * Finds/Creates a process version
!      * 
!      * @param name
!      * @throws PersistenceException
!      * @throws HibernateException
!      */
!     protected ZebraProcessVersions findOrCreateProcessVersion(String name) throws HibernateException {
  
!         ZebraProcessVersions processVersions = null;
!         Query query = this.session
!                 .createQuery("from " + ZebraProcessVersions.class.getName() + " apv where name=:name");
!         query.setString("name", name);
!         List q = query.list();
!         if (q.size() == 1) {
!             processVersions = (ZebraProcessVersions) q.get(0);
!         } else if (q.size() == 0) {
!             processVersions = new ZebraProcessVersions();
!             processVersions.setName(name);
!             this.session.save(processVersions);
!         } else {
!             // More than 1 process with this name (this is impossible!)
!             throw new NestableRuntimeException("There is more than one process with name:" + name);
!         }
!         return processVersions;
!     }
  
!     private void initXmlId(IXmlDefinition xmlDefinition) {
!         xmlDefinition.setXmlId(xmlDefinition.getId());
!         xmlDefinition.setId(null);
!     }
  
!     private void initXmlSet(Set xmlSet) {
!         for (Iterator j = xmlSet.iterator(); j.hasNext();) {
!             IXmlDefinition xmlDefinition = (IXmlDefinition) j.next();
!             initXmlId(xmlDefinition);
!         }
!     }
  
!     //    /**
!     //     * Fetches the latest version of each process in a map
!     //     * 
!     //     * @return
!     //     * @throws Exception
!     //     */
!     //    protected void getDistinctLatestVersions() throws Exception {
!     //
!     //        Query q = this.session.createQuery("from ZebraProcessVersions");
!     //        List results = q.list();
!     //        for (Iterator i = results.iterator(); i.hasNext();) {
!     //            ZebraProcessVersions zebraProcessVersions = (ZebraProcessVersions) i.next();
!     //            ZebraProcessDefinition latestProcessDefinition = (ZebraProcessDefinition) zebraProcessVersions
!     //                    .getLatestProcessVersion();
!     //            this.allProcessDefinitionsByName.put(zebraProcessVersions.getName(), latestProcessDefinition);
!     //            this.allProcessDefinitionsById.put(latestProcessDefinition.getId(), latestProcessDefinition);
!     //
!     //            // Cache the last version's task defs only
!     //            Iterator tasks = latestProcessDefinition.getTaskDefinitions().iterator();
!     //            while (tasks.hasNext()) {
!     //                ZebraTaskDefinition taskDefinition = (ZebraTaskDefinition) tasks.next();
!     //                this.latestTaskDefinitionsById.put(taskDefinition.getId(), taskDefinition);
!     //            }
!     //        }
!     //    }
  
!     /**
!      * Initialize service
!      */
!     public void initializeService() throws Exception {
  
!         LoadFromFile loadFromFile = new LoadFromFile();
!         loadFromFile.setProcessDefinitionClass(ZebraProcessDefinition.class);
!         loadFromFile.setTaskDefinitionClass(ZebraTaskDefinition.class);
!         loadFromFile.setProcessVersionsClass(ZebraProcessVersions.class);
!         loadFromFile.setPropertyElementClass(ZebraPropertyElement.class);
!         loadFromFile.setPropertyGroupsClass(ZebraPropertyGroups.class);
!         loadFromFile.setRoutingDefinitionClass(ZebraRoutingDefinition.class);
  
!         loadFromFile.loadProcessDefs(this.processesPath);
  
!         for (Iterator i = loadFromFile.getAllProcessVersions().iterator(); i.hasNext();) {
!             try {
!                 ZebraProcessVersions processVersions = (ZebraProcessVersions) i.next();
!                 for (Iterator j = processVersions.getProcessVersions().iterator(); j.hasNext();) {
!                     ZebraProcessDefinition processDefinition = (ZebraProcessDefinition) j.next();
!                     if (!checkIfXmlProcessDefinitionInDatabase(processDefinition)) {
!                         saveXmlProcessDefinitionInDatabase(processDefinition);
!                     }
!                 }
!             } catch (Exception e) {
!                 log.error(e);
!                 throw e;
!             }
!         }
!     }
  
!     @SuppressWarnings("unchecked")
!     public List<Long> getTaskDefinitionIds(String processName, String taskName) {
!         StringBuffer sql = new StringBuffer();
!         sql.append("SELECT td.id ");
!         sql
!                 .append("FROM ZebraProcessDefinition pd, processTaskDefinitions ptd, ZebraTaskDefinition td, ZebraProcessVersions pv ");
!         sql.append("WHERE pd.id=ptd.processDefinitionId ");
!         sql.append("AND pd.versionId=pv.id ");
!         sql.append("AND pd.id=ptd.processDefinitionId ");
!         sql.append("AND ptd.taskDefinitionId=td.id ");
!         sql.append("AND pv.name=:processName ");
!         sql.append("AND td.name=:taskName");
  
!         Query q = session.createSQLQuery(sql.toString());
!         q.setString("processName", processName);
!         q.setString("taskName", taskName);
  
!         // Query stupidly returns a list of BigIntegers. 
!         // Need to convert them into Longs. Yawn.
!         List<BigInteger> results = q.list();
!         List<Long> properResults = new ArrayList<Long>(results.size());
!         for (BigInteger i : results) {
!             properResults.add(i.longValue());
!         }
  
!         return properResults;
      }
  
!     public Session getSession() {
!         return this.session;
!     }
  
!     public void setSession(Session session) {
!         this.session = session;
!     }
  
!     public ZebraProcessDefinition getProcessDefinitionById(Long id) {
!         return (ZebraProcessDefinition) session.load(ZebraProcessDefinition.class, id);
!     }
  
!     public ZebraProcessDefinition getProcessDefinitionByName(String name) {
!         Criteria criteria = session.createCriteria(ZebraProcessVersions.class);
!         criteria.add(Restrictions.eq("name", name));
!         ZebraProcessVersions versions = (ZebraProcessVersions) criteria.uniqueResult();
!         return (ZebraProcessDefinition) versions.getLatestProcessVersion();
!         
!     }
  
!     /**
!      * Use getTaskDefinition instead
!      * @deprecated
!      * @param id
!      * @return
!      */
!     public ZebraTaskDefinition getTaskDefinitionById(Long id) {
!         return this.getTaskDefinition(id);
!     }
  
!     public String getProcessesPath() {
!         return this.processesPath;
!     }
  
!     public void setProcessesPath(String processesPath) {
!         this.processesPath = processesPath;
!     }
  
  }

Index: Zebra.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/Zebra.java,v
retrieving revision 1.8
retrieving revision 1.9
diff -C2 -d -r1.8 -r1.9
*** Zebra.java	9 Mar 2006 10:14:17 -0000	1.8
--- Zebra.java	15 Mar 2006 11:44:41 -0000	1.9
***************
*** 23,27 ****
  import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
- import org.hibernate.LockMode;
  
  import com.anite.zebra.core.Engine;
--- 23,26 ----



From nobody at sheep.berlios.de  Wed Mar 15 19:13:03 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:03 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/resources log4j.properties,1.1,1.2
Message-ID: <200603151813.k2FID3b26787@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources
In directory sheep:/tmp/cvs-serv25789/src/test/resources

Modified Files:
	log4j.properties 
Log Message:
Fixing the loading problems

Index: log4j.properties
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources/log4j.properties,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** log4j.properties	4 Jan 2006 15:55:33 -0000	1.1
--- log4j.properties	15 Mar 2006 17:14:24 -0000	1.2
***************
*** 2,6 ****
  log4j.rootLogger = info, stdout
  
! log4j.org.hibernate = debug, stdout
  
  log4j.appender.stdout=org.apache.log4j.ConsoleAppender
--- 2,7 ----
  log4j.rootLogger = info, stdout
  
! #log4j.logger.hivemind.BuilderFactory = debug, stdout
! log4j.logger.hivemind = debug
  
  log4j.appender.stdout=org.apache.log4j.ConsoleAppender



From nobody at sheep.berlios.de  Wed Mar 15 19:13:03 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:03 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.27,1.28
Message-ID: <200603151813.k2FID3b26784@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv25789

Modified Files:
	pom.xml 
Log Message:
Fixing the loading problems

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.27
retrieving revision 1.28
diff -C2 -d -r1.27 -r1.28
*** pom.xml	14 Mar 2006 08:27:01 -0000	1.27
--- pom.xml	15 Mar 2006 17:14:23 -0000	1.28
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>2.1</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>2.2</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>



From nobody at sheep.berlios.de  Wed Mar 15 19:13:02 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:02 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/api ZebraDefinitionFactory.java,NONE,1.1 StateFactoryEvent.java,NONE,1.1 ZebraStateFactory.java,NONE,1.1 StateFactoryListener.java,NONE,1.1
Message-ID: <200603151813.k2FID2b26772@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/api
In directory sheep:/tmp/cvs-serv25789/src/main/java/com/anite/zebra/hivemind/api

Added Files:
	ZebraDefinitionFactory.java StateFactoryEvent.java 
	ZebraStateFactory.java StateFactoryListener.java 
Log Message:
Fixing the loading problems

--- NEW FILE: ZebraDefinitionFactory.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.api;

import java.util.List;

import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;

public interface ZebraDefinitionFactory {
    public abstract ZebraTaskDefinition getTaskDefinition(Long id);

    public abstract List<Long> getTaskDefinitionIds(String processName, String taskName);

    public abstract ZebraProcessDefinition getProcessDefinitionById(Long id);

    public abstract ZebraProcessDefinition getProcessDefinitionByName(String name);

}

--- NEW FILE: StateFactoryEvent.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.api;

import java.util.EventObject;

import com.anite.zebra.hivemind.om.state.ZebraTaskInstance;

/**
 * Event fired when state factory creates a task instance
 * @author ben.gidley
 *
 */
public class StateFactoryEvent extends EventObject {

    /**
     * 
     */
    private static final long serialVersionUID = -8030993197997220325L;
    private ZebraTaskInstance zebraTaskInstance;
    
    public ZebraTaskInstance getZebraTaskInstance() {
        return zebraTaskInstance;
    }

    public StateFactoryEvent(Object source, ZebraTaskInstance zebraTaskInstance) {
        super(source);
        this.zebraTaskInstance = zebraTaskInstance;
    }

}

--- NEW FILE: ZebraStateFactory.java ---
package com.anite.zebra.hivemind.api;

import com.anite.zebra.core.factory.api.IStateFactory;

public interface ZebraStateFactory extends IStateFactory {
    /**
     * Event listener for events (e.g. taskInstanceCreated)
     * @param listener
     */
    public abstract void addStateFactoryListener(StateFactoryListener listener);

    public abstract void removeStateFactoryListener(StateFactoryListener listener);

}
--- NEW FILE: StateFactoryListener.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.api;

import java.util.EventListener;

/**
 * The interface to listen to the statefactory
 * @author ben.gidley
 *
 */
public interface StateFactoryListener extends EventListener {

        public void createTaskInstance(StateFactoryEvent stateFactoryEvent);
}



From nobody at sheep.berlios.de  Wed Mar 15 19:13:03 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:03 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl StateFactoryListenerService.java,NONE,1.1 ZebraDefinitionsFactoryTest.java,1.6,1.7 LockMangerTest.java,1.4,1.5 ZebraDefinitionsFactoryCleanUpTest.java,1.1,1.2 EngineTest.java,1.1,1.2 ZebraStateFactoryTest.java,1.5,1.6
Message-ID: <200603151813.k2FID3b26780@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv25789/src/test/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraDefinitionsFactoryTest.java LockMangerTest.java 
	ZebraDefinitionsFactoryCleanUpTest.java EngineTest.java 
	ZebraStateFactoryTest.java 
Added Files:
	StateFactoryListenerService.java 
Log Message:
Fixing the loading problems

--- NEW FILE: StateFactoryListenerService.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.impl;

import com.anite.zebra.hivemind.api.StateFactoryEvent;
import com.anite.zebra.hivemind.api.StateFactoryListener;

public class StateFactoryListenerService implements StateFactoryListener {

    public static int count = 0;


    public void createTaskInstance(StateFactoryEvent stateFactoryEvent) {
        StateFactoryListenerService.count++;
    }

}

Index: ZebraDefinitionsFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraDefinitionsFactoryTest.java,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** ZebraDefinitionsFactoryTest.java	9 Mar 2006 10:14:17 -0000	1.6
--- ZebraDefinitionsFactoryTest.java	15 Mar 2006 17:14:23 -0000	1.7
***************
*** 30,33 ****
--- 30,34 ----
  import com.anite.zebra.ext.definitions.impl.RoutingDefinition;
  import com.anite.zebra.ext.definitions.impl.TaskDefinition;
+ import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
  

Index: LockMangerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/LockMangerTest.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** LockMangerTest.java	9 Mar 2006 10:14:17 -0000	1.4
--- LockMangerTest.java	15 Mar 2006 17:14:23 -0000	1.5
***************
*** 32,35 ****
--- 32,36 ----
  import com.anite.zebra.core.state.api.IProcessInstance;
  import com.anite.zebra.core.state.api.ITransaction;
+ import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
  

Index: ZebraDefinitionsFactoryCleanUpTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraDefinitionsFactoryCleanUpTest.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** ZebraDefinitionsFactoryCleanUpTest.java	15 Mar 2006 11:44:39 -0000	1.1
--- ZebraDefinitionsFactoryCleanUpTest.java	15 Mar 2006 17:14:23 -0000	1.2
***************
*** 31,34 ****
--- 31,35 ----
  import com.anite.zebra.ext.definitions.impl.RoutingDefinition;
  import com.anite.zebra.ext.definitions.impl.TaskDefinition;
+ import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
  

Index: EngineTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/EngineTest.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** EngineTest.java	1 Dec 2005 13:07:58 -0000	1.1
--- EngineTest.java	15 Mar 2006 17:14:23 -0000	1.2
***************
*** 17,20 ****
--- 17,22 ----
  package com.anite.zebra.hivemind.impl;
  
+ import junit.framework.TestCase;
+ 
  import org.apache.fulcrum.hivemind.RegistryManager;
  import org.apache.hivemind.Resource;
***************
*** 23,28 ****
  
  import com.anite.zebra.core.api.IEngine;
- 
- import junit.framework.TestCase;
  
  public class EngineTest extends TestCase {
--- 25,28 ----

Index: ZebraStateFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraStateFactoryTest.java,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** ZebraStateFactoryTest.java	9 Mar 2006 10:14:17 -0000	1.5
--- ZebraStateFactoryTest.java	15 Mar 2006 17:14:23 -0000	1.6
***************
*** 35,38 ****
--- 35,40 ----
  import com.anite.zebra.core.state.api.ITaskInstance;
  import com.anite.zebra.core.state.api.ITransaction;
+ import com.anite.zebra.hivemind.api.StateFactoryListener;
+ import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
  import com.anite.zebra.hivemind.om.state.ZebraProcessInstance;
***************
*** 44,48 ****
   */
  public class ZebraStateFactoryTest extends TestCase {
! 	private static final String SIMPLEWORKFLOW = "SimpleWorkflow";
  
      private IStateFactory stateFactory;
--- 46,50 ----
   */
  public class ZebraStateFactoryTest extends TestCase {
!     private static final String SIMPLEWORKFLOW = "SimpleWorkflow";
  
      private IStateFactory stateFactory;
***************
*** 60,63 ****
--- 62,66 ----
          this.definitionsFactory = (ZebraDefinitionFactory) RegistryManager.getInstance().getRegistry().getService(
                  "zebra.zebraDefinitionFactory", ZebraDefinitionFactory.class);
+ 
      }
  
***************
*** 75,79 ****
  
          ITransaction t = this.stateFactory.beginTransaction();
!         ZebraProcessInstance processInstance = (ZebraProcessInstance) this.stateFactory.createProcessInstance(processDefinition);
          ZebraPropertySetEntry propSet = new ZebraPropertySetEntry();
          propSet.setValue("temp");
--- 78,83 ----
  
          ITransaction t = this.stateFactory.beginTransaction();
!         ZebraProcessInstance processInstance = (ZebraProcessInstance) this.stateFactory
!                 .createProcessInstance(processDefinition);
          ZebraPropertySetEntry propSet = new ZebraPropertySetEntry();
          propSet.setValue("temp");
***************
*** 86,94 ****
          IFOE foe = this.stateFactory.createFOE(processInstance);
          t = this.stateFactory.beginTransaction();
!         ZebraTaskInstance taskInstance = (ZebraTaskInstance) this.stateFactory.createTaskInstance(taskDefinition, processInstance, foe);
          ZebraPropertySetEntry propSet2 = new ZebraPropertySetEntry();
          propSet2.setValue("temp");
          processInstance.getPropertySet().put("One", propSet2);
!         
          this.stateFactory.saveObject(processInstance);
          this.stateFactory.saveObject(taskInstance);
--- 90,99 ----
          IFOE foe = this.stateFactory.createFOE(processInstance);
          t = this.stateFactory.beginTransaction();
!         ZebraTaskInstance taskInstance = (ZebraTaskInstance) this.stateFactory.createTaskInstance(taskDefinition,
!                 processInstance, foe);
          ZebraPropertySetEntry propSet2 = new ZebraPropertySetEntry();
          propSet2.setValue("temp");
          processInstance.getPropertySet().put("One", propSet2);
! 
          this.stateFactory.saveObject(processInstance);
          this.stateFactory.saveObject(taskInstance);
***************
*** 160,168 ****
  
          assertTrue(taskInstance.getTaskInstanceId().longValue() > 0);
!         
          t = this.stateFactory.beginTransaction();
          this.stateFactory.deleteObject(taskInstance);
          t.commit();
  
          
      }
--- 165,197 ----
  
          assertTrue(taskInstance.getTaskInstanceId().longValue() > 0);
! 
          t = this.stateFactory.beginTransaction();
          this.stateFactory.deleteObject(taskInstance);
          t.commit();
  
+     }
+ 
+     public void testEventFiring() throws Exception {
+         
+         StateFactoryListener stateFactoryListener = (StateFactoryListener) RegistryManager.getInstance().getRegistry().getService(StateFactoryListener.class);
+         stateFactoryListener.createTaskInstance(null);
+         
+         int count = StateFactoryListenerService.count;
+         
+         IProcessDefinition processDefinition = getProcessDefinition();
+ 
+         IProcessInstance processInstance = this.stateFactory.createProcessInstance(processDefinition);
+ 
+         ITransaction t = this.stateFactory.beginTransaction();
+         this.stateFactory.saveObject(processInstance);
+         t.commit();
+ 
+         ITaskDefinition taskDefinition = processDefinition.getFirstTask();
+ 
+         IFOE foe = this.stateFactory.createFOE(processInstance);
+         ITaskInstance taskInstance = this.stateFactory.createTaskInstance(taskDefinition, processInstance, foe);
+         assertNotNull(taskInstance);
+         
+         assertEquals(count +1, StateFactoryListenerService.count);
          
      }



From nobody at sheep.berlios.de  Wed Mar 15 19:13:03 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:03 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/resources/META-INF hivemodule_zebradefinitions.xml,1.2,1.3
Message-ID: <200603151813.k2FID3b26792@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources/META-INF
In directory sheep:/tmp/cvs-serv25789/src/test/resources/META-INF

Modified Files:
	hivemodule_zebradefinitions.xml 
Log Message:
Fixing the loading problems

Index: hivemodule_zebradefinitions.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources/META-INF/hivemodule_zebradefinitions.xml,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** hivemodule_zebradefinitions.xml	13 Dec 2005 07:57:17 -0000	1.2
--- hivemodule_zebradefinitions.xml	15 Mar 2006 17:14:24 -0000	1.3
***************
*** 1,5 ****
  <?xml version="1.0" encoding="UTF-8"?>
  <module id="zebra.test" version="1.0.0">
-     
      <implementation service-id="fulcrum.hibernate.HibernateSessionFactory">
          <invoke-factory model="singleton">
--- 1,4 ----
***************
*** 12,16 ****
      <implementation service-id="zebra.zebraDefinitionFactory">
          <invoke-factory>
!             <construct class="com.anite.zebra.hivemind.impl.ZebraDefinitionFactory">
                  <set property="processesPath" value="src/test/resources/processes"/>
                  <set-service property="session" service-id="fulcrum.hibernate.Session"/>
--- 11,15 ----
      <implementation service-id="zebra.zebraDefinitionFactory">
          <invoke-factory>
!             <construct class="com.anite.zebra.hivemind.impl.ZebraDefinitionFactoryImpl">
                  <set property="processesPath" value="src/test/resources/processes"/>
                  <set-service property="session" service-id="fulcrum.hibernate.Session"/>
***************
*** 23,25 ****
--- 22,35 ----
          </invoke-factory>
      </service-point>
+     <service-point id="stateFactoryListener"
+         interface="com.anite.zebra.hivemind.api.StateFactoryListener">
+         <invoke-factory>
+             <construct class="com.anite.zebra.hivemind.impl.StateFactoryListenerService">
+                 <event-listener service-id="zebra.zebraState"/>
+             </construct>
+         </invoke-factory>
+     </service-point>
+     <contribution configuration-id="hivemind.EagerLoad">
+         <load service-id="zebra.test.stateFactoryListener"/>
+     </contribution>
  </module>



From nobody at sheep.berlios.de  Wed Mar 15 19:13:04 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:04 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/resources/META-INF hivemodule.xml,1.6,1.7
Message-ID: <200603151813.k2FID4b26800@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/resources/META-INF
In directory sheep:/tmp/cvs-serv25789/src/main/resources/META-INF

Modified Files:
	hivemodule.xml 
Log Message:
Fixing the loading problems

Index: hivemodule.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/resources/META-INF/hivemodule.xml,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** hivemodule.xml	4 Jan 2006 15:55:34 -0000	1.6
--- hivemodule.xml	15 Mar 2006 17:14:24 -0000	1.7
***************
*** 7,13 ****
      </service-point>
      <service-point id="zebraDefinitionFactory"
!         interface="com.anite.zebra.hivemind.impl.ZebraDefinitionFactory">
          <invoke-factory>
!             <construct class="com.anite.zebra.hivemind.impl.ZebraDefinitionFactory">
                  <set property="processesPath" value="./WEB-INF/processes"/>
                  <set-service property="session" service-id="fulcrum.hibernate.Session"/>
--- 7,13 ----
      </service-point>
      <service-point id="zebraDefinitionFactory"
!         interface="com.anite.zebra.hivemind.api.ZebraDefinitionFactory">
          <invoke-factory>
!             <construct class="com.anite.zebra.hivemind.impl.ZebraDefinitionFactoryImpl">
                  <set property="processesPath" value="./WEB-INF/processes"/>
                  <set-service property="session" service-id="fulcrum.hibernate.Session"/>
***************
*** 35,46 ****
          </invoke-factory>
      </service-point>
!     <service-point id="zebraState" interface="com.anite.zebra.core.factory.api.IStateFactory">
          <invoke-factory>
!             <construct class="com.anite.zebra.hivemind.impl.ZebraStateFactory"> </construct>
          </invoke-factory>
      </service-point>
      <service-point id="engine" interface="com.anite.zebra.core.api.IEngine">
          <invoke-factory>
!             <construct class="com.anite.zebra.core.Engine"></construct>
          </invoke-factory>
      </service-point>
--- 35,48 ----
          </invoke-factory>
      </service-point>
!     <service-point id="zebraState" interface="com.anite.zebra.hivemind.api.ZebraStateFactory">
          <invoke-factory>
!             <construct class="com.anite.zebra.hivemind.impl.ZebraStateFactoryImpl"> </construct>
          </invoke-factory>
      </service-point>
      <service-point id="engine" interface="com.anite.zebra.core.api.IEngine">
          <invoke-factory>
!             <construct class="com.anite.zebra.core.Engine">
!                 <service>zebraState</service>
!             </construct>
          </invoke-factory>
      </service-point>



From nobody at sheep.berlios.de  Wed Mar 15 19:13:04 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:04 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/META-INF MANIFEST.MF,1.1,NONE
Message-ID: <200603151813.k2FID4b26796@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/META-INF
In directory sheep:/tmp/cvs-serv25789/src/test/java/META-INF

Removed Files:
	MANIFEST.MF 
Log Message:
Fixing the loading problems

--- MANIFEST.MF DELETED ---



From nobody at sheep.berlios.de  Wed Mar 15 19:13:02 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:02 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl ZebraStateFactoryImpl.java,NONE,1.1 ZebraDefinitionFactoryImpl.java,NONE,1.1 PriorityManager.java,1.1,1.2 Zebra.java,1.9,1.10 ZebraDefinitionFactory.java,1.4,NONE ZebraStateFactory.java,1.3,NONE
Message-ID: <200603151813.k2FID2b26776@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv25789/src/main/java/com/anite/zebra/hivemind/impl

Modified Files:
	PriorityManager.java Zebra.java 
Added Files:
	ZebraStateFactoryImpl.java ZebraDefinitionFactoryImpl.java 
Removed Files:
	ZebraDefinitionFactory.java ZebraStateFactory.java 
Log Message:
Fixing the loading problems

--- NEW FILE: ZebraStateFactoryImpl.java ---
/*
 * Copyright 2004, 2005 Anite - Central Government Division
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.anite.zebra.hivemind.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.hibernate.Session;

import com.anite.zebra.core.api.IEngine;
import com.anite.zebra.core.definitions.api.IProcessDefinition;
import com.anite.zebra.core.definitions.api.ITaskDefinition;
import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
import com.anite.zebra.core.exceptions.LockException;
import com.anite.zebra.core.factory.api.IStateFactory;
import com.anite.zebra.core.factory.exceptions.CreateObjectException;
import com.anite.zebra.core.factory.exceptions.StateFailureException;
import com.anite.zebra.core.state.api.IFOE;
import com.anite.zebra.core.state.api.IProcessInstance;
import com.anite.zebra.core.state.api.IStateObject;
import com.anite.zebra.core.state.api.ITaskInstance;
import com.anite.zebra.core.state.api.ITransaction;
import com.anite.zebra.hivemind.api.LockManager;
import com.anite.zebra.hivemind.api.StateFactoryEvent;
import com.anite.zebra.hivemind.api.StateFactoryListener;
import com.anite.zebra.hivemind.api.ZebraStateFactory;
import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;
import com.anite.zebra.hivemind.om.state.ZebraFOE;
import com.anite.zebra.hivemind.om.state.ZebraProcessInstance;
import com.anite.zebra.hivemind.om.state.ZebraTaskInstance;
import com.anite.zebra.hivemind.om.state.ZebraTaskInstanceHistory;
import com.anite.zebra.hivemind.util.RegistryHelper;

/**
 * Provides the state layer for the workflow engine
 * 
 * This does NOT inherit off the one in zebra-state as the one in state uses
 * Hibernate 2.1
 * 
 * @author Matthew.Norris
 * @author eric.pugh
 * @author Ben Gidley
 */
public class ZebraStateFactoryImpl implements IStateFactory, ZebraStateFactory {

    private List<StateFactoryListener> listeners = new ArrayList<StateFactoryListener>();
    
	/**
	 * This should be manually injected by hivemind
	 */
	private LockManager lockManager;

	/**
	 * This should be automatically injected by hivemind
	 */
	private PriorityManager priorityManager;

	private Log log;

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#createFOE(com.anite.zebra.core.state.api.IProcessInstance)
     */
	public IFOE createFOE(IProcessInstance processInstance)
			throws CreateObjectException {
		return new ZebraFOE(processInstance);
	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#deleteObject(com.anite.zebra.core.state.api.IStateObject)
     */
	public void deleteObject(IStateObject stateObject)
			throws StateFailureException {

		Session s;
		try {
			s = RegistryHelper.getInstance().getSession();

			if (stateObject instanceof ZebraTaskInstance) {

				ZebraTaskInstance antelopeTaskInstance = (ZebraTaskInstance) stateObject;

				if (this.log.isInfoEnabled()) {
					produceDetailedDeleteLog(antelopeTaskInstance);
				}
				// Copy to history
				ZebraTaskInstanceHistory antelopeTaskInstanceHistory = new ZebraTaskInstanceHistory(
						antelopeTaskInstance);
				ZebraTaskDefinition taskDefinition = (ZebraTaskDefinition) antelopeTaskInstance
						.getTaskDefinition();
				antelopeTaskInstanceHistory.setShowInHistory(new Boolean(
						taskDefinition.getShowInHistory()));
				s.save(antelopeTaskInstanceHistory);

				// Tidy up process reference
				ZebraProcessInstance processInstance = (ZebraProcessInstance) antelopeTaskInstance
						.getProcessInstance();
				processInstance.getTaskInstances().remove(antelopeTaskInstance);
				antelopeTaskInstance.setProcessInstance(null);

				// Add history to processInstance
				processInstance.getHistoryInstances().add(
						antelopeTaskInstanceHistory);
				antelopeTaskInstanceHistory.setProcessInstance(processInstance);

                s.save(processInstance);
                
			}
			s.delete(stateObject);
		} catch (Exception e) {
			this.log.error("Failed to delete:" + stateObject.toString(), e);
			throw new StateFailureException("Failed to delete State Object", e);
		}

	}

	/**
	 * Helper to log a very detailed delete log for when things are acting oddly
	 * 
	 * @param antelopeTaskInstance
	 * @throws DefinitionNotFoundException
	 */
	private void produceDetailedDeleteLog(ZebraTaskInstance antelopeTaskInstance)
			throws DefinitionNotFoundException {
		ZebraTaskDefinition taskDef = (ZebraTaskDefinition) antelopeTaskInstance
				.getTaskDefinition();
		ZebraProcessInstance cpi = (ZebraProcessInstance) antelopeTaskInstance
				.getProcessInstance();
		ZebraProcessDefinition antelopeProcessDefinition = (ZebraProcessDefinition) cpi
				.getProcessDef();
		this.log
				.info("Creating history entry for task id "
						+ antelopeTaskInstance.getTaskInstanceId() + " def "
						+ antelopeProcessDefinition.getName() + "."
						+ taskDef.getName());
	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#createProcessInstance(com.anite.zebra.core.definitions.api.IProcessDefinition)
     */
	public IProcessInstance createProcessInstance(
			IProcessDefinition processDefinition) throws CreateObjectException {

		ZebraProcessInstance processInstance = new ZebraProcessInstance();
		processInstance
				.setProcessName(((ZebraProcessDefinition) processDefinition)
						.getName());
		processInstance
				.setProcessDefinitionId(((ZebraProcessDefinition) processDefinition)
						.getId());

		return processInstance;
	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#createTaskInstance(com.anite.zebra.core.definitions.api.ITaskDefinition, com.anite.zebra.core.state.api.IProcessInstance, com.anite.zebra.core.state.api.IFOE)
     */
	public ITaskInstance createTaskInstance(ITaskDefinition taskDefinition,
			IProcessInstance processInstance, IFOE flowOfExecution)
			throws CreateObjectException {

		ZebraTaskInstance antelopeTaskInstance = new ZebraTaskInstance();
		ZebraProcessInstance antelopeProcessInstance = (ZebraProcessInstance) processInstance;
		ZebraTaskDefinition antelopeTaskDefinition = (ZebraTaskDefinition) taskDefinition;

		antelopeTaskInstance.setFOE(flowOfExecution);
		antelopeTaskInstance.setProcessInstance(antelopeProcessInstance);
		antelopeTaskInstance.setTaskDefinition(antelopeTaskDefinition);

		// Default values
		antelopeTaskInstance.setDateCreated(new Date());

		antelopeTaskInstance.setPriority(this.priorityManager
				.getDefaultPriority());
		antelopeTaskInstance.setCaption(antelopeTaskDefinition.getName());
		antelopeTaskInstance.setShowInTaskList(antelopeTaskDefinition
				.getShowInTaskList());
		antelopeProcessInstance.getTaskInstances().add(antelopeTaskInstance);

        // Fire event listeners
        StateFactoryEvent stateFactoryEvent = new StateFactoryEvent(this, antelopeTaskInstance);
        for (StateFactoryListener stateFactoryListener : listeners){
            stateFactoryListener.createTaskInstance(stateFactoryEvent);
        }
        
		return antelopeTaskInstance;
	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#beginTransaction()
     */
	public ITransaction beginTransaction() throws StateFailureException {

		return new HibernateTransaction(RegistryHelper.getInstance()
				.getSession());

	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#saveObject(com.anite.zebra.core.state.api.IStateObject)
     */
	public void saveObject(IStateObject object) throws StateFailureException {
		RegistryHelper.getInstance().getSession().saveOrUpdate(object);

	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#acquireLock(com.anite.zebra.core.state.api.IProcessInstance, com.anite.zebra.core.api.IEngine)
     */
	public void acquireLock(IProcessInstance processInstance, IEngine engine)
			throws LockException {

		this.lockManager.aquireLock(processInstance, RegistryHelper
				.getInstance().getSession());

	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#releaseLock(com.anite.zebra.core.state.api.IProcessInstance, com.anite.zebra.core.api.IEngine)
     */
	public void releaseLock(IProcessInstance processInstance, IEngine engine)
			throws LockException {

		this.lockManager.releaseLock(processInstance, RegistryHelper
				.getInstance().getSession());
	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#getLockManager()
     */
	public LockManager getLockManager() {
		return this.lockManager;
	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#setLockManager(com.anite.zebra.hivemind.api.LockManager)
     */
	public void setLockManager(LockManager lockManager) {
		this.lockManager = lockManager;
	}

	public Log getLog() {
		return this.log;
	}

	public void setLog(Log log) {
		this.log = log;
	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#getPriorityManager()
     */
	public PriorityManager getPriorityManager() {
		return this.priorityManager;
	}

	/* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#setPriorityManager(com.anite.zebra.hivemind.impl.PriorityManager)
     */
	public void setPriorityManager(PriorityManager priorityManager) {
		this.priorityManager = priorityManager;
	}
    
    /* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#addStateFactoryListener(com.anite.zebra.hivemind.api.StateFactoryListener)
     */
    public void addStateFactoryListener(StateFactoryListener listener){
        listeners.add(listener);
    }
    
    /* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraStateFactory#removeStateFactoryListener(com.anite.zebra.hivemind.api.StateFactoryListener)
     */
    public void removeStateFactoryListener(StateFactoryListener listener){
        listeners.remove(listener);
    }

}
--- NEW FILE: ZebraDefinitionFactoryImpl.java ---
package com.anite.zebra.hivemind.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.persistence.PersistenceException;

import org.apache.commons.lang.exception.NestableRuntimeException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import com.anite.zebra.ext.xmlloader.LoadFromFile;
import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
import com.anite.zebra.hivemind.om.defs.IXmlDefinition;
import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
import com.anite.zebra.hivemind.om.defs.ZebraProcessVersions;
import com.anite.zebra.hivemind.om.defs.ZebraPropertyElement;
import com.anite.zebra.hivemind.om.defs.ZebraPropertyGroups;
import com.anite.zebra.hivemind.om.defs.ZebraRoutingDefinition;
import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;

/**
 * This is the definitions factory service.
 * 
 * This is a Singleton Hivemind Service.
 * 
 * @author ben.gidley
 * 
 */
public class ZebraDefinitionFactoryImpl implements ZebraDefinitionFactory {
    /** logging */
    private static Log log = LogFactory.getLog(ZebraDefinitionFactoryImpl.class);

    /* Variables for configuration */
    private String processesPath;

    /**
     * Hibernate Session for loading definitions
     */
    private Session session;

    /**
     * All the process definitions
     */
    //private Map<String, ZebraProcessDefinition> allProcessDefinitionsByName = new HashMap<String, ZebraProcessDefinition>();
    //	private Map<Long, ZebraProcessDefinition> allProcessDefinitionsById = new HashMap<Long, ZebraProcessDefinition>();
    //private Map<Long, ZebraTaskDefinition> latestTaskDefinitionsById = new HashMap<Long, ZebraTaskDefinition>();
    /* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraDefinitionFactory#getTaskDefinition(java.lang.Long)
     */
    public ZebraTaskDefinition getTaskDefinition(Long id) {
        ZebraTaskDefinition taskDefinition;
        taskDefinition = (ZebraTaskDefinition) this.session.get(ZebraTaskDefinition.class, id);
        return taskDefinition;
    }

    /**
     * Checks to see if given definition is in the database
     * 
     * @param definition
     * @return
     * @throws HibernateException
     * @throws PersistenceException
     */
    protected boolean checkIfXmlProcessDefinitionInDatabase(ZebraProcessDefinition definition)
            throws HibernateException {

        Query query = this.session.createQuery("from " + ZebraProcessDefinition.class.getName()
                + " cpd where cpd.processVersions.name=:name and cpd.version = :version");
        query.setString("name", definition.getName());
        query.setLong("version", definition.getVersion().longValue());

        List q = query.list();
        if (q.size() == 1) {
            return true;
        }
        return false;

    }

    /**
     * Save an XML process definition
     * 
     * @param processDefinition
     * @throws HibernateException
     * @throws PersistenceException
     */
    protected void saveXmlProcessDefinitionInDatabase(ZebraProcessDefinition processDefinition)
            throws HibernateException {

        Transaction t = this.session.beginTransaction();

        initXmlSet(processDefinition.getRoutingDefinitions());

        for (Iterator i = processDefinition.getTaskDefinitions().iterator(); i.hasNext();) {
            ZebraTaskDefinition taskDefinition = (ZebraTaskDefinition) i.next();
            initXmlId(taskDefinition);
            initXmlSet(taskDefinition.getRoutingOut());
            initXmlSet(taskDefinition.getRoutingIn());
        }
        ZebraProcessVersions processVersions = findOrCreateProcessVersion(processDefinition.getName());
        processVersions.addProcessVersion(processDefinition);
        this.session.saveOrUpdate(processDefinition);
        t.commit();
    }

    /**
     * Finds/Creates a process version
     * 
     * @param name
     * @throws PersistenceException
     * @throws HibernateException
     */
    protected ZebraProcessVersions findOrCreateProcessVersion(String name) throws HibernateException {

        ZebraProcessVersions processVersions = null;
        Query query = this.session
                .createQuery("from " + ZebraProcessVersions.class.getName() + " apv where name=:name");
        query.setString("name", name);
        List q = query.list();
        if (q.size() == 1) {
            processVersions = (ZebraProcessVersions) q.get(0);
        } else if (q.size() == 0) {
            processVersions = new ZebraProcessVersions();
            processVersions.setName(name);
            this.session.save(processVersions);
        } else {
            // More than 1 process with this name (this is impossible!)
            throw new NestableRuntimeException("There is more than one process with name:" + name);
        }
        return processVersions;
    }

    private void initXmlId(IXmlDefinition xmlDefinition) {
        xmlDefinition.setXmlId(xmlDefinition.getId());
        xmlDefinition.setId(null);
    }

    private void initXmlSet(Set xmlSet) {
        for (Iterator j = xmlSet.iterator(); j.hasNext();) {
            IXmlDefinition xmlDefinition = (IXmlDefinition) j.next();
            initXmlId(xmlDefinition);
        }
    }

    //    /**
    //     * Fetches the latest version of each process in a map
    //     * 
    //     * @return
    //     * @throws Exception
    //     */
    //    protected void getDistinctLatestVersions() throws Exception {
    //
    //        Query q = this.session.createQuery("from ZebraProcessVersions");
    //        List results = q.list();
    //        for (Iterator i = results.iterator(); i.hasNext();) {
    //            ZebraProcessVersions zebraProcessVersions = (ZebraProcessVersions) i.next();
    //            ZebraProcessDefinition latestProcessDefinition = (ZebraProcessDefinition) zebraProcessVersions
    //                    .getLatestProcessVersion();
    //            this.allProcessDefinitionsByName.put(zebraProcessVersions.getName(), latestProcessDefinition);
    //            this.allProcessDefinitionsById.put(latestProcessDefinition.getId(), latestProcessDefinition);
    //
    //            // Cache the last version's task defs only
    //            Iterator tasks = latestProcessDefinition.getTaskDefinitions().iterator();
    //            while (tasks.hasNext()) {
    //                ZebraTaskDefinition taskDefinition = (ZebraTaskDefinition) tasks.next();
    //                this.latestTaskDefinitionsById.put(taskDefinition.getId(), taskDefinition);
    //            }
    //        }
    //    }

    /**
     * Initialize service
     */
    public void initializeService() throws Exception {

        LoadFromFile loadFromFile = new LoadFromFile();
        loadFromFile.setProcessDefinitionClass(ZebraProcessDefinition.class);
        loadFromFile.setTaskDefinitionClass(ZebraTaskDefinition.class);
        loadFromFile.setProcessVersionsClass(ZebraProcessVersions.class);
        loadFromFile.setPropertyElementClass(ZebraPropertyElement.class);
        loadFromFile.setPropertyGroupsClass(ZebraPropertyGroups.class);
        loadFromFile.setRoutingDefinitionClass(ZebraRoutingDefinition.class);

        loadFromFile.loadProcessDefs(this.processesPath);

        for (Iterator i = loadFromFile.getAllProcessVersions().iterator(); i.hasNext();) {
            try {
                ZebraProcessVersions processVersions = (ZebraProcessVersions) i.next();
                for (Iterator j = processVersions.getProcessVersions().iterator(); j.hasNext();) {
                    ZebraProcessDefinition processDefinition = (ZebraProcessDefinition) j.next();
                    if (!checkIfXmlProcessDefinitionInDatabase(processDefinition)) {
                        saveXmlProcessDefinitionInDatabase(processDefinition);
                    }
                }
            } catch (Exception e) {
                log.error(e);
                throw e;
            }
        }
    }

    /* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraDefinitionFactory#getTaskDefinitionIds(java.lang.String, java.lang.String)
     */
    @SuppressWarnings("unchecked")
    public List<Long> getTaskDefinitionIds(String processName, String taskName) {
        StringBuffer sql = new StringBuffer();
        sql.append("SELECT td.id ");
        sql
                .append("FROM ZebraProcessDefinition pd, processTaskDefinitions ptd, ZebraTaskDefinition td, ZebraProcessVersions pv ");
        sql.append("WHERE pd.id=ptd.processDefinitionId ");
        sql.append("AND pd.versionId=pv.id ");
        sql.append("AND pd.id=ptd.processDefinitionId ");
        sql.append("AND ptd.taskDefinitionId=td.id ");
        sql.append("AND pv.name=:processName ");
        sql.append("AND td.name=:taskName");

        Query q = session.createSQLQuery(sql.toString());
        q.setString("processName", processName);
        q.setString("taskName", taskName);

        // Query stupidly returns a list of BigIntegers. 
        // Need to convert them into Longs. Yawn.
        List<BigInteger> results = q.list();
        List<Long> properResults = new ArrayList<Long>(results.size());
        for (BigInteger i : results) {
            properResults.add(i.longValue());
        }

        return properResults;
    }

    public Session getSession() {
        return this.session;
    }

    public void setSession(Session session) {
        this.session = session;
    }

    /* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraDefinitionFactory#getProcessDefinitionById(java.lang.Long)
     */
    public ZebraProcessDefinition getProcessDefinitionById(Long id) {
        return (ZebraProcessDefinition) session.load(ZebraProcessDefinition.class, id);
    }

    /* (non-Javadoc)
     * @see com.anite.zebra.hivemind.impl.ZebraDefinitionFactory#getProcessDefinitionByName(java.lang.String)
     */
    public ZebraProcessDefinition getProcessDefinitionByName(String name) {
        Criteria criteria = session.createCriteria(ZebraProcessVersions.class);
        criteria.add(Restrictions.eq("name", name));
        ZebraProcessVersions versions = (ZebraProcessVersions) criteria.uniqueResult();
        return (ZebraProcessDefinition) versions.getLatestProcessVersion();
        
    }

    /**
     * Use getTaskDefinition instead
     * @deprecated
     * @param id
     * @return
     */
    public ZebraTaskDefinition getTaskDefinitionById(Long id) {
        return this.getTaskDefinition(id);
    }

    public String getProcessesPath() {
        return this.processesPath;
    }

    public void setProcessesPath(String processesPath) {
        this.processesPath = processesPath;
    }

}

Index: PriorityManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/PriorityManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** PriorityManager.java	26 Nov 2005 12:51:12 -0000	1.1
--- PriorityManager.java	15 Mar 2006 17:14:23 -0000	1.2
***************
*** 41,90 ****
  
  	private Long defaultPriorityId;
  
! 	/**
! 	 * prevents instantiation
! 	 */
! 	public PriorityManager() {
! 		// prevent creation
! 		Session session = RegistryHelper.getInstance().getSession();
! 		Query query = session.createQuery("from " + Priority.class.getName()
! 				+ " where caption=:caption");
  
! 		// Find each value in the list
! 		query.setString("caption", LOW);
! 		List lowList = query.list();
! 		if (lowList.size() != 1) {
! 			Priority low = new Priority();
! 			low.setCaption(LOW);
! 			Transaction t = session.beginTransaction();
! 			session.save(low);
! 			t.commit();
! 		}
  
! 		query.setString("caption", NORMAL);
! 		List normalList = query.list();
! 		if (normalList.size() != 1) {
! 			Priority normal = new Priority();
! 			normal.setCaption(NORMAL);
! 			Transaction t = session.beginTransaction();
! 			session.save(normal);
! 			t.commit();
! 			this.defaultPriorityId = normal.getPriorityId();
! 		} else {
! 			Priority normal = (Priority) normalList.get(0);
! 			this.defaultPriorityId = normal.getPriorityId();
! 		}
! 			
  
! 		query.setString("caption", URGENT);
! 		List urgentList = query.list();
! 		if (urgentList.size() != 1) {
! 			Priority urgent = new Priority();
! 			urgent.setCaption(URGENT);
! 			Transaction t = session.beginTransaction();
! 			session.save(urgent);
! 			t.commit();
! 		}
! 	}
  
  	/**
--- 41,96 ----
  
  	private Long defaultPriorityId;
+     
+     private Session session;
  
!     
!     public Session getSession() {
!         return session;
!     }
  
!     public void setSession(Session session) {
!         this.session = session;
!     }
  
!     public void initializeService(){
!         Query query = session.createQuery("from " + Priority.class.getName()
!                 + " where caption=:caption");
  
!         // Find each value in the list
!         query.setString("caption", LOW);
!         List lowList = query.list();
!         if (lowList.size() != 1) {
!             Priority low = new Priority();
!             low.setCaption(LOW);
!             Transaction t = session.beginTransaction();
!             session.save(low);
!             t.commit();
!         }
! 
!         query.setString("caption", NORMAL);
!         List normalList = query.list();
!         if (normalList.size() != 1) {
!             Priority normal = new Priority();
!             normal.setCaption(NORMAL);
!             Transaction t = session.beginTransaction();
!             session.save(normal);
!             t.commit();
!             this.defaultPriorityId = normal.getPriorityId();
!         } else {
!             Priority normal = (Priority) normalList.get(0);
!             this.defaultPriorityId = normal.getPriorityId();
!         }
!             
! 
!         query.setString("caption", URGENT);
!         List urgentList = query.list();
!         if (urgentList.size() != 1) {
!             Priority urgent = new Priority();
!             urgent.setCaption(URGENT);
!             Transaction t = session.beginTransaction();
!             session.save(urgent);
!             t.commit();
!         }
!     }
  
  	/**

Index: Zebra.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/Zebra.java,v
retrieving revision 1.9
retrieving revision 1.10
diff -C2 -d -r1.9 -r1.10
*** Zebra.java	15 Mar 2006 11:44:41 -0000	1.9
--- Zebra.java	15 Mar 2006 17:14:23 -0000	1.10
***************
*** 30,36 ****
  import com.anite.zebra.core.exceptions.StartProcessException;
  import com.anite.zebra.core.exceptions.TransitionException;
- import com.anite.zebra.core.factory.api.IStateFactory;
  import com.anite.zebra.core.factory.exceptions.StateFailureException;
  import com.anite.zebra.core.state.api.ITransaction;
  import com.anite.zebra.hivemind.lifecycle.ProcessDestruct;
  import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
--- 30,37 ----
  import com.anite.zebra.core.exceptions.StartProcessException;
  import com.anite.zebra.core.exceptions.TransitionException;
  import com.anite.zebra.core.factory.exceptions.StateFailureException;
  import com.anite.zebra.core.state.api.ITransaction;
+ import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
+ import com.anite.zebra.hivemind.api.ZebraStateFactory;
  import com.anite.zebra.hivemind.lifecycle.ProcessDestruct;
  import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
***************
*** 50,54 ****
      private ZebraDefinitionFactory definitionFactory;
  
!     private IStateFactory stateFactory;
  
      private IEngine engine;
--- 51,55 ----
      private ZebraDefinitionFactory definitionFactory;
  
!     private ZebraStateFactory stateFactory;
  
      private IEngine engine;
***************
*** 190,198 ****
       * @return
       */
!     public IStateFactory getStateFactory() {
          return this.stateFactory;
      }
  
!     public void setStateFactory(IStateFactory stateFactory) {
          this.stateFactory = stateFactory;
      }
--- 191,199 ----
       * @return
       */
!     public ZebraStateFactory getStateFactory() {
          return this.stateFactory;
      }
  
!     public void setStateFactory(ZebraStateFactory stateFactory) {
          this.stateFactory = stateFactory;
      }

--- ZebraDefinitionFactory.java DELETED ---

--- ZebraStateFactory.java DELETED ---



From nobody at sheep.berlios.de  Wed Mar 15 19:13:32 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Wed, 15 Mar 2006 19:13:32 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state ZebraProcessInstance.java,1.14,1.15 AbstractZebraTaskInstance.java,1.7,1.8
Message-ID: <200603151813.k2FIDWb26822@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state
In directory sheep:/tmp/cvs-serv25789/src/main/java/com/anite/zebra/hivemind/om/state

Modified Files:
	ZebraProcessInstance.java AbstractZebraTaskInstance.java 
Log Message:
Fixing the loading problems

Index: ZebraProcessInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/ZebraProcessInstance.java,v
retrieving revision 1.14
retrieving revision 1.15
diff -C2 -d -r1.14 -r1.15
*** ZebraProcessInstance.java	9 Mar 2006 10:14:16 -0000	1.14
--- ZebraProcessInstance.java	15 Mar 2006 17:14:22 -0000	1.15
***************
*** 60,64 ****
  import com.anite.zebra.core.state.api.IProcessInstance;
  import com.anite.zebra.core.state.api.ITaskInstance;
! import com.anite.zebra.hivemind.impl.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.impl.ZebraSecurity;
  import com.anite.zebra.hivemind.util.RegistryHelper;
--- 60,64 ----
  import com.anite.zebra.core.state.api.IProcessInstance;
  import com.anite.zebra.core.state.api.ITaskInstance;
! import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.impl.ZebraSecurity;
  import com.anite.zebra.hivemind.util.RegistryHelper;

Index: AbstractZebraTaskInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/AbstractZebraTaskInstance.java,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** AbstractZebraTaskInstance.java	8 Mar 2006 16:52:52 -0000	1.7
--- AbstractZebraTaskInstance.java	15 Mar 2006 17:14:22 -0000	1.8
***************
*** 43,47 ****
  import com.anite.zebra.core.state.api.IProcessInstance;
  import com.anite.zebra.core.state.api.ITaskInstance;
! import com.anite.zebra.hivemind.impl.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;
  
--- 43,47 ----
  import com.anite.zebra.core.state.api.IProcessInstance;
  import com.anite.zebra.core.state.api.ITaskInstance;
! import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
  import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;
  



From nobody at sheep.berlios.de  Thu Mar 16 10:03:46 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 10:03:46 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/taskAction LogTaskActionTest.java,1.1,1.2
Message-ID: <200603160903.k2G93kb29702@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/taskAction
In directory sheep:/tmp/cvs-serv21238/src/test/java/com/anite/zebra/hivemind/taskAction

Modified Files:
	LogTaskActionTest.java 
Log Message:
Added event listeners

Index: LogTaskActionTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/taskAction/LogTaskActionTest.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** LogTaskActionTest.java	4 Jan 2006 15:55:32 -0000	1.1
--- LogTaskActionTest.java	16 Mar 2006 08:05:07 -0000	1.2
***************
*** 23,27 ****
--- 23,31 ----
  import org.apache.hivemind.impl.DefaultClassResolver;
  import org.apache.hivemind.util.ClasspathResource;
+ import org.hibernate.HibernateException;
+ import org.hibernate.TransactionException;
  
+ import com.anite.zebra.core.exceptions.CreateProcessException;
+ import com.anite.zebra.core.exceptions.StartProcessException;
  import com.anite.zebra.hivemind.impl.Zebra;
  import com.anite.zebra.hivemind.om.state.ZebraProcessInstance;
***************
*** 38,45 ****
      public void testService() throws Exception {
  
!         Zebra zebra = RegistryHelper.getInstance().getZebra();
!         ZebraProcessInstance pi = zebra.createProcessPaused("testProcess");
!         
!         zebra.startProcess(pi);        
      }
  }
--- 42,53 ----
      public void testService() throws Exception {
  
!         try {
!             Zebra zebra = RegistryHelper.getInstance().getZebra();
!             ZebraProcessInstance pi = zebra.createProcessPaused("testProcess");
!             
!             zebra.startProcess(pi);
!         } catch (StartProcessException e) {
!             e.printStackTrace();
!         }        
      }
  }



From nobody at sheep.berlios.de  Thu Mar 16 10:03:47 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 10:03:47 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl ZebraStateFactoryTest.java,1.6,1.7
Message-ID: <200603160903.k2G93lb29706@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv21238/src/test/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraStateFactoryTest.java 
Log Message:
Added event listeners

Index: ZebraStateFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraStateFactoryTest.java,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** ZebraStateFactoryTest.java	15 Mar 2006 17:14:23 -0000	1.6
--- ZebraStateFactoryTest.java	16 Mar 2006 08:05:07 -0000	1.7
***************
*** 35,40 ****
--- 35,42 ----
  import com.anite.zebra.core.state.api.ITaskInstance;
  import com.anite.zebra.core.state.api.ITransaction;
+ import com.anite.zebra.hivemind.api.StateFactoryEvent;
  import com.anite.zebra.hivemind.api.StateFactoryListener;
  import com.anite.zebra.hivemind.api.ZebraDefinitionFactory;
+ import com.anite.zebra.hivemind.api.ZebraStateFactory;
  import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
  import com.anite.zebra.hivemind.om.state.ZebraProcessInstance;
***************
*** 46,52 ****
   */
  public class ZebraStateFactoryTest extends TestCase {
      private static final String SIMPLEWORKFLOW = "SimpleWorkflow";
  
!     private IStateFactory stateFactory;
  
      private ZebraDefinitionFactory definitionsFactory;
--- 48,64 ----
   */
  public class ZebraStateFactoryTest extends TestCase {
+     public class InnerStateListener implements StateFactoryListener {
+         public int count = 0;
+ 
+         public void createTaskInstance(StateFactoryEvent stateFactoryEvent) {
+             count++;
+ 
+         }
+ 
+     }
+ 
      private static final String SIMPLEWORKFLOW = "SimpleWorkflow";
  
!     private ZebraStateFactory stateFactory;
  
      private ZebraDefinitionFactory definitionsFactory;
***************
*** 58,63 ****
          RegistryManager.getInstance().getResources().add(resource);
  
!         this.stateFactory = (IStateFactory) RegistryManager.getInstance().getRegistry().getService("zebra.zebraState",
!                 IStateFactory.class);
          this.definitionsFactory = (ZebraDefinitionFactory) RegistryManager.getInstance().getRegistry().getService(
                  "zebra.zebraDefinitionFactory", ZebraDefinitionFactory.class);
--- 70,75 ----
          RegistryManager.getInstance().getResources().add(resource);
  
!         this.stateFactory = (ZebraStateFactory) RegistryManager.getInstance().getRegistry().getService(
!                 "zebra.zebraState", ZebraStateFactory.class);
          this.definitionsFactory = (ZebraDefinitionFactory) RegistryManager.getInstance().getRegistry().getService(
                  "zebra.zebraDefinitionFactory", ZebraDefinitionFactory.class);
***************
*** 172,182 ****
      }
  
!     public void testEventFiring() throws Exception {
!         
!         StateFactoryListener stateFactoryListener = (StateFactoryListener) RegistryManager.getInstance().getRegistry().getService(StateFactoryListener.class);
          stateFactoryListener.createTaskInstance(null);
!         
          int count = StateFactoryListenerService.count;
!         
          IProcessDefinition processDefinition = getProcessDefinition();
  
--- 184,199 ----
      }
  
!     /**
!      * Add a listener via a eager loaded service
!      * @throws Exception
!      */
!     public void testServiceEventFiring() throws Exception {
! 
!         StateFactoryListener stateFactoryListener = (StateFactoryListener) RegistryManager.getInstance().getRegistry()
!                 .getService(StateFactoryListener.class);
          stateFactoryListener.createTaskInstance(null);
! 
          int count = StateFactoryListenerService.count;
! 
          IProcessDefinition processDefinition = getProcessDefinition();
  
***************
*** 192,198 ****
          ITaskInstance taskInstance = this.stateFactory.createTaskInstance(taskDefinition, processInstance, foe);
          assertNotNull(taskInstance);
!         
!         assertEquals(count +1, StateFactoryListenerService.count);
!         
      }
  
--- 209,243 ----
          ITaskInstance taskInstance = this.stateFactory.createTaskInstance(taskDefinition, processInstance, foe);
          assertNotNull(taskInstance);
! 
!         assertEquals(count + 1, StateFactoryListenerService.count);
! 
!     }
! 
!     /**
!      * Add a listener directly to the service
!      * @throws Exception
!      */
!     public void testNonServiceEventFiring() throws Exception {
!         StateFactoryListener listener = new InnerStateListener();
! 
!         stateFactory.addStateFactoryListener(listener);
! 
!         int count = ((InnerStateListener) listener).count;
! 
!         IProcessDefinition processDefinition = getProcessDefinition();
!         IProcessInstance processInstance = this.stateFactory.createProcessInstance(processDefinition);
! 
!         ITransaction t = this.stateFactory.beginTransaction();
!         this.stateFactory.saveObject(processInstance);
!         t.commit();
! 
!         ITaskDefinition taskDefinition = processDefinition.getFirstTask();
! 
!         IFOE foe = this.stateFactory.createFOE(processInstance);
!         ITaskInstance taskInstance = this.stateFactory.createTaskInstance(taskDefinition, processInstance, foe);
!         assertNotNull(taskInstance);
! 
!         assertEquals(count + 1, ((InnerStateListener) listener).count);
! 
      }
  



From nobody at sheep.berlios.de  Thu Mar 16 10:03:47 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 10:03:47 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/resources/META-INF hivemodule.xml,1.7,1.8
Message-ID: <200603160903.k2G93lb29710@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/resources/META-INF
In directory sheep:/tmp/cvs-serv21238/src/main/resources/META-INF

Modified Files:
	hivemodule.xml 
Log Message:
Added event listeners

Index: hivemodule.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/resources/META-INF/hivemodule.xml,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** hivemodule.xml	15 Mar 2006 17:14:24 -0000	1.7
--- hivemodule.xml	16 Mar 2006 08:05:08 -0000	1.8
***************
*** 30,33 ****
--- 30,36 ----
          </invoke-factory>
      </service-point>
+     <contribution configuration-id="hivemind.EagerLoad">
+         <load service-id="priorityManager"/>
+     </contribution>
      <service-point id="clusterSafeLock" interface="com.anite.zebra.hivemind.api.LockManager">
          <invoke-factory>



From nobody at sheep.berlios.de  Thu Mar 16 10:04:14 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 10:04:14 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/resources/processes testProcess.acgwfd.xml,1.1,1.2
Message-ID: <200603160904.k2G94Eb29750@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources/processes
In directory sheep:/tmp/cvs-serv21238/src/test/resources/processes

Modified Files:
	testProcess.acgwfd.xml 
Log Message:
Added event listeners

Index: testProcess.acgwfd.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources/processes/testProcess.acgwfd.xml,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** testProcess.acgwfd.xml	4 Jan 2006 15:55:33 -0000	1.1
--- testProcess.acgwfd.xml	16 Mar 2006 08:04:59 -0000	1.2
***************
*** 1 ****
! <ACGWFDNative Version="3.0"><ProcessVersions><ProcessVersion VersionID="1"><ProcessDef ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/></properties><TaskDefs/><RoutingDefs/></ProcessDef></ProcessVersion><ProcessVersion VersionID="2"><ProcessDef FirstTask="1" ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/><property locked="-1" name="Class Destruct" value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/><property locked="-1" name="Class Construct" value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/></properties><properties name="Visibility"><property locked="0" name="DebugFlow" value="Yes" type="boolean"/><property locked="0" name="Display Name" value="" type="string"/></properties><properties name="Security"><property locked="0" name="Process Start Permissions" value="systemAccess;" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/></properties><properties name="(Inputs)"/><properties name="(Outputs)"/><TaskDefs><TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/></properties><properties name="(Inputs)"/></
TaskDef><TaskDef GUID="2" Height="1440" Left="6195" Top="4095" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef></TaskDefs><RoutingDefs><RoutingDef GUID="3" TaskDestGUID="2" TaskOrgGUID="1"><Points><Point X="7440" Y="4095"/></Points><properties name="(General)"><property locked="0" name="Name" value="" type="string"/><property locked="0" name="Parallel" value="No" type="boolean"/><property locked="0" name="Condition Class" value="com.anite.zebra.hivemind.routing.RoutingNameCondition" type="string"/></properties></RoutingDef></RoutingDefs></ProcessDef></ProcessVersion><ProcessVersion VersionID="3"><ProcessDef FirstTask="1" ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/><property locked="-1" name="Class Destruct" value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/><property locked="-1" name="Class Construct" value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/></properties><properties name="Visibility"><property locked="0" name="DebugFlow" value="Yes" type="boolean"/><property locked="0" name="Display Name" value="" type="string"/></properties><properties name="Security"><property locked="0" name="Process Start Permi
ssions" value="systemAccess;" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/></properties><properties name="(Inputs)"/><properties name="(Outputs)"/><TaskDefs><TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef><TaskDef GUID="2" Height="1440" Left="6675" Top="3945" Width="2340" TaskTemplate="TestWithProperty"><properties name="(General)"><property locked="0" name="Name" value="TestWithProperty" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="-1" name="Class Name" value="com.anite.zebra.hivemind.taskAction.HivemindServiceTaskAction" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/><property locked="-1" name="ServiceId" value="zebra.QuartzTaskAction" type="string"/><property locked="0" name="Wait" value="WaitString" type="string"/><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="
string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef></TaskDefs><RoutingDefs><RoutingDef GUID="3" TaskDestGUID="2" TaskOrgGUID="1"><Points><Point X="7320" Y="3945"/></Points><properties name="(General)"><property locked="0" name="Name" value="" type="string"/><property locked="0" name="Parallel" value="No" type="boolean"/><property locked="0" name="Condition Class" value="com.anite.zebra.hivemind.routing.RoutingNameCondition" type="string"/></properties></RoutingDef></RoutingDefs></ProcessDef></ProcessVersion><ProcessVersion VersionID="4"><ProcessDef ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/><property locked="-1" name="Class Destruct" value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/><property locked="-1" name="Class Construct" value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/></properties><properties name="Visibility"><property locked="0" name="DebugFlow" value="Yes" type="boolean"/><property locked="0" name="Display Name" value="" type="string"/></properties><properties name="Security"><property locked="0" name="Process Start Permissions" value="systemAccess;" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/></properties><properties name="(Inputs)"/><properties name="(Outputs)"/><TaskDefs><TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="0" name="Static Permis
sions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef></TaskDefs><RoutingDefs/></ProcessDef></ProcessVersion><ProcessVersion VersionID="5"><ProcessDef FirstTask="1" ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/><property locked="-1" name="Class Destruct" value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/><property locked="-1" name="Class Construct" value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/></properties><properties name="Visibility"><property locked="0" name="DebugFlow" value="Yes" type="boolean"/><property locked="0" name="Display Name" value="" type="string"/></properties><properties name="Security"><property locked="0" name="Process Start Permissions" value="systemAccess;" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/></properties><properties name="(Inputs)"/><properties name="(Outputs)"/><TaskDefs><TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/><property locked="-1" name="Sho
wInTaskList" value="No" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef><TaskDef GUID="2" Height="1440" Left="7890" Top="3975" Width="2070" TaskTemplate="TestWithProperty"><properties name="(General)"><property locked="0" name="Name" value="TestWithProperty" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="-1" name="Class Name" value="com.anite.zebra.hivemind.taskAction.HivemindServiceTaskAction" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/><property locked="-1" name="ServiceId" value="zebra.test.noopTaskAction" type="string"/><property locked="0" name="Wait" value="waitstring" type="string"/><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef></TaskDefs><RoutingDefs><RoutingDef GUID="3" TaskDestGUID="2" TaskOrgGUID="1"><Points><Point X="9030" Y="3975"/></Points><properties name="(General)"><property locked="0" name="Name" value="" type="string"/><property locked="0" name="Parallel" value="No" type="boolean"/><property locked="0" name="Condition Class" value="com.anite.zebra.hivemind.routing.RoutingNameCondition" type="string"/></properties></RoutingDef></RoutingDefs></ProcessDef></ProcessVersion></ProcessVersions></ACGWFDNative>
--- 1,85 ----
! <ACGWFDNative Version="3.0">
!     <ProcessVersions>
!         <ProcessVersion VersionID="1">
!             <ProcessDef FirstTask="1" ProcessTemplate="Zebra">
!                 <properties name="(General)">
!                     <property locked="-1" name="Name" value="testProcess" type="string"/>
!                     <property locked="-1" name="Class Destruct"
!                         value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/>
!                     <property locked="-1" name="Class Construct"
!                         value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/>
!                 </properties>
!                 <properties name="Visibility">
!                     <property locked="0" name="DebugFlow" value="Yes" type="boolean"/>
!                     <property locked="0" name="Display Name" value="" type="string"/>
!                 </properties>
!                 <properties name="Security">
!                     <property locked="0" name="Process Start Permissions" value="systemAccess;"
!                         type="string"/>
!                     <property locked="0" name="Dynamic Permissions" value="" type="string"/>
!                 </properties>
!                 <properties name="(Inputs)"/>
!                 <properties name="(Outputs)"/>
!                 <TaskDefs>
!                     <TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340"
!                         TaskTemplate="Activity">
!                         <properties name="(General)">
!                             <property locked="0" name="Name" value="Activity" type="string"/>
!                             <property locked="0" name="Synchronise" value="No" type="boolean"/>
!                             <property locked="-1" name="Auto" value="Yes" type="boolean"/>
!                             <property locked="0" name="Class Name"
!                                 value="com.anite.zebra.hivemind.taskAction.LogTaskActivity"
!                                 type="string"/>
!                             <property locked="0" name="NewThread" value="No" type="boolean"/>
!                         </properties>
!                         <properties name="(General Task Properties)">
!                             <property locked="0" name="Static Permissions" value="systemAccess"
!                                 type="string"/>
!                             <property locked="0" name="Dynamic Permissions" value="" type="string"/>
!                             <property locked="0" name="ShowInHistory" value="Yes" type="boolean"/>
!                             <property locked="-1" name="ShowInTaskList" value="No" type="boolean"/>
!                         </properties>
!                         <properties name="(Inputs)"/>
!                     </TaskDef>
!                     <TaskDef GUID="2" Height="1440" Left="7890" Top="3975" Width="2070"
!                         TaskTemplate="TestWithProperty">
!                         <properties name="(General)">
!                             <property locked="0" name="Name" value="TestWithProperty" type="string"/>
!                             <property locked="0" name="Synchronise" value="No" type="boolean"/>
!                             <property locked="-1" name="Auto" value="Yes" type="boolean"/>
!                             <property locked="-1" name="Class Name"
!                                 value="com.anite.zebra.hivemind.taskAction.HivemindServiceTaskAction"
!                                 type="string"/>
!                             <property locked="0" name="NewThread" value="No" type="boolean"/>
!                         </properties>
!                         <properties name="(General Task Properties)">
!                             <property locked="-1" name="ShowInTaskList" value="No" type="boolean"/>
!                             <property locked="-1" name="ServiceId" value="zebra.test.noopTaskAction"
!                                 type="string"/>
!                             <property locked="0" name="Wait" value="waitstring" type="string"/>
!                             <property locked="0" name="Static Permissions" value="systemAccess"
!                                 type="string"/>
!                             <property locked="0" name="Dynamic Permissions" value="" type="string"/>
!                             <property locked="0" name="ShowInHistory" value="Yes" type="boolean"/>
!                         </properties>
!                         <properties name="(Inputs)"/>
!                     </TaskDef>
!                 </TaskDefs>
!                 <RoutingDefs>
!                     <RoutingDef GUID="3" TaskDestGUID="2" TaskOrgGUID="1">
!                         <Points>
!                             <Point X="9030" Y="3975"/>
!                         </Points>
!                         <properties name="(General)">
!                             <property locked="0" name="Name" value="" type="string"/>
!                             <property locked="0" name="Parallel" value="No" type="boolean"/>
!                             <property locked="0" name="Condition Class"
!                                 value="com.anite.zebra.hivemind.routing.RoutingNameCondition"
!                                 type="string"/>
!                         </properties>
!                     </RoutingDef>
!                 </RoutingDefs>
!             </ProcessDef>
!         </ProcessVersion>
!     </ProcessVersions>
! </ACGWFDNative>



From nobody at sheep.berlios.de  Thu Mar 16 13:51:16 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 13:51:16 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind/src/test/resources - New directory
Message-ID: <200603161251.k2GCpGb09647@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/resources
In directory sheep:/tmp/cvs-serv31440/src/test/resources

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/resources added to the repository




From nobody at sheep.berlios.de  Thu Mar 16 13:51:17 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 13:51:17 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind/src/test/resources/META-INF - New directory
Message-ID: <200603161251.k2GCpHb09651@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/resources/META-INF
In directory sheep:/tmp/cvs-serv31440/src/test/resources/META-INF

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/resources/META-INF added to the repository




From nobody at sheep.berlios.de  Thu Mar 16 13:51:21 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 13:51:21 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind pom.xml,1.4,1.5
Message-ID: <200603161251.k2GCpLb09669@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind
In directory sheep:/tmp/cvs-serv31521

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/pom.xml,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** pom.xml	6 Mar 2006 16:01:21 -0000	1.4
--- pom.xml	16 Mar 2006 11:52:42 -0000	1.5
***************
*** 87,96 ****
        <groupId>hivemind</groupId>
        <artifactId>hivemind</artifactId>
!       <version>1.1</version>
      </dependency>
      <dependency>
        <groupId>hivemind</groupId>
        <artifactId>hivemind-lib</artifactId>
!       <version>1.1</version>
      </dependency>
      <dependency>
--- 87,101 ----
        <groupId>hivemind</groupId>
        <artifactId>hivemind</artifactId>
!       <version>1.1.1</version>
      </dependency>
      <dependency>
        <groupId>hivemind</groupId>
        <artifactId>hivemind-lib</artifactId>
!       <version>1.1.1</version>
!     </dependency>
!     <dependency>
!       <groupId>hivemind</groupId>
!       <artifactId>hivemind-jmx</artifactId>
!       <version>1.1.1</version>
      </dependency>
      <dependency>
***************
*** 147,153 ****
          <version>0.2</version>
          <configuration>
!           <ignoredJars>            
              <ignoredJar>hivemind-1.1.jar</ignoredJar>
!             <ignoredJar>hivemind-lib-1.1.jar</ignoredJar>            
            </ignoredJars>
          </configuration>
--- 152,158 ----
          <version>0.2</version>
          <configuration>
!           <ignoredJars>
              <ignoredJar>hivemind-1.1.jar</ignoredJar>
!             <ignoredJar>hivemind-lib-1.1.jar</ignoredJar>
            </ignoredJars>
          </configuration>



From nobody at sheep.berlios.de  Thu Mar 16 13:51:20 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 13:51:20 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind/src/test/resources log4j.properties,NONE,1.1
Message-ID: <200603161251.k2GCpKb09657@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/resources
In directory sheep:/tmp/cvs-serv31521/src/test/resources

Added Files:
	log4j.properties 
Log Message:


--- NEW FILE: log4j.properties ---
# Basic logging for testing
log4j.rootLogger = info, stdout

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n




From nobody at sheep.berlios.de  Thu Mar 16 13:51:21 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 13:51:21 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind/src/test/resources/META-INF hivemodule_hivemindtest.xml,NONE,1.1 hivemodule_jmx.xml,NONE,1.1
Message-ID: <200603161251.k2GCpLb09660@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/resources/META-INF
In directory sheep:/tmp/cvs-serv31521/src/test/resources/META-INF

Added Files:
	hivemodule_hivemindtest.xml hivemodule_jmx.xml 
Log Message:


--- NEW FILE: hivemodule_hivemindtest.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<module id="fulcrum.hivemind.test" version="1.0.0">
    <service-point id="DummyService" interface="org.apache.fulcrum.hivemind.IDummy">
        <invoke-factory>
            <construct class="org.apache.fulcrum.hivemind.DummyService"/>
        </invoke-factory>
    </service-point>
    <contribution configuration-id="hivemind.management.MBeans" >
        <mbean service-id="fulcrum.hivemind.test.DummyService" />
    </contribution>
</module>

--- NEW FILE: hivemodule_jmx.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<module id="fulcrum.hivmind.jmx" version="1.0.0">
    <contribution configuration-id="hivemind.EagerLoad">
        <load service-id="hivemind.management.MBeanRegistry"/>
    </contribution>
    <contribution configuration-id="hivemind.management.MBeans">
        <mbean service-id="hivemind.management.connector.NamingServiceMBean" start-method="start"/>
        <mbean service-id="hivemind.management.connector.JMXConnectorServerMBean"
            start-method="start"/>
        <mbean service-id="hivemind.management.log4j.LogManagementMBean"/>
    </contribution>
    <contribution configuration-id="hivemind.management.log4j.ManagedLog4jLoggers">
        <logger name="*"/>
    </contribution>
</module>



From nobody at sheep.berlios.de  Thu Mar 16 13:51:21 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 13:51:21 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind/src/main/java/org/apache/fulcrum/hivemind RegistryManager.java,1.2,1.3
Message-ID: <200603161251.k2GCpLb09673@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/main/java/org/apache/fulcrum/hivemind
In directory sheep:/tmp/cvs-serv31521/src/main/java/org/apache/fulcrum/hivemind

Modified Files:
	RegistryManager.java 
Log Message:


Index: RegistryManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/main/java/org/apache/fulcrum/hivemind/RegistryManager.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** RegistryManager.java	6 Mar 2006 16:01:21 -0000	1.2
--- RegistryManager.java	16 Mar 2006 11:52:42 -0000	1.3
***************
*** 45,49 ****
      }
  
!     public static RegistryManager getInstance() {        
          if (_instance == null) {
              log.debug("Constructing RegistryManager");
--- 45,49 ----
      }
  
!     public static RegistryManager getInstance() {
          if (_instance == null) {
              log.debug("Constructing RegistryManager");
***************
*** 73,76 ****
--- 73,89 ----
      public void setResources(List<Resource> resources) {
          this.resources = resources;
+     }
+ 
+     /**
+      * Forces the registry to rebuild - used for unit testing
+      *
+      */
+     public void rebuildRegistry() {
+ 
+         this.resources.clear();
+         if (this.registry != null) {
+             this.registry.shutdown();
+         }
+         this.registry = null;
      }
  



From nobody at sheep.berlios.de  Thu Mar 16 13:51:21 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 13:51:21 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind/src/test/java/org/apache/fulcrum/hivemind JmxManualT3st.java,NONE,1.1 IDummy.java,NONE,1.1 DummyService.java,NONE,1.1 RegistryManagerTest.java,1.1,1.2
Message-ID: <200603161251.k2GCpLb09665@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/java/org/apache/fulcrum/hivemind
In directory sheep:/tmp/cvs-serv31521/src/test/java/org/apache/fulcrum/hivemind

Modified Files:
	RegistryManagerTest.java 
Added Files:
	JmxManualT3st.java IDummy.java DummyService.java 
Log Message:


--- NEW FILE: JmxManualT3st.java ---
package org.apache.fulcrum.hivemind;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import junit.framework.TestCase;

import org.apache.hivemind.Resource;
import org.apache.hivemind.impl.DefaultClassResolver;
import org.apache.hivemind.util.ClasspathResource;

/**
 * A test to start JMX
 * 
 * This is run maunally
 * 
 * @author ben.gidley
 *
 */
public class JmxManualT3st extends TestCase {

    public void testManualConsoleConnect() throws IOException{
        RegistryManager.getInstance().rebuildRegistry();
        Resource resource = new ClasspathResource(new DefaultClassResolver(), "META-INF/hivemodule_hivemindtest.xml");
        RegistryManager.getInstance().getResources().add(resource);
        resource = new ClasspathResource(new DefaultClassResolver(), "META-INF/hivemodule_jmx.xml");
        RegistryManager.getInstance().getResources().add(resource);

        IDummy dummyService = (IDummy) RegistryManager.getInstance().getRegistry().getService(IDummy.class);
        
        assertNotNull(dummyService);
        
        System.out.print("Press enter when done");
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String inString = in.readLine();
        assertNotNull(inString);
      
    }
    
}

--- NEW FILE: IDummy.java ---
package org.apache.fulcrum.hivemind;

public interface IDummy {
    public void logAtDebug(String message);
}
--- NEW FILE: DummyService.java ---
package org.apache.fulcrum.hivemind;

import org.apache.commons.logging.Log;

public class DummyService implements IDummy {
    private Log log;
    
    public Log getLog() {
        return this.log;
    }

    public void setLog(Log log) {
        this.log = log;
    }

    public void logAtDebug(String message){
        log.debug(message);
    }
}

Index: RegistryManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/java/org/apache/fulcrum/hivemind/RegistryManagerTest.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** RegistryManagerTest.java	24 Nov 2005 15:09:40 -0000	1.1
--- RegistryManagerTest.java	16 Mar 2006 11:52:41 -0000	1.2
***************
*** 1,9 ****
  package org.apache.fulcrum.hivemind;
  
- 
- 
  import junit.framework.TestCase;
  
  import org.apache.hivemind.Registry;
  
  public class RegistryManagerTest extends TestCase {
--- 1,11 ----
  package org.apache.fulcrum.hivemind;
  
  import junit.framework.TestCase;
  
+ import org.apache.hivemind.ApplicationRuntimeException;
  import org.apache.hivemind.Registry;
+ import org.apache.hivemind.Resource;
+ import org.apache.hivemind.impl.DefaultClassResolver;
+ import org.apache.hivemind.util.ClasspathResource;
  
  public class RegistryManagerTest extends TestCase {
***************
*** 25,27 ****
--- 27,48 ----
      }
  
+     public void testResourceLoading() {
+ 
+         RegistryManager.getInstance().rebuildRegistry();
+         Resource resource = new ClasspathResource(new DefaultClassResolver(), "META-INF/hivemodule_hivemindtest.xml");
+         RegistryManager.getInstance().getResources().add(resource);
+ 
+         IDummy dummyService = (IDummy) RegistryManager.getInstance().getRegistry().getService(DummyService.class);
+         
+         assertNotNull(dummyService);
+         
+         RegistryManager.getInstance().rebuildRegistry();
+         try {
+             dummyService = (IDummy) RegistryManager.getInstance().getRegistry().getService(DummyService.class);
+         } catch (ApplicationRuntimeException e) {
+             return;
+         }
+         fail();
+         
+     }
  }



From nobody at sheep.berlios.de  Thu Mar 16 14:06:07 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 14:06:07 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind pom.xml,1.5,1.6
Message-ID: <200603161306.k2GD67b10401@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind
In directory sheep:/tmp/cvs-serv7452

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/pom.xml,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** pom.xml	16 Mar 2006 11:52:42 -0000	1.5
--- pom.xml	16 Mar 2006 12:07:26 -0000	1.6
***************
*** 7,11 ****
    <packaging>jar</packaging>
    <name>Fulcrum Hivemind</name>
!   <version>1.5</version>
    <description>Fulcrum Hivemind.</description>
    <url>http://zebra.berlios.de</url>
--- 7,11 ----
    <packaging>jar</packaging>
    <name>Fulcrum Hivemind</name>
!   <version>1.6</version>
    <description>Fulcrum Hivemind.</description>
    <url>http://zebra.berlios.de</url>



From nobody at sheep.berlios.de  Thu Mar 16 14:06:07 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 14:06:07 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind/src/test/java/org/apache/fulcrum/hivemind RegistryManagerTest.java,1.2,1.3
Message-ID: <200603161306.k2GD67b10405@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/java/org/apache/fulcrum/hivemind
In directory sheep:/tmp/cvs-serv7452/src/test/java/org/apache/fulcrum/hivemind

Modified Files:
	RegistryManagerTest.java 
Log Message:


Index: RegistryManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind/src/test/java/org/apache/fulcrum/hivemind/RegistryManagerTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** RegistryManagerTest.java	16 Mar 2006 11:52:41 -0000	1.2
--- RegistryManagerTest.java	16 Mar 2006 12:07:28 -0000	1.3
***************
*** 33,37 ****
          RegistryManager.getInstance().getResources().add(resource);
  
!         IDummy dummyService = (IDummy) RegistryManager.getInstance().getRegistry().getService(DummyService.class);
          
          assertNotNull(dummyService);
--- 33,37 ----
          RegistryManager.getInstance().getResources().add(resource);
  
!         IDummy dummyService = (IDummy) RegistryManager.getInstance().getRegistry().getService(IDummy.class);
          
          assertNotNull(dummyService);
***************
*** 39,43 ****
          RegistryManager.getInstance().rebuildRegistry();
          try {
!             dummyService = (IDummy) RegistryManager.getInstance().getRegistry().getService(DummyService.class);
          } catch (ApplicationRuntimeException e) {
              return;
--- 39,43 ----
          RegistryManager.getInstance().rebuildRegistry();
          try {
!             dummyService = (IDummy) RegistryManager.getInstance().getRegistry().getService(IDummy.class);
          } catch (ApplicationRuntimeException e) {
              return;



From nobody at sheep.berlios.de  Thu Mar 16 14:27:08 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 14:27:08 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-hibernate/src/test/resources/data 025APP_Sample.koi,1.3,1.4 026APP_SampleAnnotation.koi,1.3,1.4 001SYS_INFO_sUSRSequence.koi,1.2,1.3 jnl10,1.2,1.3
Message-ID: <200603161327.k2GDR8b11442@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/test/resources/data
In directory sheep:/tmp/cvs-serv15944/src/test/resources/data

Modified Files:
	025APP_Sample.koi 026APP_SampleAnnotation.koi 
	001SYS_INFO_sUSRSequence.koi jnl10 
Log Message:


Index: 025APP_Sample.koi
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/test/resources/data/025APP_Sample.koi,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
Binary files /tmp/cvs.dl5qsm and /tmp/cvs.j3x7im differ

Index: 026APP_SampleAnnotation.koi
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/test/resources/data/026APP_SampleAnnotation.koi,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
Binary files /tmp/cvs.bi6mzp and /tmp/cvs.fXsUqp differ

Index: 001SYS_INFO_sUSRSequence.koi
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/test/resources/data/001SYS_INFO_sUSRSequence.koi,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
Binary files /tmp/cvs.Z7Lvao and /tmp/cvs.hFgW2n differ

Index: jnl10
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/test/resources/data/jnl10,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
Binary files /tmp/cvs.RhUjfp and /tmp/cvs.tdgI8o differ



From nobody at sheep.berlios.de  Thu Mar 16 14:27:08 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 14:27:08 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-hibernate pom.xml,1.17,1.18
Message-ID: <200603161327.k2GDR8b11447@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate
In directory sheep:/tmp/cvs-serv15944

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/pom.xml,v
retrieving revision 1.17
retrieving revision 1.18
diff -C2 -d -r1.17 -r1.18
*** pom.xml	6 Mar 2006 16:05:13 -0000	1.17
--- pom.xml	16 Mar 2006 12:28:29 -0000	1.18
***************
*** 6,10 ****
      <artifactId>fulcrum-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.11</version>
      <name>fulcrum-hivemind-hibernate - Hibernate Session manager for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.12</version>
      <name>fulcrum-hivemind-hibernate - Hibernate Session manager for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
***************
*** 66,70 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hivemind</artifactId>
!             <version>1.5</version>
          </dependency>
          <!-- Hibernate -->
--- 66,70 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hivemind</artifactId>
!             <version>1.6</version>
          </dependency>
          <!-- Hibernate -->
***************
*** 80,83 ****
--- 80,84 ----
              <artifactId>mckoi</artifactId>
              <version>1.0.2</version>
+             <optional>true</optional>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Thu Mar 16 15:00:48 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 15:00:48 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind pom.xml,1.14,1.15
Message-ID: <200603161400.k2GE0mb12713@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind
In directory sheep:/tmp/cvs-serv31254

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/pom.xml,v
retrieving revision 1.14
retrieving revision 1.15
diff -C2 -d -r1.14 -r1.15
*** pom.xml	6 Mar 2006 16:10:05 -0000	1.14
--- pom.xml	16 Mar 2006 13:02:08 -0000	1.15
***************
*** 7,11 ****
    <packaging>jar</packaging>
    <name>Fulcrum Security for Hivemind</name>
!   <version>1.8</version>
    <description>A port of Fulcrum Security to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>
--- 7,11 ----
    <packaging>jar</packaging>
    <name>Fulcrum Security for Hivemind</name>
!   <version>1.9</version>
    <description>A port of Fulcrum Security to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>
***************
*** 105,109 ****
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-hivemind</artifactId>
!       <version>1.5</version>
      </dependency>
      <dependency>
--- 105,109 ----
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-hivemind</artifactId>
!       <version>1.6</version>
      </dependency>
      <dependency>
***************
*** 115,119 ****
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-crypto</artifactId>
!       <version>1.4</version>
      </dependency>
    </dependencies>
--- 115,119 ----
        <groupId>fulcrum-hivemind</groupId>
        <artifactId>fulcrum-crypto</artifactId>
!       <version>1.5</version>
      </dependency>
    </dependencies>



From nobody at sheep.berlios.de  Thu Mar 16 15:04:23 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 15:04:23 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate pom.xml,1.11,1.12
Message-ID: <200603161404.k2GE4Nb12785@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate
In directory sheep:/tmp/cvs-serv892

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/pom.xml,v
retrieving revision 1.11
retrieving revision 1.12
diff -C2 -d -r1.11 -r1.12
*** pom.xml	7 Mar 2006 12:17:12 -0000	1.11
--- pom.xml	16 Mar 2006 13:05:37 -0000	1.12
***************
*** 6,10 ****
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
! 	<version>1.14</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
! 	<version>1.15</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
***************
*** 77,86 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.8</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.11</version>
          </dependency>
      </dependencies>
--- 77,92 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.9</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.12</version>
!         </dependency>
!         <dependency>
!             <groupId>mckoi</groupId>
!             <artifactId>mckoi</artifactId>
!             <version>1.0.2</version>
!             <optional>true</optional>
          </dependency>
      </dependencies>



From nobody at sheep.berlios.de  Thu Mar 16 15:06:25 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 16 Mar 2006 15:06:25 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz pom.xml,1.6,1.7
Message-ID: <200603161406.k2GE6Pb12857@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz
In directory sheep:/tmp/cvs-serv1814

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/pom.xml,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** pom.xml	6 Mar 2006 16:09:02 -0000	1.6
--- pom.xml	16 Mar 2006 13:07:44 -0000	1.7
***************
*** 6,10 ****
      <artifactId>fulcrum-quartz</artifactId>
      <packaging>jar</packaging>
!     <version>1.4</version>
      <name>fulcrum-hivemind-quartz - Scheduler factory for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-quartz</artifactId>
      <packaging>jar</packaging>
!     <version>1.5</version>
      <name>fulcrum-hivemind-quartz - Scheduler factory for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
***************
*** 71,75 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.11</version>
          </dependency>
          <dependency>
--- 71,75 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.12</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Sat Mar 18 18:17:01 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:17:01 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate pom.xml,1.12,1.13
Message-ID: <200603181717.k2IHH1b18009@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate
In directory sheep:/tmp/cvs-serv18167

Modified Files:
	pom.xml 
Log Message:
Added functionality to disable users

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/pom.xml,v
retrieving revision 1.12
retrieving revision 1.13
diff -C2 -d -r1.12 -r1.13
*** pom.xml	16 Mar 2006 13:05:37 -0000	1.12
--- pom.xml	18 Mar 2006 16:18:21 -0000	1.13
***************
*** 6,10 ****
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
! 	<version>1.15</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
! 	<version>1.16</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
***************
*** 77,81 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.9</version>
          </dependency>
          <dependency>
--- 77,81 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.10</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Sat Mar 18 18:17:00 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:17:00 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model HibernateDynamicPermission.java,1.2,1.3 HibernateDynamicRole.java,1.2,1.3 HibernateDynamicGroup.java,1.2,1.3 HibernateDynamicUser.java,1.5,1.6
Message-ID: <200603181717.k2IHH0b18003@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model
In directory sheep:/tmp/cvs-serv18167/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model

Modified Files:
	HibernateDynamicPermission.java HibernateDynamicRole.java 
	HibernateDynamicGroup.java HibernateDynamicUser.java 
Log Message:
Added functionality to disable users

Index: HibernateDynamicPermission.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model/HibernateDynamicPermission.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** HibernateDynamicPermission.java	16 Feb 2006 16:48:57 -0000	1.2
--- HibernateDynamicPermission.java	18 Mar 2006 16:18:20 -0000	1.3
***************
*** 19,23 ****
      @ManyToMany
      public Set<HibernateDynamicRole> getRolesAsSet() {
- 
          return super.getRolesAsSet();
      }
--- 19,22 ----
***************
*** 36,39 ****
      }
      
! 
! }
--- 35,42 ----
      }
      
!     @Override
!     @Basic
!     public boolean isDisabled() {
!     	return super.isDisabled();
!     }
! }
\ No newline at end of file

Index: HibernateDynamicRole.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model/HibernateDynamicRole.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** HibernateDynamicRole.java	16 Feb 2006 16:48:57 -0000	1.2
--- HibernateDynamicRole.java	18 Mar 2006 16:18:20 -0000	1.3
***************
*** 13,17 ****
  
  @Entity
! public class HibernateDynamicRole extends DynamicRole{
  
      @SuppressWarnings("unchecked")
--- 13,17 ----
  
  @Entity
! public class HibernateDynamicRole extends DynamicRole {
  
      @SuppressWarnings("unchecked")
***************
*** 42,44 ****
      }
  
! }
--- 42,49 ----
      }
  
!     @Override
!     @Basic
!     public boolean isDisabled() {
!     	return super.isDisabled();
!     }
! }
\ No newline at end of file

Index: HibernateDynamicGroup.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model/HibernateDynamicGroup.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** HibernateDynamicGroup.java	16 Feb 2006 16:48:57 -0000	1.2
--- HibernateDynamicGroup.java	18 Mar 2006 16:18:20 -0000	1.3
***************
*** 13,17 ****
  
  @Entity
! public class HibernateDynamicGroup extends DynamicGroup{
  
      @Override
--- 13,17 ----
  
  @Entity
! public class HibernateDynamicGroup extends DynamicGroup {
  
      @Override
***************
*** 40,48 ****
      @ManyToMany
      public Set<HibernateDynamicUser> getUsersAsSet() {
- 
          return super.getUsersAsSet();
      }
  
!    
! 
! }
--- 40,50 ----
      @ManyToMany
      public Set<HibernateDynamicUser> getUsersAsSet() {
          return super.getUsersAsSet();
      }
  
!     @Override
!     @Basic
!     public boolean isDisabled() {
!     	return super.isDisabled();
!     }
! }
\ No newline at end of file

Index: HibernateDynamicUser.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model/HibernateDynamicUser.java,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** HibernateDynamicUser.java	16 Feb 2006 16:48:57 -0000	1.5
--- HibernateDynamicUser.java	18 Mar 2006 16:18:20 -0000	1.6
***************
*** 60,67 ****
      @Basic
      public String getName() {
- 
          return super.getName();
      }
  
      @SuppressWarnings("unchecked")
  	@Override
--- 60,72 ----
      @Basic
      public String getName() {
          return super.getName();
      }
  
+     @Override
+     @Basic
+     public boolean isDisabled() {
+     	return super.isDisabled();
+     }
+     
      @SuppressWarnings("unchecked")
  	@Override



From nobody at sheep.berlios.de  Sat Mar 18 18:17:01 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:17:01 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate PersistenceHelper.java,1.1,1.2 PersistenceHelperHivemindImplementation.java,1.2,1.3 HibernateRoleManagerImpl.java,1.1,1.2 HibernatePermissionManagerImpl.java,1.1,1.2 HibernateGroupManagerImpl.java,1.1,1.2 HibernateUserManagerImpl.java,1.2,1.3
Message-ID: <200603181717.k2IHH1b18015@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate
In directory sheep:/tmp/cvs-serv18167/src/main/java/org/apache/fulcrum/security/hibernate

Modified Files:
	PersistenceHelper.java 
	PersistenceHelperHivemindImplementation.java 
	HibernateRoleManagerImpl.java 
	HibernatePermissionManagerImpl.java 
	HibernateGroupManagerImpl.java HibernateUserManagerImpl.java 
Log Message:
Added functionality to disable users

Index: PersistenceHelper.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/PersistenceHelper.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** PersistenceHelper.java	25 Nov 2005 08:50:12 -0000	1.1
--- PersistenceHelper.java	18 Mar 2006 16:18:21 -0000	1.2
***************
*** 33,36 ****
--- 33,38 ----
  	public void updateEntity(SecurityEntity entity) throws DataBackendException;
  	
+ 	public void disableEntity(SecurityEntity entity) throws DataBackendException;
+ 	
  	public void addEntity(SecurityEntity entity) throws DataBackendException;
  	

Index: PersistenceHelperHivemindImplementation.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/PersistenceHelperHivemindImplementation.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** PersistenceHelperHivemindImplementation.java	24 Jan 2006 11:57:56 -0000	1.2
--- PersistenceHelperHivemindImplementation.java	18 Mar 2006 16:18:21 -0000	1.3
***************
*** 31,35 ****
              throw new DataBackendException("Problem removing entity:" + he.getMessage(), he);
          }
! 
      }
  
--- 31,39 ----
              throw new DataBackendException("Problem removing entity:" + he.getMessage(), he);
          }
!     }
!     
!     public void disableEntity(SecurityEntity entity) throws DataBackendException {
!     	entity.setDisabled(true);
!     	updateEntity(entity);
      }
  

Index: HibernateRoleManagerImpl.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/HibernateRoleManagerImpl.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** HibernateRoleManagerImpl.java	25 Nov 2005 08:50:12 -0000	1.1
--- HibernateRoleManagerImpl.java	18 Mar 2006 16:18:21 -0000	1.2
***************
*** 18,23 ****
  import java.util.List;
  
- import org.apache.commons.logging.Log;
- import org.apache.commons.logging.LogFactory;
  import org.apache.fulcrum.security.entity.Role;
  import org.apache.fulcrum.security.spi.AbstractRoleManager;
--- 18,21 ----
***************
*** 37,43 ****
   */
  public class HibernateRoleManagerImpl extends AbstractRoleManager {
-     /** Logging */
-     private static Log log = LogFactory.getLog(HibernateRoleManagerImpl.class);
- 
      private PersistenceHelper persistenceHelper;
  
--- 35,38 ----
***************
*** 111,114 ****
--- 106,129 ----
  
      /**
+      * Retrieves all non-disabled roles defined in the system.
+      *
+      * @return the names of all non-disabled roles defined in the system.
+      * @throws DataBackendException if there was an error accessing the
+      *         data backend.
+      */
+     public RoleSet getRoles() throws DataBackendException {
+         RoleSet roleSet = new RoleSet();
+         try {
+             Query query = getPersistenceHelper().retrieveSession().createQuery("from " + getClassName() + " r where r.disabled = false");
+ 
+             List roles = query.list();
+             roleSet.add(roles);
+         } catch (HibernateException e) {
+             throw new DataBackendException("Error retriving role information", e);
+         }
+         return roleSet;
+     }
+ 
+     /**
       * Creates a new role with specified attributes.
       *
***************
*** 134,150 ****
       */
      public synchronized void removeRole(Role role) throws DataBackendException, UnknownEntityException {
!         boolean roleExists = false;
!         try {
!             roleExists = checkExists(role);
!             if (roleExists) {
!                 getPersistenceHelper().removeEntity(role);
!             } else {
!                 throw new UnknownEntityException("Unknown role '" + role + "'");
!             }
!         } catch (Exception e) {
!             log.error("Failed to delete a Role");
!             log.error(e);
!             throw new DataBackendException("removeRole(Role) failed", e);
!         }
      }
  
--- 149,165 ----
       */
      public synchronized void removeRole(Role role) throws DataBackendException, UnknownEntityException {
!         getPersistenceHelper().removeEntity(role);
!     }
! 
!     /**
!      * Disables a Role (effectively rendering it as removed).
!      *
!      * @param role The object describing the role to be disabled.
!      * @throws DataBackendException if there was an error accessing the data
!      *         backend.
!      * @throws UnknownEntityException if the role does not exist.
!      */
!     public synchronized void disableRole(Role role) throws DataBackendException, UnknownEntityException {
!         getPersistenceHelper().disableEntity(role);
      }
  

Index: HibernatePermissionManagerImpl.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/HibernatePermissionManagerImpl.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** HibernatePermissionManagerImpl.java	25 Nov 2005 08:50:12 -0000	1.1
--- HibernatePermissionManagerImpl.java	18 Mar 2006 16:18:21 -0000	1.2
***************
*** 58,61 ****
--- 58,82 ----
  
      /**
+      * Retrieves all non-disabled permissions defined in the system.
+      *
+      * @return the names of all non-disabled roles defined in the system.
+      * @throws DataBackendException if there was an error accessing the
+      *         data backend.
+      */
+     public PermissionSet getPermissions() throws DataBackendException {
+         PermissionSet permissionSet = new PermissionSet();
+         try {
+             Query permissionQuery = getPersistenceHelper().retrieveSession().createQuery(
+                     "from " + getClassName() + " p where p.disabled = false");
+             List permissions = permissionQuery.list();
+             permissionSet.add(permissions);
+ 
+         } catch (HibernateException e) {
+             throw new DataBackendException("Error retriving permission information", e);
+         }
+         return permissionSet;
+     }
+ 
+     /**
       * Renames an existing Permission.
       *
***************
*** 105,108 ****
--- 126,141 ----
  
      /**
+      * Disables a Permission (effectively rendering it as removed).
+      *
+      * @param permission The object describing the permission to be removed.
+      * @throws DataBackendException if there was an error accessing the data
+      *         backend.
+      * @throws UnknownEntityException if the permission does not exist.
+      */
+     public synchronized void disablePermission(Permission permission) throws DataBackendException, UnknownEntityException {
+         getPersistenceHelper().disableEntity(permission);
+     }
+ 
+     /**
       * Removes a Permission from the system.
       *
***************
*** 112,124 ****
       * @throws UnknownEntityException if the permission does not exist.
       */
!     public synchronized void removePermission(Permission permission) throws DataBackendException,
!             UnknownEntityException {
!         boolean permissionExists = false;
!         permissionExists = checkExists(permission);
!         if (permissionExists) {
!             getPersistenceHelper().removeEntity(permission);
!         } else {
!             throw new UnknownEntityException("Unknown permission '" + permission + "'");
!         }
      }
  
--- 145,150 ----
       * @throws UnknownEntityException if the permission does not exist.
       */
!     public synchronized void removePermission(Permission permission) throws DataBackendException, UnknownEntityException {
!         getPersistenceHelper().removeEntity(permission);
      }
  

Index: HibernateGroupManagerImpl.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/HibernateGroupManagerImpl.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** HibernateGroupManagerImpl.java	25 Nov 2005 08:50:13 -0000	1.1
--- HibernateGroupManagerImpl.java	18 Mar 2006 16:18:21 -0000	1.2
***************
*** 21,24 ****
--- 21,25 ----
  import org.apache.fulcrum.security.spi.AbstractGroupManager;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.GroupSet;
***************
*** 45,49 ****
       * @throws UnknownEntityException if the group does not exist.
       */
!     public Group getGroupByName(String name) throws DataBackendException, UnknownEntityException {
          Group group = null;
          try {
--- 46,50 ----
       * @throws UnknownEntityException if the group does not exist.
       */
!     public Group getGroupByName(String name) throws DataBackendException, UnknownEntityException, EntityDisabledException {
          Group group = null;
          try {
***************
*** 58,63 ****
              }
              group = (Group) groups.get(0);
!             //session.close();
!         } catch (HibernateException e) {
              throw new DataBackendException("Error retriving group information", e);
          }
--- 59,66 ----
              }
              group = (Group) groups.get(0);
!             if (group.isDisabled()) {
!             	throw new EntityDisabledException("Group is unavailable");
!             }
!      } catch (HibernateException e) {
              throw new DataBackendException("Error retriving group information", e);
          }
***************
*** 87,90 ****
--- 90,114 ----
  
      /**
+      * Retrieves all non-disabled groups defined in the system.
+      *
+      * @return the names of all groups defined in the system.
+      * @throws DataBackendException if there was an error accessing the
+      *         data backend.
+      */
+     public GroupSet getGroups() throws DataBackendException {
+         GroupSet groupSet = new GroupSet();
+         try {
+ 
+             Query groupsQuery = getPersistenceHelper().retrieveSession().createQuery(
+                     "from " + getClassName() + " g where g.disabled = false");
+             List groups = groupsQuery.list();
+             groupSet.add(groups);
+         } catch (HibernateException e) {
+             throw new DataBackendException("Error retriving group information", e);
+         }
+         return groupSet;
+     }
+ 
+     /**
       * Removes a Group from the system.
       *
***************
*** 97,100 ****
--- 121,137 ----
          getPersistenceHelper().removeEntity(group);
      }
+     
+     /**
+      * Disables a Group (effectively rendering it as removed, but without actually removing it).
+      *
+      * @param group The object describing the group to be disabled.
+      * @throws DataBackendException if there was an error accessing the data
+      *         backend.
+      * @throws UnknownEntityException if the group does not exist.
+      */
+     public synchronized void disableGroup(Group group) throws DataBackendException, UnknownEntityException {
+         getPersistenceHelper().disableEntity(group);
+     }
+     
  
      /**
***************
*** 179,183 ****
       *             if the group does not exist.
       */
! public Group getGroupById(Object id) throws DataBackendException, UnknownEntityException {
  
          Group group = null;
--- 216,220 ----
       *             if the group does not exist.
       */
! public Group getGroupById(Object id) throws DataBackendException, UnknownEntityException, EntityDisabledException {
  
          Group group = null;
***************
*** 195,199 ****
                  }
                  group = (Group) groups.get(0);
! 
              } catch (HibernateException e) {
                  throw new DataBackendException("Error retriving group information", e);
--- 232,239 ----
                  }
                  group = (Group) groups.get(0);
!                 
!                 if (group.isDisabled()) {
!                 	throw new EntityDisabledException("Group is unavailable");
!                 }
              } catch (HibernateException e) {
                  throw new DataBackendException("Error retriving group information", e);

Index: HibernateUserManagerImpl.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/HibernateUserManagerImpl.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** HibernateUserManagerImpl.java	24 Jan 2006 11:57:56 -0000	1.2
--- HibernateUserManagerImpl.java	18 Mar 2006 16:18:21 -0000	1.3
***************
*** 21,24 ****
--- 21,25 ----
  import org.apache.fulcrum.security.spi.AbstractUserManager;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
***************
*** 29,201 ****
  /**
   * This implementation persists to a database via Hibernate.
!  *
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
!  * @version $Id$
   */
  public class HibernateUserManagerImpl extends AbstractUserManager {
  
!     private PersistenceHelper persistenceHelper;
  
!     /**
!      * Check whether a specified user's account exists.
!      *
!      * The login name is used for looking up the account.
!      *
!      * @param userName The name of the user to be checked.
!      * @return true if the specified account exists
!      * @throws DataBackendException if there was an error accessing
!      *         the data backend.
!      */
!     public boolean checkExists(String userName) throws DataBackendException {
!         List users = null;
!         userName = userName.toLowerCase();
!         try {
!             Query query = getPersistenceHelper().retrieveSession().createQuery(
!                     "from " + getClassName() + " su where su.name=:name");
!             query.setString("name", userName);
  
!             users = query.list();
!         } catch (HibernateException e) {
!             throw new DataBackendException("Error retriving user information", e);
!         }
!         if (users.size() > 1) {
!             throw new DataBackendException("Multiple Users with same username '" + userName + "'");
!         }
!         return (users.size() == 1);
!     }
  
!     /**
!      * Retrieve a user from persistent storage using username as the
!      * key.
!      *
!      * @param userName the name of the user.
!      * @return an User object.
!      * @exception UnknownEntityException if the user's account does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      */
!     public User getUser(String userName) throws UnknownEntityException, DataBackendException {
!         List users = null;
!         try {
!             Query query = getPersistenceHelper().retrieveSession().createQuery(
!                     "from " + getClassName() + " su where su.name=:name");
!             query.setString("name", userName.toLowerCase());
  
!             users = query.list();
!         } catch (HibernateException e) {
!             throw new DataBackendException("Error retriving user information", e);
!         }
!         if (users.size() > 1) {
!             throw new DataBackendException("Multiple Users with same username '" + userName + "'");
!         }
!         if (users.size() == 1) {
!             return (User) users.get(0);
!         }
!         throw new UnknownEntityException("Unknown user '" + userName + "'");
!     }
  
!     /**
!      * Retrieves all users defined in the system.
!      *
!      * @return the names of all users defined in the system.
!      * @throws DataBackendException if there was an error accessing the data
!      *         backend.
!      */
!     public UserSet getAllUsers() throws DataBackendException {
!         UserSet userSet = new UserSet();
!         try {
!             Query query = getPersistenceHelper().retrieveSession().createQuery("from " + getClassName()+ "");
!             List users = query.list();
!             userSet.add(users);
!         } catch (HibernateException e) {
!             throw new DataBackendException("Error retriving all users", e);
!         }
!         return userSet;
  
!     }
  
!     /**
!      * Removes an user account from the system.
!      *
!      * @param user the object describing the account to be removed.
!      * @throws DataBackendException if there was an error accessing the data
!      *         backend.
!      * @throws UnknownEntityException if the user account is not present.
!      */
!     public void removeUser(User user) throws DataBackendException, UnknownEntityException {
!         getPersistenceHelper().removeEntity(user);
!     }
  
!     /**
!      * Creates new user account with specified attributes.
!      *
!      * @param user the object describing account to be created.
!      *
!      * @throws DataBackendException if there was an error accessing the
!      *         data backend.
!      * @throws EntityExistsException if the user account already exists.
!      */
!     public User persistNewUser(User user) throws DataBackendException {
  
!         getPersistenceHelper().addEntity(user);
!         return user;
!     }
  
!     /**
!      * Stores User attributes. The User is required to exist in the system.
!      *
!      * @param role The User to be stored.
!      * @throws DataBackendException if there was an error accessing the data
!      *         backend.
!      * @throws UnknownEntityException if the role does not exist.
!      */
!     public void saveUser(User user) throws DataBackendException {
!             getPersistenceHelper().updateEntity(user);
!     }
  
!     /**
!      * @return Returns the persistenceHelper.
!      */
!     public PersistenceHelper getPersistenceHelper() throws DataBackendException {
  
!         return persistenceHelper;
!     }
  
!     /**
!      * Retrieve a User object with specified id.
!      * 
!      * @param id
!      *            the id of the User.
!      * @return an object representing the User with specified id.
!      * @throws DataBackendException
!      *             if there was an error accessing the data backend.
!      * @throws UnknownEntityException
!      *             if the user does not exist.
!      */
!     public User getUserById(Object id) throws DataBackendException, UnknownEntityException {
  
!         User user = null;
  
!         if (id != null)
!             try {
!                 Query query = getPersistenceHelper().retrieveSession().createQuery(
!                         "from " + getClassName() + " su where su.id=:id");
!                 query.setLong("id", (Long) id);
!                 List users = query.list();
!                 if (users.size() == 0) {
!                     throw new UnknownEntityException("Could not find user by id " + id);
!                 }
!                 user = (User) users.get(0);
!                 //session.close();
!             } catch (HibernateException e) {
!                 throw new DataBackendException("Error retriving user information", e);
!             }
  
!         return user;
!     }
  
!     public void setPersistenceHelper(PersistenceHelper persistenceHelper) {
!         this.persistenceHelper = persistenceHelper;
!     }
  }
--- 30,265 ----
  /**
   * This implementation persists to a database via Hibernate.
!  * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
!  * @version $Id: HibernateUserManagerImpl.java,v 1.2 2006/01/24 11:57:56
!  *          biggus_richus Exp $
   */
  public class HibernateUserManagerImpl extends AbstractUserManager {
  
! 	private PersistenceHelper persistenceHelper;
  
! 	/**
! 	 * Check whether a specified user's account exists.
! 	 * 
! 	 * The login name is used for looking up the account.
! 	 * 
! 	 * @param userName
! 	 *            The name of the user to be checked.
! 	 * @return true if the specified account exists
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	public boolean checkExists(String userName) throws DataBackendException {
! 		List users = null;
! 		userName = userName.toLowerCase();
! 		try {
! 			Query query = getPersistenceHelper().retrieveSession().createQuery(
! 					"from " + getClassName() + " su where su.name=:name");
! 			query.setString("name", userName);
  
! 			users = query.list();
! 		} catch (HibernateException e) {
! 			throw new DataBackendException("Error retriving user information",
! 					e);
! 		}
! 		if (users.size() > 1) {
! 			throw new DataBackendException(
! 					"Multiple Users with same username '" + userName + "'");
! 		}
! 		return (users.size() == 1);
! 	}
  
! 	/**
! 	 * Retrieve a user from persistent storage using username as the key.
! 	 * 
! 	 * @param userName
! 	 *            the name of the user.
! 	 * @return an User object.
! 	 * @exception UnknownEntityException
! 	 *                if the user's account does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 */
! 	public User getUser(String userName) throws UnknownEntityException,
! 			DataBackendException, EntityDisabledException {
! 		List users = null;
! 		try {
! 			Query query = getPersistenceHelper().retrieveSession().createQuery(
! 					"from " + getClassName() + " su where su.name=:name");
! 			query.setString("name", userName.toLowerCase());
  
! 			users = query.list();
! 		} catch (HibernateException e) {
! 			throw new DataBackendException("Error retriving user information",
! 					e);
! 		}
! 		if (users.size() > 1) {
! 			throw new DataBackendException(
! 					"Multiple Users with same username '" + userName + "'");
! 		}
! 		if (users.size() == 1) {
! 			User user = (User) users.get(0);
  
! 			if (user.isDisabled()) {
! 				throw new EntityDisabledException("User is unavailable");
! 			}
! 			return user;
! 		}
! 		throw new UnknownEntityException("Unknown user '" + userName + "'");
! 	}
  
! 	/**
! 	 * Retrieves all users defined in the system.
! 	 * 
! 	 * @return the names of all users defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	public UserSet getAllUsers() throws DataBackendException {
! 		UserSet userSet = new UserSet();
! 		try {
! 			Query query = getPersistenceHelper().retrieveSession().createQuery(
! 					"from " + getClassName() + "");
! 			List users = query.list();
! 			userSet.add(users);
! 		} catch (HibernateException e) {
! 			throw new DataBackendException("Error retriving all users", e);
! 		}
! 		return userSet;
! 	}
  
! 	/**
! 	 * Retrieves all non-disabled users defined in the system.
! 	 * 
! 	 * @return the names of all non-disabled users defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	public UserSet getUsers() throws DataBackendException {
! 		UserSet userSet = new UserSet();
! 		try {
! 			Query query = getPersistenceHelper().retrieveSession().createQuery(
! 					"from " + getClassName() + " u where u.disabled = false");
! 			List users = query.list();
! 			userSet.add(users);
! 		} catch (HibernateException e) {
! 			throw new DataBackendException("Error retriving users", e);
! 		}
! 		return userSet;
! 	}
  
! 	/**
! 	 * Removes a user account from the system.
! 	 * 
! 	 * @param user
! 	 *            the object describing the account to be removed.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the user account is not present.
! 	 */
! 	public void removeUser(User user) throws DataBackendException,
! 			UnknownEntityException {
! 		getPersistenceHelper().removeEntity(user);
! 	}
  
! 	/**
! 	 * Disables a user (effectively rendering it as removed but without actually
! 	 * removing it).
! 	 * 
! 	 * @param user
! 	 *            the object describing the account to be disabled.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the user account is not present.
! 	 */
! 	public void disableUser(User user) throws DataBackendException,
! 			UnknownEntityException {
! 		getPersistenceHelper().disableEntity(user);
! 	}
  
! 	/**
! 	 * Creates new user account with specified attributes.
! 	 * 
! 	 * @param user
! 	 *            the object describing account to be created.
! 	 * 
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws EntityExistsException
! 	 *             if the user account already exists.
! 	 */
! 	public User persistNewUser(User user) throws DataBackendException {
  
! 		getPersistenceHelper().addEntity(user);
! 		return user;
! 	}
  
! 	/**
! 	 * Stores User attributes. The User is required to exist in the system.
! 	 * 
! 	 * @param role
! 	 *            The User to be stored.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the role does not exist.
! 	 */
! 	public void saveUser(User user) throws DataBackendException {
! 		getPersistenceHelper().updateEntity(user);
! 	}
  
! 	/**
! 	 * @return Returns the persistenceHelper.
! 	 */
! 	public PersistenceHelper getPersistenceHelper() throws DataBackendException {
  
! 		return persistenceHelper;
! 	}
  
! 	/**
! 	 * Retrieve a User object with specified id.
! 	 * 
! 	 * @param id
! 	 *            the id of the User.
! 	 * @return an object representing the User with specified id.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the user does not exist.
! 	 */
! 	public User getUserById(Object id) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException {
  
! 		User user = null;
  
! 		if (id != null) {
! 			try {
! 				Query query = getPersistenceHelper().retrieveSession()
! 						.createQuery(
! 								"from " + getClassName()
! 										+ " su where su.id=:id");
! 				query.setLong("id", (Long) id);
! 				List users = query.list();
! 				if (users.size() == 0) {
! 					throw new UnknownEntityException(
! 							"Could not find user by id " + id);
! 				}
! 				user = (User) users.get(0);
! 
! 				if (user.isDisabled()) {
! 					throw new EntityDisabledException("User is unavailable");
! 				}
! 			} catch (HibernateException e) {
! 				throw new DataBackendException(
! 						"Error retriving user information", e);
! 			}
! 		}
! 		return user;
! 	}
! 
! 	public void setPersistenceHelper(PersistenceHelper persistenceHelper) {
! 		this.persistenceHelper = persistenceHelper;
! 	}
  }



From nobody at sheep.berlios.de  Sat Mar 18 18:17:00 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:17:00 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/.settings .component,NONE,1.1
Message-ID: <200603181717.k2IHH0b18006@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/.settings
In directory sheep:/tmp/cvs-serv18167/.settings

Added Files:
	.component 
Log Message:
Added functionality to disable users

--- NEW FILE: .component ---
<?xml version="1.0" encoding="UTF-8"?>
<project-modules id="moduleCoreId">
<wb-module deploy-name="fulcrum-security-hivemind-hibernate"/>
</project-modules>



From nobody at sheep.berlios.de  Sat Mar 18 18:18:17 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:17 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi AbstractRoleManager.java,1.1,1.2 AbstractGroupManager.java,1.1,1.2 AbstractPermissionManager.java,1.1,1.2 AbstractUserManager.java,1.7,1.8
Message-ID: <200603181718.k2IHIHb18102@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/spi

Modified Files:
	AbstractRoleManager.java AbstractGroupManager.java 
	AbstractPermissionManager.java AbstractUserManager.java 
Log Message:
Added functionality to disable users

Index: AbstractRoleManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi/AbstractRoleManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** AbstractRoleManager.java	14 Nov 2005 18:20:48 -0000	1.1
--- AbstractRoleManager.java	18 Mar 2006 16:19:37 -0000	1.2
***************
*** 1,3 ****
--- 1,4 ----
  package org.apache.fulcrum.security.spi;
+ 
  /*
   *  Copyright 2001-2004 The Apache Software Foundation
***************
*** 16,185 ****
   */
  import org.apache.commons.lang.StringUtils;
- import org.apache.commons.logging.Log;
- import org.apache.commons.logging.LogFactory;
  import org.apache.fulcrum.security.RoleManager;
  import org.apache.fulcrum.security.entity.Role;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  
  /**
!  *
!  * This implementation keeps all objects in memory.  This is mostly meant to help
   * with testing and prototyping of ideas.
!  *
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public abstract class AbstractRoleManager
!     extends AbstractEntityManager
!     implements RoleManager
! {
!     /** Logging */
!     private static Log log = LogFactory.getLog(AbstractRoleManager.class);
  
! 	protected abstract Role persistNewRole(Role role) throws DataBackendException;
! 	
!     /**
!     	* Construct a blank Role object.
!     	*
!     	* This method calls getRoleClass, and then creates a new object using
!     	* the default constructor.
!     	*
!     	* @return an object implementing Role interface.
!     	* @throws DataBackendException if the object could not be instantiated.
!     	*/
!     public Role getRoleInstance() throws DataBackendException
!     {
!         Role role;
!         try
!         {
!             role = (Role) Class.forName(getClassName()).newInstance();
!         }
!         catch (Exception e)
!         {
!             throw new DataBackendException(
!                 "Problem creating instance of class " + getClassName(),
!                 e);
!         }
  
!         return role;
!     }
!     /**
!     	* Construct a blank Role object.
!     	*
!     	* This method calls getRoleClass, and then creates a new object using
!     	* the default constructor.
!     	*
!     	* @param roleName The name of the role.
!     	*
!     	* @return an object implementing Role interface.
!     	*
!     	* @throws DataBackendException if the object could not be instantiated.
!     	*/
!     public Role getRoleInstance(String roleName) throws DataBackendException
!     {
!         Role role = getRoleInstance();
!         role.setName(roleName);
!         return role;
!     }
!     /**
!     	* Retrieve a Role object with specified name.
!     	*
!     	* @param name the name of the Role.
!     	* @return an object representing the Role with specified name.
!     	* @throws DataBackendException if there was an error accessing the
!     	*         data backend.
!     	* @throws UnknownEntityException if the role does not exist.
!     	*/
!     public Role getRoleByName(String name)
!         throws DataBackendException, UnknownEntityException
!     {
!         Role role = getAllRoles().getRoleByName(name);
!         if (role == null)
!         {
!             throw new UnknownEntityException("The specified role does not exist");
!         }
!         return role;
!     }
!     /**
!     	* Retrieve a Role object with specified Id.
!     	*
!     	* @param name the name of the Role.
!     	*
!     	* @return an object representing the Role with specified name.
!     	*
!     	* @throws UnknownEntityException if the permission does not
!     	*            exist in the database.
!     	* @throws DataBackendException if there is a problem accessing the
!     	*            storage.
!     	*/
!     public Role getRoleById(Object id)
!         throws DataBackendException, UnknownEntityException
!     {
!         Role role = getAllRoles().getRoleById(id);
!         if (role == null)
!         {
!             throw new UnknownEntityException("The specified role does not exist");
!         }
!         return role;
!     }
  
!     /**
!     	* Creates a new role with specified attributes.
!     	*
!     	* @param role the object describing the role to be created.
!     	* @return a new Role object that has id set up properly.
!     	* @throws DataBackendException if there was an error accessing the data
!     	*         backend.
!     	* @throws EntityExistsException if the role already exists.
!     	*/
!     public synchronized Role addRole(Role role)
!         throws DataBackendException, EntityExistsException
!     {
!         boolean roleExists = false;
!         if (StringUtils.isEmpty(role.getName()))
!         {
!             throw new DataBackendException("Could not create a role with empty name!");
!         }
!         if (role.getId() != null)
!         {
!             throw new DataBackendException("Could not create a role with an id!");
!         }
!         try
!         {
!             roleExists = checkExists(role);
!             if (!roleExists)
!             {
!                 return persistNewRole(role);
!             }
!         }
!         catch (Exception e)
!         {
!             throw new DataBackendException("addRole(Role) failed", e);
!         }
!         finally
!         {
!         }
!         // the only way we could get here without return/throw tirggered
!         // is that the roleExists was true.
!         throw new EntityExistsException("Role '" + role + "' already exists");
!     }
!     
!     /**
! 	* Check whether a specified role exists.
! 	*
! 	* The name is used for looking up the role
! 	*
! 	* @param role The role to be checked.
! 	* @return true if the specified role exists
! 	* @throws DataBackendException if there was an error accessing
! 	*         the data backend.
! 	*/
! 	public boolean checkExists(Role role) throws DataBackendException
! 	{
! 	    return checkExists(role.getName());
! 	}    
  
-     
  }
--- 17,173 ----
   */
  import org.apache.commons.lang.StringUtils;
  import org.apache.fulcrum.security.RoleManager;
  import org.apache.fulcrum.security.entity.Role;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  
  /**
!  * 
!  * This implementation keeps all objects in memory. This is mostly meant to help
   * with testing and prototyping of ideas.
!  * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public abstract class AbstractRoleManager extends AbstractEntityManager
! 		implements RoleManager {
! 	protected abstract Role persistNewRole(Role role)
! 			throws DataBackendException;
  
! 	/**
! 	 * Construct a blank Role object.
! 	 * 
! 	 * This method calls getRoleClass, and then creates a new object using the
! 	 * default constructor.
! 	 * 
! 	 * @return an object implementing Role interface.
! 	 * @throws DataBackendException
! 	 *             if the object could not be instantiated.
! 	 */
! 	public Role getRoleInstance() throws DataBackendException {
! 		Role role;
! 		try {
! 			role = (Role) Class.forName(getClassName()).newInstance();
! 		} catch (Exception e) {
! 			throw new DataBackendException(
! 					"Problem creating instance of class " + getClassName(), e);
! 		}
  
! 		return role;
! 	}
  
! 	/**
! 	 * Construct a blank Role object.
! 	 * 
! 	 * This method calls getRoleClass, and then creates a new object using the
! 	 * default constructor.
! 	 * 
! 	 * @param roleName
! 	 *            The name of the role.
! 	 * 
! 	 * @return an object implementing Role interface.
! 	 * 
! 	 * @throws DataBackendException
! 	 *             if the object could not be instantiated.
! 	 */
! 	public Role getRoleInstance(String roleName) throws DataBackendException {
! 		Role role = getRoleInstance();
! 		role.setName(roleName);
! 		return role;
! 	}
! 
! 	/**
! 	 * Retrieve a Role object with specified name.
! 	 * 
! 	 * @param name
! 	 *            the name of the Role.
! 	 * @return an object representing the Role with specified name.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the role does not exist.
! 	 */
! 	public Role getRoleByName(String name) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException {
! 		Role role = getAllRoles().getRoleByName(name);
! 		if (role == null) {
! 			throw new UnknownEntityException(
! 					"The specified role does not exist");
! 		}
! 
! 		if (role.isDisabled()) {
! 			throw new EntityDisabledException("Role is disabled");
! 		}
! 		return role;
! 	}
! 
! 	/**
! 	 * Retrieve a Role object with specified Id.
! 	 * 
! 	 * @param name
! 	 *            the name of the Role.
! 	 * 
! 	 * @return an object representing the Role with specified name.
! 	 * 
! 	 * @throws UnknownEntityException
! 	 *             if the permission does not exist in the database.
! 	 * @throws DataBackendException
! 	 *             if there is a problem accessing the storage.
! 	 */
! 	public Role getRoleById(Object id) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException {
! 		Role role = getAllRoles().getRoleById(id);
! 		if (role == null) {
! 			throw new UnknownEntityException(
! 					"The specified role does not exist");
! 		}
! 
! 		if (role.isDisabled()) {
! 			throw new EntityDisabledException("Role is disabled");
! 		}
! 		return role;
! 	}
! 
! 	/**
! 	 * Creates a new role with specified attributes.
! 	 * 
! 	 * @param role
! 	 *            the object describing the role to be created.
! 	 * @return a new Role object that has id set up properly.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws EntityExistsException
! 	 *             if the role already exists.
! 	 */
! 	public synchronized Role addRole(Role role) throws DataBackendException,
! 			EntityExistsException {
! 		if (StringUtils.isEmpty(role.getName())) {
! 			throw new DataBackendException(
! 					"Could not create a role with empty name!");
! 		}
! 		
! 		if (checkExists(role)) {
! 			throw new EntityExistsException("Role '" + role + "' is unavailable");			
! 		}
! 		
! 		return persistNewRole(role);
! 	}
! 
! 	/**
! 	 * Check whether a specified role exists.
! 	 * 
! 	 * The name is used for looking up the role
! 	 * 
! 	 * @param role
! 	 *            The role to be checked.
! 	 * @return true if the specified role exists
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	public boolean checkExists(Role role) throws DataBackendException {
! 		return checkExists(role.getName());
! 	}
  
  }

Index: AbstractGroupManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi/AbstractGroupManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** AbstractGroupManager.java	14 Nov 2005 18:20:48 -0000	1.1
--- AbstractGroupManager.java	18 Mar 2006 16:19:37 -0000	1.2
***************
*** 16,24 ****
   */
  import org.apache.commons.lang.StringUtils;
- import org.apache.commons.logging.Log;
- import org.apache.commons.logging.LogFactory;
  import org.apache.fulcrum.security.GroupManager;
  import org.apache.fulcrum.security.entity.Group;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
--- 16,23 ----
   */
  import org.apache.commons.lang.StringUtils;
  import org.apache.fulcrum.security.GroupManager;
  import org.apache.fulcrum.security.entity.Group;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
***************
*** 33,41 ****
  public abstract class AbstractGroupManager
      extends AbstractEntityManager
!     implements GroupManager
! {
!     /** Logging */
!     private static Log log = LogFactory.getLog(AbstractGroupManager.class);
! 
      protected abstract Group persistNewGroup(Group group) throws DataBackendException;
  
--- 32,36 ----
  public abstract class AbstractGroupManager
      extends AbstractEntityManager
!     implements GroupManager {
      protected abstract Group persistNewGroup(Group group) throws DataBackendException;
  
***************
*** 49,61 ****
      * @throws DataBackendException if the object could not be instantiated.
      */
!     public Group getGroupInstance() throws DataBackendException
!     {
          Group group;
!         try
!         {
              group = (Group) Class.forName(getClassName()).newInstance();
          }
!         catch (Exception e)
!         {
              throw new DataBackendException(
                  "Problem creating instance of class " + getClassName(),
--- 44,53 ----
      * @throws DataBackendException if the object could not be instantiated.
      */
!     public Group getGroupInstance() throws DataBackendException {
          Group group;
!         try {
              group = (Group) Class.forName(getClassName()).newInstance();
          }
!         catch (Exception e) {
              throw new DataBackendException(
                  "Problem creating instance of class " + getClassName(),
***************
*** 77,82 ****
      	* @throws DataBackendException if the object could not be instantiated.
      	*/
!     public Group getGroupInstance(String groupName) throws DataBackendException
!     {
          Group group = getGroupInstance();
          group.setName(groupName);
--- 69,73 ----
      	* @throws DataBackendException if the object could not be instantiated.
      	*/
!     public Group getGroupInstance(String groupName) throws DataBackendException {
          Group group = getGroupInstance();
          group.setName(groupName);
***************
*** 94,104 ****
       */
      public Group getGroupByName(String name)
!         throws DataBackendException, UnknownEntityException
!     {
          Group group = getAllGroups().getGroupByName(name);
!         if (group == null)
!         {
              throw new UnknownEntityException("The specified group does not exist");
          }
          return group;
      }
--- 85,99 ----
       */
      public Group getGroupByName(String name)
!         throws DataBackendException, UnknownEntityException, EntityDisabledException {
          Group group = getAllGroups().getGroupByName(name);
!         
!         if (group == null) {
              throw new UnknownEntityException("The specified group does not exist");
          }
+         
+         if (group.isDisabled()) {
+         	throw new EntityDisabledException("Group is disabled");
+         }
+         
          return group;
      }
***************
*** 116,126 ****
       */
      public Group getGroupById(Object id)
!         throws DataBackendException, UnknownEntityException
!     {
          Group group = getAllGroups().getGroupById(id);
!         if (group == null)
!         {
              throw new UnknownEntityException("The specified group does not exist");
          }
          return group;
      }
--- 111,124 ----
       */
      public Group getGroupById(Object id)
!         throws DataBackendException, UnknownEntityException, EntityDisabledException {
          Group group = getAllGroups().getGroupById(id);
!         if (group == null) {
              throw new UnknownEntityException("The specified group does not exist");
          }
+         
+         if (group.isDisabled()) {
+         	throw new EntityDisabledException("Group is disabled");
+         }
+         
          return group;
      }
***************
*** 136,162 ****
      	*/
      public synchronized Group addGroup(Group group)
!         throws DataBackendException, EntityExistsException
!     {
!         boolean groupExists = false;
!         if (StringUtils.isEmpty(group.getName()))
!         {
              throw new DataBackendException("Could not create a group with empty name!");
          }
-         if (group.getId() != null)
-         {
-             throw new DataBackendException("Could not create a group with an id!");
-         }
-         groupExists = checkExists(group);
-         if (!groupExists)
-         {
  
!             // return the object with correct id
!             return persistNewGroup(group);
!         }
!         else
!         {
!             throw new EntityExistsException(
!                 "Group '" + group + "' already exists");
          }
      }
      
--- 134,148 ----
      	*/
      public synchronized Group addGroup(Group group)
!         throws DataBackendException, EntityExistsException {
!         if (StringUtils.isEmpty(group.getName())) {
              throw new DataBackendException("Could not create a group with empty name!");
          }
  
!         if (checkExists(group)) {
! 	        throw new EntityExistsException(
! 	                "Group '" + group + "' is unavailable");
          }
+ 
+         return persistNewGroup(group);
      }
      
***************
*** 171,176 ****
  	*         the data backend.
  	*/
! 	public boolean checkExists(Group group) throws DataBackendException
! 	{
  	    return checkExists(group.getName());
  	}      
--- 157,161 ----
  	*         the data backend.
  	*/
! 	public boolean checkExists(Group group) throws DataBackendException	{
  	    return checkExists(group.getName());
  	}      

Index: AbstractPermissionManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi/AbstractPermissionManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** AbstractPermissionManager.java	14 Nov 2005 18:20:48 -0000	1.1
--- AbstractPermissionManager.java	18 Mar 2006 16:19:37 -0000	1.2
***************
*** 1,3 ****
--- 1,4 ----
  package org.apache.fulcrum.security.spi;
+ 
  /*
   *  Copyright 2001-2004 The Apache Software Foundation
***************
*** 16,171 ****
   */
  import org.apache.commons.lang.StringUtils;
- import org.apache.commons.logging.Log;
- import org.apache.commons.logging.LogFactory;
  import org.apache.fulcrum.security.PermissionManager;
  import org.apache.fulcrum.security.entity.Permission;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  
  /**
!  * This implementation keeps all objects in memory. This is mostly meant to help with testing and
!  * prototyping of ideas.
   * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
!  * @version $Id$
   */
! public abstract class AbstractPermissionManager extends AbstractEntityManager implements PermissionManager
! {
!     /** Logging */
!     private static Log log = LogFactory.getLog(AbstractPermissionManager.class);
!     
! 	protected abstract Permission persistNewPermission(Permission permission) throws DataBackendException;
  
!     /**
  	 * Construct a blank Permission object.
  	 * 
! 	 * This method calls getPermissionClass, and then creates a new object using the default
! 	 * constructor.
  	 * 
  	 * @return an object implementing Permission interface.
! 	 * @throws UnknownEntityException if the object could not be instantiated.
  	 */
!     public Permission getPermissionInstance() throws UnknownEntityException
!     {
!         Permission permission;
!         try
!         {
! 			permission = (Permission) Class.forName(getClassName()).newInstance();
!         }
!         catch (Exception e)
!         {
!             throw new UnknownEntityException(
!                 "Failed to instantiate a Permission implementation object",
!                 e);
!         }
!         return permission;
!     }
!     /**
  	 * Construct a blank Permission object.
  	 * 
! 	 * This method calls getPermissionClass, and then creates a new object using the default
! 	 * constructor.
  	 * 
! 	 * @param permName The name of the permission.
  	 * 
  	 * @return an object implementing Permission interface.
! 	 * @throws UnknownEntityException if the object could not be instantiated.
  	 */
!     public Permission getPermissionInstance(String permName) throws UnknownEntityException
!     {
!         Permission perm = getPermissionInstance();
!         perm.setName(permName);
!         return perm;
!     }
!     /**
  	 * Retrieve a Permission object with specified name.
  	 * 
! 	 * @param name the name of the Permission.
  	 * @return an object representing the Permission with specified name.
! 	 * @throws DataBackendException if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException if the permission does not exist.
  	 */
!     public Permission getPermissionByName(String name)
!         throws DataBackendException, UnknownEntityException
!     {
!         Permission permission = getAllPermissions().getPermissionByName(name);
!         if (permission == null)
!         {
!             throw new UnknownEntityException("The specified permission does not exist");
!         }
!         return permission;
!     }
!     /**
  	 * Retrieve a Permission object with specified Id.
  	 * 
! 	 * @param name the name of the Permission.
  	 * 
  	 * @return an object representing the Permission with specified name.
  	 * 
! 	 * @throws UnknownEntityException if the permission does not exist in the database.
! 	 * @throws DataBackendException if there is a problem accessing the storage.
  	 */
!     public Permission getPermissionById(Object id)
!         throws DataBackendException, UnknownEntityException
!     {
!         Permission permission = getAllPermissions().getPermissionById(id);
!         if (permission == null)
!         {
!             throw new UnknownEntityException("The specified permission does not exist");
!         }
!         return permission;
!     }
!         /**
  	 * Creates a new permission with specified attributes.
  	 * 
! 	 * @param permission the object describing the permission to be created.
  	 * @return a new Permission object that has id set up properly.
! 	 * @throws DataBackendException if there was an error accessing the data backend.
! 	 * @throws EntityExistsException if the permission already exists.
  	 */
!     public synchronized Permission addPermission(Permission permission)
!         throws DataBackendException, EntityExistsException
!     {
!         boolean permissionExists = false;
!         if (StringUtils.isEmpty(permission.getName()))
!         {
!             throw new DataBackendException("Could not create a permission with empty name!");
!         }
!         if (permission.getId() != null)
!         {
!             throw new DataBackendException("Could not create a permission with an id!");
!         }
!         try
!         {
!             permissionExists = checkExists(permission);
!             if (!permissionExists)
!             {
!                return persistNewPermission(permission);
!             }
!         }
!         catch (Exception e)
!         {
!             throw new DataBackendException("addPermission(Permission) failed", e);
!         }
!         // the only way we could get here without return/throw tirggered
!         // is that the permissionExists was true.
!         throw new EntityExistsException("Permission '" + permission + "' already exists");
!     }
!    
!     /**
! 	* Check whether a specifieds permission exists.
! 	*
! 	* The name is used for looking up the permission
! 	*
! 	* @param role The permission to be checked.
! 	* @return true if the specified permission exists
! 	* @throws DataBackendException if there was an error accessing
! 	*         the data backend.
! 	*/
! 	public boolean checkExists(Permission permission) throws DataBackendException
! 	{
! 	    return checkExists(permission.getName());
! 	}  
!    
  }
--- 17,176 ----
   */
  import org.apache.commons.lang.StringUtils;
  import org.apache.fulcrum.security.PermissionManager;
  import org.apache.fulcrum.security.entity.Permission;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  
  /**
!  * This implementation keeps all objects in memory. This is mostly meant to help
!  * with testing and prototyping of ideas.
   * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
!  * @version $Id: AbstractPermissionManager.java,v 1.1 2005/11/14 18:20:48
!  *          bgidley Exp $
   */
! public abstract class AbstractPermissionManager extends AbstractEntityManager
! 		implements PermissionManager {
! 	protected abstract Permission persistNewPermission(Permission permission)
! 			throws DataBackendException;
  
! 	/**
  	 * Construct a blank Permission object.
  	 * 
! 	 * This method calls getPermissionClass, and then creates a new object using
! 	 * the default constructor.
  	 * 
  	 * @return an object implementing Permission interface.
! 	 * @throws UnknownEntityException
! 	 *             if the object could not be instantiated.
  	 */
! 	public Permission getPermissionInstance() throws UnknownEntityException {
! 		Permission permission;
! 		try {
! 			permission = (Permission) Class.forName(getClassName())
! 					.newInstance();
! 		} catch (Exception e) {
! 			throw new UnknownEntityException(
! 					"Failed to instantiate a Permission implementation object",
! 					e);
! 		}
! 		return permission;
! 	}
! 
! 	/**
  	 * Construct a blank Permission object.
  	 * 
! 	 * This method calls getPermissionClass, and then creates a new object using
! 	 * the default constructor.
  	 * 
! 	 * @param permName
! 	 *            The name of the permission.
  	 * 
  	 * @return an object implementing Permission interface.
! 	 * @throws UnknownEntityException
! 	 *             if the object could not be instantiated.
  	 */
! 	public Permission getPermissionInstance(String permName)
! 			throws UnknownEntityException {
! 		Permission perm = getPermissionInstance();
! 		perm.setName(permName);
! 		return perm;
! 	}
! 
! 	/**
  	 * Retrieve a Permission object with specified name.
  	 * 
! 	 * @param name
! 	 *            the name of the Permission.
  	 * @return an object representing the Permission with specified name.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the permission does not exist.
  	 */
! 	public Permission getPermissionByName(String name)
! 			throws DataBackendException, UnknownEntityException,
! 			EntityDisabledException {
! 		Permission permission = getAllPermissions().getPermissionByName(name);
! 		if (permission == null) {
! 			throw new UnknownEntityException(
! 					"The specified permission does not exist");
! 		}
! 
! 		if (permission.isDisabled()) {
! 			throw new EntityDisabledException("Permission is disabled");
! 		}
! 		return permission;
! 	}
! 
! 	/**
  	 * Retrieve a Permission object with specified Id.
  	 * 
! 	 * @param name
! 	 *            the name of the Permission.
  	 * 
  	 * @return an object representing the Permission with specified name.
  	 * 
! 	 * @throws UnknownEntityException
! 	 *             if the permission does not exist in the database.
! 	 * @throws DataBackendException
! 	 *             if there is a problem accessing the storage.
  	 */
! 	public Permission getPermissionById(Object id) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException {
! 		Permission permission = getAllPermissions().getPermissionById(id);
! 		if (permission == null) {
! 			throw new UnknownEntityException(
! 					"The specified permission does not exist");
! 		}
! 		if (permission.isDisabled()) {
! 			throw new EntityDisabledException("Permission is disabled");
! 		}
! 		return permission;
! 	}
! 
! 	/**
  	 * Creates a new permission with specified attributes.
  	 * 
! 	 * @param permission
! 	 *            the object describing the permission to be created.
  	 * @return a new Permission object that has id set up properly.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws EntityExistsException
! 	 *             if the permission already exists.
  	 */
! 	public synchronized Permission addPermission(Permission permission)
! 			throws DataBackendException, EntityExistsException {
! 		if (StringUtils.isEmpty(permission.getName())) {
! 			throw new DataBackendException(
! 					"Could not create a permission with empty name!");
! 		}
! 		
! 		if (checkExists(permission)) {
! 			throw new EntityExistsException("Permission '" + permission
! 					+ "' is unavailable");			
! 		}
! 		
! 		return persistNewPermission(permission);
! 	}
! 
! 	/**
! 	 * Check whether a specifieds permission exists.
! 	 * 
! 	 * The name is used for looking up the permission
! 	 * 
! 	 * @param role
! 	 *            The permission to be checked.
! 	 * @return true if the specified permission exists
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	public boolean checkExists(Permission permission)
! 			throws DataBackendException {
! 		return checkExists(permission.getName());
! 	}
! 
  }

Index: AbstractUserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi/AbstractUserManager.java,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** AbstractUserManager.java	24 Jan 2006 11:38:55 -0000	1.7
--- AbstractUserManager.java	18 Mar 2006 16:19:37 -0000	1.8
***************
*** 28,31 ****
--- 28,32 ----
  import org.apache.fulcrum.security.model.ACLFactory;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.PasswordExpiredException;
***************
*** 110,114 ****
  	public User getUser(String userName, String password)
  			throws PasswordMismatchException, UnknownEntityException,
! 			UserLockedException, DataBackendException, PasswordExpiredException {
  		User user = getUser(userName);
  		
--- 111,115 ----
  	public User getUser(String userName, String password)
  			throws PasswordMismatchException, UnknownEntityException,
! 			UserLockedException, DataBackendException, PasswordExpiredException, EntityDisabledException {
  		User user = getUser(userName);
  		
***************
*** 127,132 ****
  
  	public User getUser(String name) throws DataBackendException,
! 			UnknownEntityException {
  		User user = getAllUsers().getUserByName(name);
  		if (user == null) {
  			throw new UnknownEntityException(
--- 128,138 ----
  
  	public User getUser(String name) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException {
  		User user = getAllUsers().getUserByName(name);
+ 		
+ 		if (user.isDisabled()) {
+ 			throw new EntityDisabledException("The specified user is unavailable");
+ 		}
+ 		
  		if (user == null) {
  			throw new UnknownEntityException(
***************
*** 150,155 ****
  	 */
  	public User getUserById(Object id) throws DataBackendException,
! 			UnknownEntityException {
  		User user = getAllUsers().getUserById(id);
  		if (user == null) {
  			throw new UnknownEntityException(
--- 156,166 ----
  	 */
  	public User getUserById(Object id) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException {
  		User user = getAllUsers().getUserById(id);
+ 
+ 		
+ 		if (user.isDisabled()) {
+ 			throw new EntityDisabledException("The specified user is unavailable");
+ 		}
  		if (user == null) {
  			throw new UnknownEntityException(
***************
*** 172,179 ****
  	 * @exception DataBackendException
  	 *                if there is a problem accessing the storage.
  	 */
  	public void authenticate(User user, String password)
  			throws PasswordMismatchException, UnknownEntityException, 
! 			DataBackendException, UserLockedException {
  
  		if (!checkExists(user)) {
--- 183,191 ----
  	 * @exception DataBackendException
  	 *                if there is a problem accessing the storage.
+ 	 * @throws EntityDisabledException 
  	 */
  	public void authenticate(User user, String password)
  			throws PasswordMismatchException, UnknownEntityException, 
! 			DataBackendException, UserLockedException, EntityDisabledException {
  
  		if (!checkExists(user)) {
***************
*** 182,185 ****
--- 194,201 ----
  		}
  
+ 		if (user.isDisabled()) {
+ 			throw new EntityDisabledException("User is disabled");
+ 		}
+ 		
  		if (user.getLockTime() != 0) {
  			long elapsedTime = user.getLockTime() + (HOURS_TO_MILLIS * lockResetHours);
***************
*** 225,229 ****
  	public void changePassword(User user, String oldPassword, String newPassword)
  			throws PasswordMismatchException, UserLockedException, 
! 			       UnknownEntityException, DataBackendException, PasswordHistoryException {
  		authenticate(user, oldPassword);
  		forcePassword(user, newPassword);
--- 241,245 ----
  	public void changePassword(User user, String oldPassword, String newPassword)
  			throws PasswordMismatchException, UserLockedException, 
! 			       UnknownEntityException, DataBackendException, PasswordHistoryException, EntityDisabledException {
  		authenticate(user, oldPassword);
  		forcePassword(user, newPassword);
***************
*** 242,245 ****
--- 258,262 ----
  	 * Created on Jan 16, 2006
  	 */
+ 	@SuppressWarnings("unchecked")
  	private void cyclePassword(User user, String newPassword)
  			throws DataBackendException, PasswordHistoryException {
***************
*** 369,386 ****
  					"Could not create a user with empty name!");
  		}
  		if (checkExists(user)) {
  			throw new EntityExistsException("The account '" + user.getName()
! 					+ "' already exists");
  		}
  		user.setPassword(authenticator.getCryptoPassword(password));
  		setPasswordExpiry(user);
  		user.setLockTime(0);
  		user.setLoginAttempts(0);
! 		try {
! 			return persistNewUser(user);
! 		} catch (Exception e) {
! 			throw new DataBackendException("Failed to create account '"
! 					+ user.getName() + "'", e);
! 		}
  	}
  
--- 386,401 ----
  					"Could not create a user with empty name!");
  		}
+ 		
  		if (checkExists(user)) {
  			throw new EntityExistsException("The account '" + user.getName()
! 					+ "' is unavailable");
  		}
+ 		
  		user.setPassword(authenticator.getCryptoPassword(password));
  		setPasswordExpiry(user);
  		user.setLockTime(0);
  		user.setLoginAttempts(0);
! 
! 		return persistNewUser(user);
  	}
  



From nobody at sheep.berlios.de  Sat Mar 18 18:18:18 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:18 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator CryptoAuthenticator.java,1.3,1.4
Message-ID: <200603181718.k2IHIIb18121@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/authenticator

Modified Files:
	CryptoAuthenticator.java 
Log Message:
Added functionality to disable users

Index: CryptoAuthenticator.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator/CryptoAuthenticator.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** CryptoAuthenticator.java	24 Jan 2006 11:38:54 -0000	1.3
--- CryptoAuthenticator.java	18 Mar 2006 16:19:38 -0000	1.4
***************
*** 16,26 ****
   *  limitations under the License.
   */
- import java.security.NoSuchAlgorithmException;
- 
  import org.apache.fulcrum.crypto.CryptoAlgorithm;
  import org.apache.fulcrum.crypto.CryptoService;
  import org.apache.fulcrum.security.entity.User;
  import org.apache.fulcrum.security.util.DataBackendException;
- import org.apache.fulcrum.security.util.UnknownEntityException;
  
  /**
--- 16,23 ----



From nobody at sheep.berlios.de  Sat Mar 18 18:18:17 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:17 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind pom.xml,1.15,1.16
Message-ID: <200603181718.k2IHIHb18114@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind
In directory sheep:/tmp/cvs-serv18372

Modified Files:
	pom.xml 
Log Message:
Added functionality to disable users

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/pom.xml,v
retrieving revision 1.15
retrieving revision 1.16
diff -C2 -d -r1.15 -r1.16
*** pom.xml	16 Mar 2006 13:02:08 -0000	1.15
--- pom.xml	18 Mar 2006 16:19:38 -0000	1.16
***************
*** 7,11 ****
    <packaging>jar</packaging>
    <name>Fulcrum Security for Hivemind</name>
!   <version>1.9</version>
    <description>A port of Fulcrum Security to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>
--- 7,11 ----
    <packaging>jar</packaging>
    <name>Fulcrum Security for Hivemind</name>
!   <version>1.10</version>
    <description>A port of Fulcrum Security to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>



From nobody at sheep.berlios.de  Sat Mar 18 18:18:18 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:18 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity/impl SecurityEntityImpl.java,1.1,1.2
Message-ID: <200603181718.k2IHIIb18125@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity/impl
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/entity/impl

Modified Files:
	SecurityEntityImpl.java 
Log Message:
Added functionality to disable users

Index: SecurityEntityImpl.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity/impl/SecurityEntityImpl.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** SecurityEntityImpl.java	14 Nov 2005 18:20:50 -0000	1.1
--- SecurityEntityImpl.java	18 Mar 2006 16:19:39 -0000	1.2
***************
*** 32,35 ****
--- 32,37 ----
      private String name;
      private Object id;
+     private boolean disabled;
+     
      /**
       * @return
***************
*** 87,89 ****
--- 89,99 ----
          return HashCodeBuilder.reflectionHashCode(this);
      }
+     
+ 	public boolean isDisabled() {
+ 		return disabled;
+ 	}
+ 	
+ 	public void setDisabled(boolean disabled) {
+ 		this.disabled = disabled;
+ 	}
  }



From nobody at sheep.berlios.de  Sat Mar 18 18:18:18 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:18 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/META-INF MANIFEST.MF,NONE,1.1
Message-ID: <200603181718.k2IHIIb18129@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/META-INF
In directory sheep:/tmp/cvs-serv18372/src/main/java/META-INF

Added Files:
	MANIFEST.MF 
Log Message:
Added functionality to disable users

--- NEW FILE: MANIFEST.MF ---
Manifest-Version: 1.0
Class-Path: 




From nobody at sheep.berlios.de  Sat Mar 18 18:18:18 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:18 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/test AbstractDynamicModelManagerTest.java,1.2,1.3
Message-ID: <200603181718.k2IHIIb18132@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/test
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/model/dynamic/test

Modified Files:
	AbstractDynamicModelManagerTest.java 
Log Message:
Added functionality to disable users

Index: AbstractDynamicModelManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/test/AbstractDynamicModelManagerTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** AbstractDynamicModelManagerTest.java	15 Nov 2005 17:56:26 -0000	1.2
--- AbstractDynamicModelManagerTest.java	18 Mar 2006 16:19:39 -0000	1.3
***************
*** 21,30 ****
  import java.util.Set;
  
- import junit.framework.TestCase;
- 
  import org.apache.fulcrum.security.AbstractSecurityServiceTest;
- import org.apache.fulcrum.security.PermissionManager;
- import org.apache.fulcrum.security.RoleManager;
- import org.apache.fulcrum.security.SecurityService;
  import org.apache.fulcrum.security.entity.Group;
  import org.apache.fulcrum.security.entity.Permission;
--- 21,25 ----
***************
*** 231,235 ****
      }
  
!     public void testRetrieveingUsersByGroup() throws Exception {
          User user = getUserManager().getUserInstance("Joe3");
          getUserManager().addUser(user, "mc");
--- 226,231 ----
      }
  
!     @SuppressWarnings("unchecked")
! 	public void testRetrieveingUsersByGroup() throws Exception {
          User user = getUserManager().getUserInstance("Joe3");
          getUserManager().addUser(user, "mc");



From nobody at sheep.berlios.de  Sat Mar 18 18:18:17 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:17 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic DynamicAccessControlListImpl.java,1.1,1.2 DynamicACLFactory.java,1.1,1.2 AbstractDynamicModelManager.java,1.1,1.2
Message-ID: <200603181718.k2IHIHb18110@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/model/dynamic

Modified Files:
	DynamicAccessControlListImpl.java DynamicACLFactory.java 
	AbstractDynamicModelManager.java 
Log Message:
Added functionality to disable users

Index: DynamicAccessControlListImpl.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/DynamicAccessControlListImpl.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** DynamicAccessControlListImpl.java	14 Nov 2005 18:20:46 -0000	1.1
--- DynamicAccessControlListImpl.java	18 Mar 2006 16:19:38 -0000	1.2
***************
*** 36,40 ****
  public class DynamicAccessControlListImpl implements DynamicAccessControlList
  {
!     /** The sets of roles that the user has in different groups */
      private Map roleSets;
      /** The sets of permissions that the user has in different groups */
--- 36,41 ----
  public class DynamicAccessControlListImpl implements DynamicAccessControlList
  {
! 	private static final long serialVersionUID = -5180551537096244085L;
! 	/** The sets of roles that the user has in different groups */
      private Map roleSets;
      /** The sets of permissions that the user has in different groups */

Index: DynamicACLFactory.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/DynamicACLFactory.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** DynamicACLFactory.java	14 Nov 2005 18:20:46 -0000	1.1
--- DynamicACLFactory.java	18 Mar 2006 16:19:38 -0000	1.2
***************
*** 22,27 ****
  import java.util.Set;
  
- import org.apache.commons.logging.Log;
- import org.apache.commons.logging.LogFactory;
  import org.apache.fulcrum.security.acl.AccessControlList;
  import org.apache.fulcrum.security.entity.Group;
--- 22,25 ----
***************
*** 44,51 ****
   */
  public class DynamicACLFactory extends AbstractManager implements ACLFactory {
- 
- 	/** Logging */
- 	private static Log log = LogFactory.getLog(DynamicACLFactory.class);
- 
  	/**
  	 * Construct a new ACL object.
--- 42,45 ----
***************
*** 65,70 ****
  	private AccessControlList getAclInstance(Map roles, Map permissions)
  			throws UnknownEntityException {
- 		Object[] objects = { roles, permissions };
- 		String[] signatures = { Map.class.getName(), Map.class.getName() };
  		AccessControlList accessControlList;
  		try {
--- 59,62 ----
***************
*** 85,88 ****
--- 77,81 ----
  	}
  
+ 	@SuppressWarnings("unchecked")
  	public AccessControlList getAccessControlList(User user) {
  		Map roleSets = new HashMap();
***************
*** 107,110 ****
--- 100,104 ----
  	}
  
+ 	@SuppressWarnings("unchecked")
  	public void addDelegators(DynamicUser user, Set users) {
  		for (Iterator iter = user.getDelegators().iterator(); iter.hasNext();) {
***************
*** 127,130 ****
--- 121,125 ----
  	 * @param permissionSets
  	 */
+ 	@SuppressWarnings("unchecked")
  	private void addRolesAndPermissions(User user, Map roleSets,
  			Map permissionSets) {

Index: AbstractDynamicModelManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/AbstractDynamicModelManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** AbstractDynamicModelManager.java	14 Nov 2005 18:20:46 -0000	1.1
--- AbstractDynamicModelManager.java	18 Mar 2006 16:19:38 -0000	1.2
***************
*** 172,175 ****
--- 172,176 ----
  	 * would not need to do anything.
  	 */
+ 	@SuppressWarnings("unchecked")
  	public void addDelegate(User delegator, User delegatee)
  			throws DataBackendException, UnknownEntityException {



From nobody at sheep.berlios.de  Sat Mar 18 18:18:17 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:17 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/.settings org.eclipse.wst.common.project.facet.core.xml,NONE,1.1 .component,NONE,1.1 org.eclipse.jdt.core.prefs,1.2,1.3
Message-ID: <200603181718.k2IHIHb18105@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/.settings
In directory sheep:/tmp/cvs-serv18372/.settings

Modified Files:
	org.eclipse.jdt.core.prefs 
Added Files:
	org.eclipse.wst.common.project.facet.core.xml .component 
Log Message:
Added functionality to disable users

--- NEW FILE: org.eclipse.wst.common.project.facet.core.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<faceted-project>
  <fixed facet="jst.java"/>
  <fixed facet="jst.utility"/>
  <installed facet="jst.java" version="5.0"/>
  <installed facet="jst.utility" version="1.0"/>
</faceted-project>

--- NEW FILE: .component ---
<?xml version="1.0" encoding="UTF-8"?>
<project-modules id="moduleCoreId">
  <wb-module deploy-name="fulcrum-security">
    <module-type module-type-id="jst.utility">
    </module-type>
    <wb-resource deploy-path="/" source-path="src/main/java"/>
    <wb-resource deploy-path="/" source-path="src/main/resources"/>
<wb-resource deploy-path="/" source-path="/src/main/java"/>
<wb-resource deploy-path="/" source-path="/src/main/resources"/>
<wb-resource deploy-path="/" source-path="/src/test/java"/>
<property name="java-output-path" value="/target/classes"/>
  </wb-module>
</project-modules>

Index: org.eclipse.jdt.core.prefs
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/.settings/org.eclipse.jdt.core.prefs,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** org.eclipse.jdt.core.prefs	15 Nov 2005 09:30:29 -0000	1.2
--- org.eclipse.jdt.core.prefs	18 Mar 2006 16:19:37 -0000	1.3
***************
*** 1,3 ****
! #Tue Nov 15 09:17:09 GMT 2005
  org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
  eclipse.preferences.version=1
--- 1,3 ----
! #Sat Mar 18 10:59:16 GMT 2006
  org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
  eclipse.preferences.version=1



From nobody at sheep.berlios.de  Sat Mar 18 18:18:46 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:46 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/acl AccessControlException.java,1.1,1.2
Message-ID: <200603181718.k2IHIkb18145@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/acl
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/acl

Modified Files:
	AccessControlException.java 
Log Message:
Added functionality to disable users

Index: AccessControlException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/acl/AccessControlException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** AccessControlException.java	14 Nov 2005 18:20:49 -0000	1.1
--- AccessControlException.java	18 Mar 2006 16:19:37 -0000	1.2
***************
*** 27,31 ****
      extends TurbineSecurityException
  {
!     /**
       * Construct an AccessControlException with specified detail message.
       *
--- 27,33 ----
      extends TurbineSecurityException
  {
! 	private static final long serialVersionUID = 1053699577313013739L;
! 
! 	/**
       * Construct an AccessControlException with specified detail message.
       *



From nobody at sheep.berlios.de  Sat Mar 18 18:18:45 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:45 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity DynamicRole.java,1.1,1.2 DynamicGroup.java,1.1,1.2 DynamicPermission.java,1.1,1.2 DynamicUser.java,1.3,1.4
Message-ID: <200603181718.k2IHIjb18142@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/model/dynamic/entity

Modified Files:
	DynamicRole.java DynamicGroup.java DynamicPermission.java 
	DynamicUser.java 
Log Message:
Added functionality to disable users

Index: DynamicRole.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity/DynamicRole.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** DynamicRole.java	14 Nov 2005 18:20:50 -0000	1.1
--- DynamicRole.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 138,140 ****
          return groupSet;
      }
! }
--- 138,140 ----
          return groupSet;
      }
! }
\ No newline at end of file

Index: DynamicGroup.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity/DynamicGroup.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** DynamicGroup.java	14 Nov 2005 18:20:50 -0000	1.1
--- DynamicGroup.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 37,40 ****
--- 37,41 ----
      private Set roleSet = new RoleSet();
      private Set userSet = new UserSet();
+     
      /**
       * @return
***************
*** 125,127 ****
  		return roleSet;
  	}    
! }
--- 126,128 ----
  		return roleSet;
  	}    
! }
\ No newline at end of file

Index: DynamicPermission.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity/DynamicPermission.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** DynamicPermission.java	14 Nov 2005 18:20:50 -0000	1.1
--- DynamicPermission.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 33,40 ****
  public class DynamicPermission extends SecurityEntityImpl implements Permission
  {
- 
      private Set roleSet = new RoleSet();
  
- 
      /**
       * @return
--- 33,38 ----
***************
*** 90,93 ****
          return roleSet;
      }
! 
! }
--- 88,90 ----
          return roleSet;
      }
! }
\ No newline at end of file

Index: DynamicUser.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity/DynamicUser.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** DynamicUser.java	24 Jan 2006 11:38:54 -0000	1.3
--- DynamicUser.java	18 Mar 2006 16:19:36 -0000	1.4
***************
*** 41,47 ****
  public class DynamicUser extends SecurityEntityImpl implements User
  {
!     private String password;
      private Date passwordExpiryDate;
!     private long locked;
      private int loginAttempts;
          
--- 41,48 ----
  public class DynamicUser extends SecurityEntityImpl implements User
  {
! 	private static final long serialVersionUID = -7298282701583455184L;
! 	private String password;
      private Date passwordExpiryDate;
!     private long lockTime;
      private int loginAttempts;
          
***************
*** 147,151 ****
  	 */
  	public long getLockTime() {
! 		return locked;
  	}
  
--- 148,152 ----
  	 */
  	public long getLockTime() {
! 		return lockTime;
  	}
  
***************
*** 157,162 ****
  	 * Created on Jan 11, 2006
  	 */
! 	public void setLockTime(long locked) {
! 		this.locked = locked;
  	}
  	
--- 158,163 ----
  	 * Created on Jan 11, 2006
  	 */
! 	public void setLockTime(long lockTime) {
! 		this.lockTime = lockTime;
  	}
  	
***************
*** 212,214 ****
  		this.loginAttempts = loginAttempts;
  	}
! }
--- 213,215 ----
  		this.loginAttempts = loginAttempts;
  	}
! }
\ No newline at end of file



From nobody at sheep.berlios.de  Sat Mar 18 18:18:46 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:46 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util EntityDisabledException.java,NONE,1.1 UnknownEntityException.java,1.1,1.2 PasswordMismatchException.java,1.1,1.2 DataBackendException.java,1.1,1.2 PermissionSet.java,1.1,1.2 RoleSet.java,1.1,1.2 SecuritySet.java,1.1,1.2 UserLockedException.java,1.1,1.2 UserSet.java,1.1,1.2 PasswordHistoryException.java,1.1,1.2 TurbineSecurityException.java,1.1,1.2 PasswordExpiredException.java,1.1,1.2 GroupSet.java,1.1,1.2 EntityExistsException.java,1.1,1.2
Message-ID: <200603181718.k2IHIkb18143@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/util

Modified Files:
	UnknownEntityException.java PasswordMismatchException.java 
	DataBackendException.java PermissionSet.java RoleSet.java 
	SecuritySet.java UserLockedException.java UserSet.java 
	PasswordHistoryException.java TurbineSecurityException.java 
	PasswordExpiredException.java GroupSet.java 
	EntityExistsException.java 
Added Files:
	EntityDisabledException.java 
Log Message:
Added functionality to disable users

--- NEW FILE: EntityDisabledException.java ---
package org.apache.fulcrum.security.util;

/**
 * Thrown when a locked user attempts to authenticate.
 * 
 * @author richard.brooks
 * Created on Jan 13, 2006
 */

public class EntityDisabledException extends TurbineSecurityException {

	private static final long serialVersionUID = 3325662922250048072L;

	/**
     * Construct a UserDisabledException with specified detail message.
     * @param msg The detail message.
     *
     * @author richard.brooks
     * Created on Mar 17, 2006
     */
	public EntityDisabledException(String msg)
    {
        super(msg);
    }
}

Index: UnknownEntityException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/UnknownEntityException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** UnknownEntityException.java	14 Nov 2005 18:20:45 -0000	1.1
--- UnknownEntityException.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 27,31 ****
      extends TurbineSecurityException
  {
!     /**
       * Construct an UnknownEntityException with specified detail message.
       *
--- 27,33 ----
      extends TurbineSecurityException
  {
! 	private static final long serialVersionUID = 6902116254535728203L;
! 
! 	/**
       * Construct an UnknownEntityException with specified detail message.
       *

Index: PasswordMismatchException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/PasswordMismatchException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** PasswordMismatchException.java	14 Nov 2005 18:20:45 -0000	1.1
--- PasswordMismatchException.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 23,26 ****
--- 23,27 ----
   * @version $Id$
   */
+ @SuppressWarnings("serial")
  public class PasswordMismatchException
      extends TurbineSecurityException

Index: DataBackendException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/DataBackendException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** DataBackendException.java	14 Nov 2005 18:20:45 -0000	1.1
--- DataBackendException.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 27,31 ****
      extends TurbineSecurityException
  {
!     /**
       * Construct an DataBackendException with specified detail message.
       *
--- 27,33 ----
      extends TurbineSecurityException
  {
! 	private static final long serialVersionUID = 4037968846303489743L;
! 
! 	/**
       * Construct an DataBackendException with specified detail message.
       *

Index: PermissionSet.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/PermissionSet.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** PermissionSet.java	14 Nov 2005 18:20:45 -0000	1.1
--- PermissionSet.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 37,41 ****
      extends SecuritySet
  {
!     /**
       * Constructs an empty PermissionSet
       */
--- 37,43 ----
      extends SecuritySet
  {
! 	private static final long serialVersionUID = 4532868341893924965L;
! 
! 	/**
       * Constructs an empty PermissionSet
       */
***************
*** 66,70 ****
       * already contained the Permission.
       */
!     public boolean add(Permission permission)
      {
          if (contains(permission)){
--- 68,73 ----
       * already contained the Permission.
       */
!     @SuppressWarnings("unchecked")
! 	public boolean add(Permission permission)
      {
          if (contains(permission)){
***************
*** 196,200 ****
       * @return An Array of Permission Objects.
       */
!     public Permission[] getPermissionsArray()
      {
          return (Permission[]) getSet().toArray(new Permission[0]);
--- 199,204 ----
       * @return An Array of Permission Objects.
       */
!     @SuppressWarnings("unchecked")
! 	public Permission[] getPermissionsArray()
      {
          return (Permission[]) getSet().toArray(new Permission[0]);

Index: RoleSet.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/RoleSet.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** RoleSet.java	14 Nov 2005 18:20:45 -0000	1.1
--- RoleSet.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 37,41 ****
          extends SecuritySet
  {
!     /**
       * Constructs an empty RoleSet
       */
--- 37,43 ----
          extends SecuritySet
  {
! 	private static final long serialVersionUID = -7878336668034575930L;
! 
! 	/**
       * Constructs an empty RoleSet
       */
***************
*** 66,70 ****
       * contained the Role.
       */
!     public boolean add(Role role)
      {
          if (contains(role)){
--- 68,73 ----
       * contained the Role.
       */
!     @SuppressWarnings("unchecked")
! 	public boolean add(Role role)
      {
          if (contains(role)){
***************
*** 194,198 ****
       * @return An Array of Role objects.
       */
!     public Role[] getRolesArray()
      {
          return (Role[]) getSet().toArray(new Role[0]);
--- 197,202 ----
       * @return An Array of Role objects.
       */
!     @SuppressWarnings("unchecked")
! 	public Role[] getRolesArray()
      {
          return (Role[]) getSet().toArray(new Role[0]);

Index: SecuritySet.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/SecuritySet.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** SecuritySet.java	14 Nov 2005 18:20:45 -0000	1.1
--- SecuritySet.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 70,74 ****
  	 *  
  	 */
!     public Set getSet()
      {
          return new HashSet(idMap.values());
--- 70,75 ----
  	 *  
  	 */
!     @SuppressWarnings("unchecked")
! 	public Set getSet()
      {
          return new HashSet(idMap.values());
***************
*** 79,83 ****
  	 * @return The Set of Names in this Object, backed by the actual data.
  	 */
!     public Set getNames()
      {
          Set names = new HashSet();
--- 80,85 ----
  	 * @return The Set of Names in this Object, backed by the actual data.
  	 */
!     @SuppressWarnings("unchecked")
! 	public Set getNames()
      {
          Set names = new HashSet();
***************
*** 254,258 ****
  	 * @see java.util.Collection#toArray(java.lang.Object[])
  	 */
!     public Object[] toArray(Object[] a)
      {
          return getSet().toArray(a);
--- 256,261 ----
  	 * @see java.util.Collection#toArray(java.lang.Object[])
  	 */
!     @SuppressWarnings("unchecked")
! 	public Object[] toArray(Object[] a)
      {
          return getSet().toArray(a);

Index: UserLockedException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/UserLockedException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** UserLockedException.java	17 Jan 2006 09:17:23 -0000	1.1
--- UserLockedException.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 10,13 ****
--- 10,15 ----
  public class UserLockedException extends TurbineSecurityException {
  
+ 	private static final long serialVersionUID = 8284553869426136480L;
+ 
  	/**
       * Construct a UserLockedException with specified detail message.

Index: UserSet.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/UserSet.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** UserSet.java	14 Nov 2005 18:20:45 -0000	1.1
--- UserSet.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 33,37 ****
          extends SecuritySet
  {
!     /**
       * Constructs an empty UserSet
       */
--- 33,39 ----
          extends SecuritySet
  {
! 	private static final long serialVersionUID = 4415634631270197073L;
! 
! 	/**
       * Constructs an empty UserSet
       */
***************
*** 62,66 ****
       * contained the User.
       */
!     public boolean add(User user)
      {
          if (contains(user)){
--- 64,69 ----
       * contained the User.
       */
!     @SuppressWarnings("unchecked")
! 	public boolean add(User user)
      {
          if (contains(user)){
***************
*** 193,197 ****
       * @return An Array of User objects.
       */
!     public User[] getUsersArray()
      {
          return (User[]) getSet().toArray(new User[0]);
--- 196,201 ----
       * @return An Array of User objects.
       */
!     @SuppressWarnings("unchecked")
! 	public User[] getUsersArray()
      {
          return (User[]) getSet().toArray(new User[0]);

Index: PasswordHistoryException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/PasswordHistoryException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** PasswordHistoryException.java	17 Jan 2006 09:17:23 -0000	1.1
--- PasswordHistoryException.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 10,13 ****
--- 10,15 ----
  public class PasswordHistoryException extends TurbineSecurityException {
  
+ 	private static final long serialVersionUID = -6489327035014664329L;
+ 
  	/**
       * Construct a PasswordHistoryException with specified detail message.

Index: TurbineSecurityException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/TurbineSecurityException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** TurbineSecurityException.java	14 Nov 2005 18:20:45 -0000	1.1
--- TurbineSecurityException.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 26,30 ****
      extends Exception
  {
!     /**
       * Construct an SecurityException with specified detail message.
       *
--- 26,32 ----
      extends Exception
  {
! 	private static final long serialVersionUID = 1768881827472257142L;
! 
! 	/**
       * Construct an SecurityException with specified detail message.
       *

Index: PasswordExpiredException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/PasswordExpiredException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** PasswordExpiredException.java	17 Jan 2006 09:17:23 -0000	1.1
--- PasswordExpiredException.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 9,12 ****
--- 9,14 ----
  
  public class PasswordExpiredException extends TurbineSecurityException {
+ 	private static final long serialVersionUID = 7248522630844763772L;
+ 
  	/**
       * Construct a PasswordExpiredException with specified detail message.

Index: GroupSet.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/GroupSet.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** GroupSet.java	14 Nov 2005 18:20:45 -0000	1.1
--- GroupSet.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 37,41 ****
          extends SecuritySet
  {
!     /**
       * Constructs an empty GroupSet
       */
--- 37,43 ----
          extends SecuritySet
  {
! 	private static final long serialVersionUID = 6882240173053961011L;
! 
! 	/**
       * Constructs an empty GroupSet
       */
***************
*** 66,70 ****
       * already contained the Group.
       */
!     public boolean add(Group group)
      {
          if (contains(group)){
--- 68,73 ----
       * already contained the Group.
       */
!     @SuppressWarnings("unchecked")
! 	public boolean add(Group group)
      {
          if (contains(group)){
***************
*** 196,200 ****
       * @return An Array of Group objects.
       */
!     public Group[] getGroupsArray()
      {
          return (Group[]) getSet().toArray(new Group[0]);
--- 199,204 ----
       * @return An Array of Group objects.
       */
!     @SuppressWarnings("unchecked")
! 	public Group[] getGroupsArray()
      {
          return (Group[]) getSet().toArray(new Group[0]);

Index: EntityExistsException.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util/EntityExistsException.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** EntityExistsException.java	14 Nov 2005 18:20:45 -0000	1.1
--- EntityExistsException.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 27,31 ****
      extends TurbineSecurityException
  {
!     /**
       * Construct an EntityExistsException with specified detail message.
       *
--- 27,33 ----
      extends TurbineSecurityException
  {
! 	private static final long serialVersionUID = 7525944855557287853L;
! 
! 	/**
       * Construct an EntityExistsException with specified detail message.
       *



From nobody at sheep.berlios.de  Sat Mar 18 18:18:46 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:46 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test AbstractGroupManagerTest.java,1.1,1.2 AbstractRoleManagerTest.java,1.1,1.2 AbstractPermissionManagerTest.java,1.1,1.2 AbstractUserManagerTest.java,1.5,1.6
Message-ID: <200603181718.k2IHIkb18144@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/model/test

Modified Files:
	AbstractGroupManagerTest.java AbstractRoleManagerTest.java 
	AbstractPermissionManagerTest.java 
	AbstractUserManagerTest.java 
Log Message:
Added functionality to disable users

Index: AbstractGroupManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test/AbstractGroupManagerTest.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** AbstractGroupManagerTest.java	14 Nov 2005 18:20:50 -0000	1.1
--- AbstractGroupManagerTest.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 19,22 ****
--- 19,23 ----
  import org.apache.fulcrum.security.entity.Group;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicGroup;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.GroupSet;
***************
*** 29,38 ****
  public abstract class AbstractGroupManagerTest extends AbstractSecurityServiceTest
  {
-     
-     
      public void setUp() throws Exception{
          super.setUp();
      }
-     
   
      /*
--- 30,36 ----
***************
*** 45,48 ****
--- 43,47 ----
          assertTrue(group.getName() == null);
      }
+     
      /*
       * Class to test for Group getGroupInstance(String)
***************
*** 53,56 ****
--- 52,56 ----
          assertEquals("DOG_CATCHER".toLowerCase(), group.getName());
      }
+     
      public void testGetGroup() throws Exception
      {
***************
*** 60,63 ****
--- 60,64 ----
          assertEquals(group.getName(), group2.getName());
      }
+     
      public void testGetGroupByName() throws Exception
      {
***************
*** 69,72 ****
--- 70,74 ----
          assertEquals(group.getName(), group2.getName());
      }
+     
      public void testGetGroupById() throws Exception
      {
***************
*** 76,79 ****
--- 78,82 ----
          assertEquals(group.getName(), group2.getName());
      }
+     
      public void testGetAllGroups() throws Exception
      {
***************
*** 84,87 ****
--- 87,91 ----
          assertEquals(size + 1, groupSet.size());
      }
+     
      public void testRemoveGroup() throws Exception
      {
***************
*** 97,101 ****
          try
          {
!             Group group2 = getGroupManager().getGroupById(group.getId());
              fail("Should have thrown UEE");
          }
--- 101,105 ----
          try
          {
!             getGroupManager().getGroupById(group.getId());
              fail("Should have thrown UEE");
          }
***************
*** 106,109 ****
--- 110,133 ----
          assertEquals(size - 1, getGroupManager().getAllGroups().size());
      }
+     
+ 	public void testDisableGroup() throws Exception {
+         Group group = getGroupManager().getGroupInstance("CLEAN_KENNEL_L");
+         getGroupManager().addGroup(group);
+ 		getGroupManager().disableGroup(group);
+ 		try {
+ 			getGroupManager().getGroupByName(group.getName());
+ 			fail("Should have thrown EntityDisabledException");
+ 		} catch (EntityDisabledException ede) {
+ 			// brilliant!
+ 		}
+ 		
+ 		try {
+ 			getGroupManager().addGroup(group);
+ 			fail("Should have thrown EntityExistsException");
+ 		} catch (EntityExistsException eee) {
+ 			// brilliant!
+ 		}
+ 	}
+     
      public void testRenameGroup() throws Exception
      {
***************
*** 116,119 ****
--- 140,144 ----
          assertEquals(size, getGroupManager().getAllGroups().size());
      }
+     
      public void testCheckExists() throws Exception
      {
***************
*** 149,153 ****
              //good
          }
!     }     
      public void testAddGroup() throws Exception
      {
--- 174,179 ----
              //good
          }
!     }  
!     
      public void testAddGroup() throws Exception
      {

Index: AbstractRoleManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test/AbstractRoleManagerTest.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** AbstractRoleManagerTest.java	14 Nov 2005 18:20:50 -0000	1.1
--- AbstractRoleManagerTest.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 19,22 ****
--- 19,23 ----
  import org.apache.fulcrum.security.AbstractSecurityServiceTest;
  import org.apache.fulcrum.security.entity.Role;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.RoleSet;
***************
*** 94,98 ****
          getRoleManager().removeRole(role);
          try {
!             Role role2 = getRoleManager().getRoleById(role.getId());
              fail("Should have thrown UEE");
          } catch (UnknownEntityException uee) {
--- 95,99 ----
          getRoleManager().removeRole(role);
          try {
!             getRoleManager().getRoleById(role.getId());
              fail("Should have thrown UEE");
          } catch (UnknownEntityException uee) {
***************
*** 102,105 ****
--- 103,125 ----
      }
  
+ 	public void testDisableRole() throws Exception {
+         Role role = getRoleManager().getRoleInstance("CLEAN_KENNEL_L");
+         getRoleManager().addRole(role);
+         getRoleManager().disableRole(role);
+ 		try {
+ 			getRoleManager().getRoleByName(role.getName());
+ 			fail("Should have thrown EntityDisabledException");
+ 		} catch (EntityDisabledException ede) {
+ 			// brilliant!
+ 		}
+ 		
+ 		try {
+ 			getRoleManager().addRole(role);
+ 			fail("Should have thrown EntityExistsException");
+ 		} catch (EntityExistsException eee) {
+ 			// brilliant!
+ 		}
+ 	}
+     
      public void testCheckExists() throws Exception {
          Role role = getRoleManager().getRoleInstance("GREET_PEOPLE");

Index: AbstractPermissionManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test/AbstractPermissionManagerTest.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** AbstractPermissionManagerTest.java	14 Nov 2005 18:20:50 -0000	1.1
--- AbstractPermissionManagerTest.java	18 Mar 2006 16:19:36 -0000	1.2
***************
*** 22,25 ****
--- 22,26 ----
  import org.apache.fulcrum.security.model.dynamic.DynamicModelManager;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicRole;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.PermissionSet;
***************
*** 94,97 ****
--- 95,117 ----
          }
      }
+     
+ 	public void testDisablePermission() throws Exception {
+         Permission permission = getPermissionManager().getPermissionInstance("CLEAN_KENNEL_L");
+         getPermissionManager().addPermission(permission);
+         getPermissionManager().disablePermission(permission);
+ 		try {
+ 			getPermissionManager().getPermissionByName(permission.getName());
+ 			fail("Should have thrown EntityDisabledException");
+ 		} catch (EntityDisabledException ede) {
+ 			// brilliant!
+ 		}
+ 		
+ 		try {
+ 			getPermissionManager().addPermission(permission);
+ 			fail("Should have thrown EntityExistsException");
+ 		} catch (EntityExistsException eee) {
+ 			// brilliant!
+ 		}
+ 	}
  
      public void testAddPermission() throws Exception {

Index: AbstractUserManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test/AbstractUserManagerTest.java,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** AbstractUserManagerTest.java	24 Jan 2006 11:38:54 -0000	1.5
--- AbstractUserManagerTest.java	18 Mar 2006 16:19:36 -0000	1.6
***************
*** 23,26 ****
--- 23,27 ----
  import org.apache.fulcrum.security.acl.AccessControlList;
  import org.apache.fulcrum.security.entity.User;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.PasswordExpiredException;
***************
*** 153,156 ****
--- 154,158 ----
  	}
  
+ 	@SuppressWarnings("unchecked")
  	public void testChangePassword() throws Exception {
  		User user = getUserManager().getUserInstance("Jonathan");
***************
*** 235,238 ****
--- 237,259 ----
  	}
  
+ 	public void testDisableUser() throws Exception {
+ 		User user = getUserManager().getUserInstance("Dave");
+ 		getUserManager().addUser(user, "scottysaywhat");
+ 		getUserManager().disableUser(user);
+ 		try {
+ 			getUserManager().getUser(user.getName());
+ 			fail("Should have thrown EntityDisabledException");
+ 		} catch (EntityDisabledException ede) {
+ 			// brilliant!
+ 		}
+ 		
+ 		try {
+ 			getUserManager().addUser(user, "scottyzip");
+ 			fail("Should have thrown EntityExistsException");
+ 		} catch (EntityExistsException eee) {
+ 			// brilliant!
+ 		}
+ 	}
+ 	
  	public void testRemoveUser() throws Exception {
  		User user = getUserManager().getUserInstance("Rick");
***************
*** 240,244 ****
  		getUserManager().removeUser(user);
  		try {
! 			User user2 = getUserManager().getUser(user.getName());
  			fail("Should have thrown UEE");
  		} catch (UnknownEntityException uee) {
--- 261,265 ----
  		getUserManager().removeUser(user);
  		try {
! 			getUserManager().getUser(user.getName());
  			fail("Should have thrown UEE");
  		} catch (UnknownEntityException uee) {



From nobody at sheep.berlios.de  Sat Mar 18 18:18:47 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:47 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity SecurityEntity.java,1.1,1.2
Message-ID: <200603181718.k2IHIkb18148@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security/entity

Modified Files:
	SecurityEntity.java 
Log Message:
Added functionality to disable users

Index: SecurityEntity.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity/SecurityEntity.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** SecurityEntity.java	14 Nov 2005 18:20:46 -0000	1.1
--- SecurityEntity.java	18 Mar 2006 16:19:37 -0000	1.2
***************
*** 58,60 ****
--- 58,78 ----
       */
      void setId(Object id);
+     
+     /**
+      * 
+      * @return Whether the SecurityEntity is disabled
+      *
+      * @author richard.brooks
+      * Created on 17-Mar-2006
+      */
+     boolean isDisabled();
+     
+     /**
+      * 
+      * @param disabled Whether the SecurityEntity is diabled
+      *
+      * @author richard.brooks
+      * Created on 17-Mar-2006
+      */
+     void setDisabled(boolean disabled);
  }



From nobody at sheep.berlios.de  Sat Mar 18 18:21:00 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:21:00 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.28,1.29
Message-ID: <200603181721.k2IHL0b18312@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv18684

Modified Files:
	pom.xml 
Log Message:
bumped dependencies

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.28
retrieving revision 1.29
diff -C2 -d -r1.28 -r1.29
*** pom.xml	15 Mar 2006 17:14:23 -0000	1.28
--- pom.xml	18 Mar 2006 16:22:20 -0000	1.29
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>2.2</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>2.4</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
***************
*** 128,132 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.14</version>
          </dependency>
          <dependency>
--- 128,132 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.16</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Mon Mar 27 15:41:10 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 27 Mar 2006 15:41:10 +0200
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/taskAction LogTaskActionTest.java,1.2,1.3
Message-ID: <200603271341.k2RDfAt19469@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/taskAction
In directory sheep:/tmp/cvs-serv31877/src/test/java/com/anite/zebra/hivemind/taskAction

Modified Files:
	LogTaskActionTest.java 
Log Message:


Index: LogTaskActionTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/taskAction/LogTaskActionTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** LogTaskActionTest.java	16 Mar 2006 08:05:07 -0000	1.2
--- LogTaskActionTest.java	27 Mar 2006 13:41:33 -0000	1.3
***************
*** 23,30 ****
  import org.apache.hivemind.impl.DefaultClassResolver;
  import org.apache.hivemind.util.ClasspathResource;
- import org.hibernate.HibernateException;
- import org.hibernate.TransactionException;
  
- import com.anite.zebra.core.exceptions.CreateProcessException;
  import com.anite.zebra.core.exceptions.StartProcessException;
  import com.anite.zebra.hivemind.impl.Zebra;
--- 23,27 ----



From nobody at sheep.berlios.de  Mon Mar 27 15:41:11 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Mon, 27 Mar 2006 15:41:11 +0200
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl ZebraStateFactoryTest.java,1.7,1.8
Message-ID: <200603271341.k2RDfBt19476@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv31877/src/test/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraStateFactoryTest.java 
Log Message:


Index: ZebraStateFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraStateFactoryTest.java,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** ZebraStateFactoryTest.java	16 Mar 2006 08:05:07 -0000	1.7
--- ZebraStateFactoryTest.java	27 Mar 2006 13:41:35 -0000	1.8
***************
*** 28,32 ****
  import com.anite.zebra.core.definitions.api.ITaskDefinition;
  import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
- import com.anite.zebra.core.factory.api.IStateFactory;
  import com.anite.zebra.core.factory.exceptions.CreateObjectException;
  import com.anite.zebra.core.factory.exceptions.StateFailureException;
--- 28,31 ----



From nobody at sheep.berlios.de  Thu Mar 30 09:34:30 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Thu, 30 Mar 2006 09:34:30 +0200
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/taskAction ZebraTaskAction.java,1.1,1.2
Message-ID: <200603300734.k2U7YUt28987@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/taskAction
In directory sheep:/tmp/cvs-serv13763/src/main/java/com/anite/zebra/hivemind/taskAction

Modified Files:
	ZebraTaskAction.java 
Log Message:


Index: ZebraTaskAction.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/taskAction/ZebraTaskAction.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** ZebraTaskAction.java	9 Feb 2006 14:28:13 -0000	1.1
--- ZebraTaskAction.java	30 Mar 2006 07:34:51 -0000	1.2
***************
*** 30,34 ****
  
      public final void runTask(ITaskInstance task) throws RunTaskException {
!         this.runTask((ZebraTaskInstance) task);
      }
  
--- 30,42 ----
  
      public final void runTask(ITaskInstance task) throws RunTaskException {
!         try {
!             this.runTask((ZebraTaskInstance) task);
!         } catch (Throwable e) {
!             // This should not be necessary - but as some badly written tasks have been
!             // throwing RunTimeExceptions we have this.
!             // Throwing a runtime exceptions is an extremely bad idea as it leaves locks on the process 
!             // in the DB
!             throw new RunTaskException(e);
!         }
      }
  



From nobody at sheep.berlios.de  Sat Mar 18 18:18:17 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Sat, 18 Mar 2006 18:18:17 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security PermissionManager.java,1.1,1.2 RoleManager.java,1.1,1.2 UserManager.java,1.4,1.5 GroupManager.java,1.1,1.2
Message-ID: <200603181718.k2IHIHb18118@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security
In directory sheep:/tmp/cvs-serv18372/src/main/java/org/apache/fulcrum/security

Modified Files:
	PermissionManager.java RoleManager.java UserManager.java 
	GroupManager.java 
Log Message:
Added functionality to disable users

Index: PermissionManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/PermissionManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** PermissionManager.java	14 Nov 2005 18:20:47 -0000	1.1
--- PermissionManager.java	18 Mar 2006 16:19:38 -0000	1.2
***************
*** 1,3 ****
--- 1,4 ----
  package org.apache.fulcrum.security;
+ 
  /*
   *  Copyright 2001-2004 The Apache Software Foundation
***************
*** 17,145 ****
  import org.apache.fulcrum.security.entity.Permission;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.PermissionSet;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  /**
!  * An GroupManager performs {@link org.apache.fulcrum.security.entity.Group} objects
!  * related tasks on behalf of the {@link org.apache.fulcrum.security.BaseSecurityService}.
!  *
   * The responsibilities of this class include loading data of an group from the
!  * storage and putting them into the {@link org.apache.fulcrum.security.entity.Group} objects,
!  * saving those data to the permanent storage.
!  *
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public interface PermissionManager
  
- {
- 	
-     /**
-        * Construct a blank Permission object.
-        *
-        * This method calls getPermissionClass, and then creates a new object using
-        * the default constructor.
-        *
-        * @return an object implementing Permission interface.
-        * @throws UnknownEntityException if the object could not be instantiated.
-        */
-     Permission getPermissionInstance() throws UnknownEntityException;
-     /**
-      * Construct a blank Permission object.
-      *
-      * This method calls getPermissionClass, and then creates a new object using
-      * the default constructor.
-      *
-      * @param permName The name of the Permission
-      *
-      * @return an object implementing Permission interface.
-      * @throws UnknownEntityException if the object could not be instantiated.
-      */
-     Permission getPermissionInstance(String permName) throws UnknownEntityException;
-  
-     /**
-     	 * Retrieve a Permission object with specified name.
-     	 *
-     	 * @param name the name of the Permission.
-     	 * @return an object representing the Permission with specified name.
-     	 * @throws DataBackendException if there was an error accessing the data
-     	 *         backend.
-     	 * @throws UnknownEntityException if the permission does not exist.
-     	 */
-     Permission getPermissionByName(String name) throws DataBackendException, UnknownEntityException;
-     /**
-     	* Retrieve a Permission object with specified Id.
-     	*
-     	* @param name the name of the Permission.
-     	*
-     	* @return an object representing the Permission with specified name.
-     	*
-     	* @exception UnknownEntityException if the permission does not
-     	*            exist in the database.
-     	* @exception DataBackendException if there is a problem accessing the
-     	*            storage.
-     	*/
-     Permission getPermissionById(Object id) throws DataBackendException, UnknownEntityException;
-     /**
-        * Retrieves all permissions defined in the system.
-        *
-        * @return the names of all permissions defined in the system.
-        * @throws DataBackendException if there was an error accessing the data
-        *         backend.
-        */
-     PermissionSet getAllPermissions() throws DataBackendException;
-     
-     /**
-     	* Creates a new permission with specified attributes.
-     	*
-     	* @param permission The object describing the permission to be created.
-     	* @return the new Permission object.
-     	* @throws DataBackendException if there was an error accessing the data
-     	*         backend.
-     	* @throws EntityExistsException if the permission already exists.
-     	*/
-     Permission addPermission(Permission permission) throws DataBackendException, EntityExistsException;
-     /**
-     	 * Removes a Permission from the system.
-     	 *
-     	 * @param permission The object describing the permission to be removed.
-     	 * @throws DataBackendException if there was an error accessing the data
-     	 *         backend.
-     	 * @throws UnknownEntityException if the permission does not exist.
-     	 */
-     void removePermission(Permission permission) throws DataBackendException, UnknownEntityException;
-     /**
-        * Renames an existing Permission.
-        *
-        * @param permission The object describing the permission to be renamed.
-        * @param name the new name for the permission.
-        * @throws DataBackendException if there was an error accessing the data
-        *         backend.
-        * @throws UnknownEntityException if the permission does not exist.
-        */
-     void renamePermission(Permission permission, String name) throws DataBackendException, UnknownEntityException;
-     
  	/**
! 		   * Determines if the <code>Permission</code> exists in the security system.
! 		   *
! 		   * @param permission a <code>Permission</code> value
! 		   * @return true if the permission exists in the system, false otherwise
! 		   * @throws DataBackendException when more than one Permission with
! 		   *         the same name exists.
! 		   * @throws Exception A generic exception.
! 		   */
! 	 boolean checkExists(Permission permission) throws DataBackendException;    
! 	 
! 		/**
! 		 * Determines if a <code>Permission</code> exists in the security
! 		 * system with the specified name.
! 		 * 
! 		 * @param permissionName the name of a <code>Permission</code> to check
! 		 * @return true if the permission exists in the system, false otherwise
! 		 * @throws DataBackendException
! 		 *             when more than one Permission with the same name exists.
! 		 * @throws Exception
! 		 *             A generic exception.
! 		 */
! 		boolean checkExists(String permissionName) throws DataBackendException;	 
  }
--- 18,198 ----
  import org.apache.fulcrum.security.entity.Permission;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.PermissionSet;
  import org.apache.fulcrum.security.util.UnknownEntityException;
+ 
  /**
!  * An GroupManager performs {@link org.apache.fulcrum.security.entity.Group}
!  * objects related tasks on behalf of the
!  * {@link org.apache.fulcrum.security.BaseSecurityService}.
!  * 
   * The responsibilities of this class include loading data of an group from the
!  * storage and putting them into the
!  * {@link org.apache.fulcrum.security.entity.Group} objects, saving those data
!  * to the permanent storage.
!  * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public interface PermissionManager {
  
  	/**
! 	 * Construct a blank Permission object.
! 	 * 
! 	 * This method calls getPermissionClass, and then creates a new object using
! 	 * the default constructor.
! 	 * 
! 	 * @return an object implementing Permission interface.
! 	 * @throws UnknownEntityException
! 	 *             if the object could not be instantiated.
! 	 */
! 	Permission getPermissionInstance() throws UnknownEntityException;
! 
! 	/**
! 	 * Construct a blank Permission object.
! 	 * 
! 	 * This method calls getPermissionClass, and then creates a new object using
! 	 * the default constructor.
! 	 * 
! 	 * @param permName
! 	 *            The name of the Permission
! 	 * 
! 	 * @return an object implementing Permission interface.
! 	 * @throws UnknownEntityException
! 	 *             if the object could not be instantiated.
! 	 */
! 	Permission getPermissionInstance(String permName)
! 			throws UnknownEntityException;
! 
! 	/**
! 	 * Retrieve a Permission object with specified name.
! 	 * 
! 	 * @param name
! 	 *            the name of the Permission.
! 	 * @return an object representing the Permission with specified name.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the permission does not exist.
! 	 */
! 	Permission getPermissionByName(String name) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException;
! 
! 	/**
! 	 * Retrieve a Permission object with specified Id.
! 	 * 
! 	 * @param name
! 	 *            the name of the Permission.
! 	 * 
! 	 * @return an object representing the Permission with specified name.
! 	 * 
! 	 * @exception UnknownEntityException
! 	 *                if the permission does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 */
! 	Permission getPermissionById(Object id) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException;
! 
! 	/**
! 	 * Retrieves all permissions defined in the system.
! 	 * 
! 	 * @return the names of all permissions defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	PermissionSet getAllPermissions() throws DataBackendException;
! 
! 	/**
! 	 * Retrieves all non-disabled permissions defined in the system.
! 	 * 
! 	 * @return the names of all non-disabled permissions defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	PermissionSet getPermissions() throws DataBackendException;
! 
! 	/**
! 	 * Creates a new permission with specified attributes.
! 	 * 
! 	 * @param permission
! 	 *            The object describing the permission to be created.
! 	 * @return the new Permission object.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws EntityExistsException
! 	 *             if the permission already exists.
! 	 */
! 	Permission addPermission(Permission permission)
! 			throws DataBackendException, EntityExistsException;
! 
! 	/**
! 	 * Removes a Permission from the system.
! 	 * 
! 	 * @param permission
! 	 *            The object describing the permission to be removed.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the permission does not exist.
! 	 */
! 	void removePermission(Permission permission) throws DataBackendException,
! 			UnknownEntityException;
! 
! 	/**
! 	 * Disables a Permission (effectively rendering it as removed).
! 	 * 
! 	 * @param permission
! 	 *            The object describing the permission to be removed.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the permission does not exist.
! 	 */
! 	void disablePermission(Permission permission) throws DataBackendException,
! 			UnknownEntityException;
! 
! 	/**
! 	 * Renames an existing Permission.
! 	 * 
! 	 * @param permission
! 	 *            The object describing the permission to be renamed.
! 	 * @param name
! 	 *            the new name for the permission.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the permission does not exist.
! 	 */
! 	void renamePermission(Permission permission, String name)
! 			throws DataBackendException, UnknownEntityException;
! 
! 	/**
! 	 * Determines if the <code>Permission</code> exists in the security
! 	 * system.
! 	 * 
! 	 * @param permission
! 	 *            a <code>Permission</code> value
! 	 * @return true if the permission exists in the system, false otherwise
! 	 * @throws DataBackendException
! 	 *             when more than one Permission with the same name exists.
! 	 * @throws Exception
! 	 *             A generic exception.
! 	 */
! 	boolean checkExists(Permission permission) throws DataBackendException;
! 
! 	/**
! 	 * Determines if a <code>Permission</code> exists in the security system
! 	 * with the specified name.
! 	 * 
! 	 * @param permissionName
! 	 *            the name of a <code>Permission</code> to check
! 	 * @return true if the permission exists in the system, false otherwise
! 	 * @throws DataBackendException
! 	 *             when more than one Permission with the same name exists.
! 	 * @throws Exception
! 	 *             A generic exception.
! 	 */
! 	boolean checkExists(String permissionName) throws DataBackendException;
  }

Index: RoleManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/RoleManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** RoleManager.java	14 Nov 2005 18:20:47 -0000	1.1
--- RoleManager.java	18 Mar 2006 16:19:38 -0000	1.2
***************
*** 1,3 ****
--- 1,4 ----
  package org.apache.fulcrum.security;
+ 
  /*
   *  Copyright 2001-2004 The Apache Software Foundation
***************
*** 17,134 ****
  import org.apache.fulcrum.security.entity.Role;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.RoleSet;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  /**
!  * An GroupManager performs {@link org.apache.fulcrum.security.entity.Group} objects
!  * related tasks on behalf of the {@link org.apache.fulcrum.security.BaseSecurityService}.
!  *
   * The responsibilities of this class include loading data of an group from the
!  * storage and putting them into the {@link org.apache.fulcrum.security.entity.Group} objects,
!  * saving those data to the permanent storage.
!  *
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public interface RoleManager 
! {
!     /** Avalon role - used to id the component within the manager */
!     String ROLE = RoleManager.class.getName();
!     /**
!      * Construct a blank Role object.
!      *
!      * This method calls getRoleClass, and then creates a new object using
!      * the default constructor.
!      *
!      * @return an object implementing Role interface.
!      * @throws DataBackendException if the object could not be instantiated.
!      */
!     public Role getRoleInstance() throws DataBackendException;
!     /**
!     * Construct a blank Role object.
!     *
!     * This method calls getRoleClass, and then creates a new object using
!     * the default constructor.
!     *
!     * @param roleName The name of the Role
!     *
!     * @return an object implementing Role interface.
!     * @throws DataBackendException if the object could not be instantiated.
!     */
!     Role getRoleInstance(String roleName) throws DataBackendException;
!     
!     /**
  	 * Retrieve a Role object with specified name.
! 	 *
! 	 * @param name the name of the Role.
  	 * @return an object representing the Role with specified name.
! 	 * @throws DataBackendException if there was an error accessing the data
! 	 *         backend.
! 	 * @throws UnknownEntityException if the role does not exist.
  	 */
!     Role getRoleByName(String name) throws DataBackendException, UnknownEntityException;
!     /**
!      * Retrieve a Role object with specified Id.
! 	 *
! 	 * @param name the name of the Role.
! 	 *
  	 * @return an object representing the Role with specified name.
! 	 *
! 	 * @exception UnknownEntityException if the permission does not
! 	 *            exist in the database.
! 	 * @exception DataBackendException if there is a problem accessing the
! 	 *            storage.
  	 */
!     Role getRoleById(Object id) throws DataBackendException, UnknownEntityException;
!     /**
!      * Retrieves all roles defined in the system.
!      *
!      * @return the names of all roles defined in the system.
!      * @throws DataBackendException if there was an error accessing the data
!      *         backend.
!      */
!     RoleSet getAllRoles() throws DataBackendException;
  
-     /**
-       * Creates a new role with specified attributes.
-       *
-       * @param role The object describing the role to be created.
-       * @return the new Role object.
-       * @throws DataBackendException if there was an error accessing the data
-       *         backend.
-       * @throws EntityExistsException if the role already exists.
-       */
-     Role addRole(Role role) throws DataBackendException, EntityExistsException;
-     /**
-      * Removes a Role from the system.
-     	*
-     	* @param role The object describing the role to be removed.
-     	* @throws DataBackendException if there was an error accessing the data
-     	*         backend.
-     	* @throws UnknownEntityException if the role does not exist.
-     	*/
-     void removeRole(Role role) throws DataBackendException, UnknownEntityException;
-     /**
-     	* Renames an existing Role.
-     	*
-     	* @param role The object describing the role to be renamed.
-     	* @param name the new name for the role.
-     	* @throws DataBackendException if there was an error accessing the data
-     	*         backend.
-     	* @throws UnknownEntityException if the role does not exist.
-     	*/
-     void renameRole(Role role, String name) throws DataBackendException, UnknownEntityException;
-  
-     /**
-     		   * Determines if the <code>Role</code> exists in the security system.
-     		   *
-     		   * @param role a <code>Role</code> value
-     		   * @return true if the role exists in the system, false otherwise
-     		   * @throws DataBackendException when more than one Role with
-     		   *         the same name exists.
-     		   * @throws Exception A generic exception.
-     		   */
-     boolean checkExists(Role role) throws DataBackendException;
-     
  	/**
  	 * Determines if a <code>Role</code> exists in the security system with
--- 18,185 ----
  import org.apache.fulcrum.security.entity.Role;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.RoleSet;
  import org.apache.fulcrum.security.util.UnknownEntityException;
+ 
  /**
!  * An GroupManager performs {@link org.apache.fulcrum.security.entity.Group}
!  * objects related tasks on behalf of the
!  * {@link org.apache.fulcrum.security.BaseSecurityService}.
!  * 
   * The responsibilities of this class include loading data of an group from the
!  * storage and putting them into the
!  * {@link org.apache.fulcrum.security.entity.Group} objects, saving those data
!  * to the permanent storage.
!  * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public interface RoleManager {
! 	/** Avalon role - used to id the component within the manager */
! 	String ROLE = RoleManager.class.getName();
! 
! 	/**
! 	 * Construct a blank Role object.
! 	 * 
! 	 * This method calls getRoleClass, and then creates a new object using the
! 	 * default constructor.
! 	 * 
! 	 * @return an object implementing Role interface.
! 	 * @throws DataBackendException
! 	 *             if the object could not be instantiated.
! 	 */
! 	public Role getRoleInstance() throws DataBackendException;
! 
! 	/**
! 	 * Construct a blank Role object.
! 	 * 
! 	 * This method calls getRoleClass, and then creates a new object using the
! 	 * default constructor.
! 	 * 
! 	 * @param roleName
! 	 *            The name of the Role
! 	 * 
! 	 * @return an object implementing Role interface.
! 	 * @throws DataBackendException
! 	 *             if the object could not be instantiated.
! 	 */
! 	Role getRoleInstance(String roleName) throws DataBackendException;
! 
! 	/**
  	 * Retrieve a Role object with specified name.
! 	 * 
! 	 * @param name
! 	 *            the name of the Role.
  	 * @return an object representing the Role with specified name.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the role does not exist.
  	 */
! 	Role getRoleByName(String name) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException;
! 
! 	/**
! 	 * Retrieve a Role object with specified Id.
! 	 * 
! 	 * @param name
! 	 *            the name of the Role.
! 	 * 
  	 * @return an object representing the Role with specified name.
! 	 * 
! 	 * @exception UnknownEntityException
! 	 *                if the permission does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
  	 */
! 	Role getRoleById(Object id) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException;
! 
! 	/**
! 	 * Retrieves all roles defined in the system.
! 	 * 
! 	 * @return the names of all roles defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	RoleSet getAllRoles() throws DataBackendException;
! 
! 	/**
! 	 * Retrieves all non-disabled roles defined in the system.
! 	 * 
! 	 * @return the names of all non-disabled roles defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	RoleSet getRoles() throws DataBackendException;
! 
! 	/**
! 	 * Creates a new role with specified attributes.
! 	 * 
! 	 * @param role
! 	 *            The object describing the role to be created.
! 	 * @return the new Role object.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws EntityExistsException
! 	 *             if the role already exists.
! 	 */
! 	Role addRole(Role role) throws DataBackendException, EntityExistsException;
! 
! 	/**
! 	 * Removes a Role from the system.
! 	 * 
! 	 * @param role
! 	 *            The object describing the role to be removed.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the role does not exist.
! 	 */
! 	void removeRole(Role role) throws DataBackendException,
! 			UnknownEntityException;
! 
! 	/**
! 	 * Disables a Role (effectively rendering it as removed).
! 	 * 
! 	 * @param role
! 	 *            The object describing the role to be disabled.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the role does not exist.
! 	 */
! 	void disableRole(Role role) throws DataBackendException,
! 			UnknownEntityException;
! 
! 	/**
! 	 * Renames an existing Role.
! 	 * 
! 	 * @param role
! 	 *            The object describing the role to be renamed.
! 	 * @param name
! 	 *            the new name for the role.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the role does not exist.
! 	 */
! 	void renameRole(Role role, String name) throws DataBackendException,
! 			UnknownEntityException;
! 
! 	/**
! 	 * Determines if the <code>Role</code> exists in the security system.
! 	 * 
! 	 * @param role
! 	 *            a <code>Role</code> value
! 	 * @return true if the role exists in the system, false otherwise
! 	 * @throws DataBackendException
! 	 *             when more than one Role with the same name exists.
! 	 * @throws Exception
! 	 *             A generic exception.
! 	 */
! 	boolean checkExists(Role role) throws DataBackendException;
  
  	/**
  	 * Determines if a <code>Role</code> exists in the security system with
***************
*** 143,146 ****
  	 *             A generic exception.
  	 */
! 	boolean checkExists(String roleName) throws DataBackendException;    
  }
--- 194,197 ----
  	 *             A generic exception.
  	 */
! 	boolean checkExists(String roleName) throws DataBackendException;
  }

Index: UserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/UserManager.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** UserManager.java	24 Jan 2006 11:38:54 -0000	1.4
--- UserManager.java	18 Mar 2006 16:19:38 -0000	1.5
***************
*** 1,3 ****
--- 1,4 ----
  package org.apache.fulcrum.security;
+ 
  /*
   *  Copyright 2001-2004 The Apache Software Foundation
***************
*** 19,22 ****
--- 20,24 ----
  import org.apache.fulcrum.security.entity.User;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.PasswordExpiredException;
***************
*** 26,251 ****
  import org.apache.fulcrum.security.util.UserLockedException;
  import org.apache.fulcrum.security.util.UserSet;
  /**
!  * An UserManager performs {@link org.apache.fulcrum.security.entity.User} objects
!  * related tasks on behalf of the {@link org.apache.fulcrum.security.BaseSecurityService}.
!  *
   * The responsibilities of this class include loading data of an user from the
!  * storage and putting them into the {@link org.apache.fulcrum.security.entity.User} objects,
!  * saving those data to the permanent storage, and authenticating users.
!  *
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @author <a href="mailto:Rafal.Krzewski at e-point.pl">Rafal Krzewski</a>
   * @version $Id$
   */
! public interface UserManager 
! {
!     /**
!      * Construct a blank User object.
!      *
!      * This method calls getUserClass, and then creates a new object using
!      * the default constructor.
!      *
!      * @return an object implementing User interface.
!      * @throws DataBackendException if the object could not be instantiated.
!      */
!     User getUserInstance() throws DataBackendException;
!     /**
!      * Construct a blank User object.
!      *
!      * This method calls getUserClass, and then creates a new object using
!      * the default constructor.
!      *
!      * @param userName The name of the user.
!      *
!      * @return an object implementing User interface.
!      * @throws DataBackendException if the object could not be instantiated.
!      */
!     User getUserInstance(String userName) throws DataBackendException;
!  
  	/**
!    * Determines if the <code>User</code> exists in the security system.
!    *
!    * @param role a <code>User</code> value
!    * @return true if the user exists in the system, false otherwise
!    * @throws DataBackendException when more than one user with
!    *         the same name exists.
!    * @throws Exception A generic exception.
!    */
! 	boolean checkExists(User user) throws DataBackendException; 
!     /**
!      * Check whether a specified user's account exists.
!      *
!      * The login name is used for looking up the account.
!      *
!      * @param userName The name of the user to be checked.
!      * @return true if the specified account exists
!      * @throws DataBackendException if there was an error accessing the data backend.
!      */
!     boolean checkExists(String userName) throws DataBackendException;
!     /**
!       * Retrieve a user from persistent storage using username as the
!       * key.
!       *
!       * @param username the name of the user.
!       * @return an User object.
!       * @exception UnknownEntityException if the user's record does not
!       *            exist in the database.
!       * @exception DataBackendException if there is a problem accessing the
!       *            storage.
!       */
!     User getUser(String username) throws UnknownEntityException, DataBackendException;
  
!     /**
!      * Retrieve a user from persistent storage using the id as the
!      * key.
!      *
!      * @param id the id of the user.
!      * @return an User object.
!      * @exception UnknownEntityException if the user's record does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      */
!    User getUserById(Object id) throws UnknownEntityException, DataBackendException;    
!     /**
!      * Retrieve a user from persistent storage using username as the
!      * key, and authenticate the user. The implementation may chose
!      * to authenticate to the server as the user whose data is being
!      * retrieved.
!      *
!      * @param username the name of the user.
!      * @param password the user supplied password.
!      * @return an User object.
!      * @exception PasswordMismatchException if the supplied password was
!      *            incorrect.
!      * @exception UnknownEntityException if the user's record does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      * @throws UserLockedException 
!      * @throws PasswordExpiredException 
!      */
!     User getUser(String username, String password)
!         throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, UserLockedException, PasswordExpiredException;
  
  	/**
! 	   * Retrieves all users defined in the system.
! 	   *
! 	   * @return the names of all users defined in the system.
! 	   * @throws DataBackendException if there was an error accessing the data
! 	   *         backend.
! 	   */
! 	UserSet getAllUsers() throws DataBackendException;    
!     /**
!     * Saves User's data in the permanent storage. The user account is required
!     * to exist in the storage.
!     *
!     * @param user the user object to save
!     * @throws DataBackendException if there is a problem accessing the storage.
!     */
!     void saveUser(User user) throws DataBackendException;
!     /**
!      * Authenticate an User with the specified password. If authentication
!      * is successful the method returns nothing. If there are any problems,
!      * exception was thrown.
!      *
!      * @param user an User object to authenticate.
!      * @param password the user supplied password.
!      * @exception PasswordMismatchException if the supplied password was
!      *            incorrect.
!      * @exception UnknownEntityException if the user's record does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      * @throws UserLockedException 
!      * @throws PasswordExpiredException 
!      */
!     void authenticate(User user, String password)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException, UserLockedException;
!     /**
!      * Creates new user account with specified attributes.
!      *
!      * @param user the object describing account to be created.
!      * @param password The password to use for the object creation
!      *
!      * @throws DataBackendException if there was an error accessing the data backend.
!      * @throws EntityExistsException if the user account already exists.
!      */
!     public User addUser(User user, String password) throws EntityExistsException, DataBackendException;
!     /**
!      * Removes an user account from the system.
!      *
!      * @param user the object describing the account to be removed.
!      * @throws DataBackendException if there was an error accessing the data backend.
!      * @throws UnknownEntityException if the user account is not present.
!      */
!     void removeUser(User user) throws UnknownEntityException, DataBackendException;
!     /**
!      * Change the password for an User.
!      *
!      * @param user an User to change password for.
!      * @param oldPassword the current password suplied by the user.
!      * @param newPassword the current password requested by the user.
!      * @exception PasswordMismatchException if the supplied password was
!      *            incorrect.
!      * @exception UnknownEntityException if the user's record does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      * @throws PasswordHistoryException 
!      * @throws UserLockedException 
!      * @throws PasswordExpiredException 
!      */
!     void changePassword(User user, String oldPassword, String newPassword)
!         throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, PasswordHistoryException, UserLockedException;
!     /**
!      * Forcibly sets new password for an User.
!      *
!      * This is supposed by the administrator to change the forgotten or
!      * compromised passwords. Certain implementatations of this feature
!      * would require administrative level access to the authenticating
!      * server / program.
!      *
!      * @param user an User to change password for.
!      * @param password the new password.
!      * @exception UnknownEntityException if the user's record does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      * @throws PasswordHistoryException 
!      */
!     void forcePassword(User user, String password) throws UnknownEntityException, DataBackendException, PasswordHistoryException;
!     
!     /**
!        * Return a Class object representing the system's chosen implementation of
!        * of ACL interface.
!        *
!        * @return systems's chosen implementation of ACL interface.
!        * @throws UnknownEntityException if the implementation of ACL interface
!        *         could not be determined, or does not exist.
!        */
!     public AccessControlList getACL(User user) throws UnknownEntityException;
!     
!     /**
!      * 
!      * @return
!      *
!      * @author richard.brooks
!      * Created on Jan 11, 2006
!      */
  	Authenticator getAuthenticator();
! 	
  	/**
  	 * 
  	 * @param authenticator
! 	 *
! 	 * @author richard.brooks
! 	 * Created on Jan 11, 2006
  	 */
  	void setAuthenticator(Authenticator authenticator);
- 
- 
-     
  }
--- 28,317 ----
  import org.apache.fulcrum.security.util.UserLockedException;
  import org.apache.fulcrum.security.util.UserSet;
+ 
  /**
!  * An UserManager performs {@link org.apache.fulcrum.security.entity.User}
!  * objects related tasks on behalf of the
!  * {@link org.apache.fulcrum.security.BaseSecurityService}.
!  * 
   * The responsibilities of this class include loading data of an user from the
!  * storage and putting them into the
!  * {@link org.apache.fulcrum.security.entity.User} objects, saving those data to
!  * the permanent storage, and authenticating users.
!  * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @author <a href="mailto:Rafal.Krzewski at e-point.pl">Rafal Krzewski</a>
   * @version $Id$
   */
! public interface UserManager {
  	/**
! 	 * Construct a blank User object.
! 	 * 
! 	 * This method calls getUserClass, and then creates a new object using the
! 	 * default constructor.
! 	 * 
! 	 * @return an object implementing User interface.
! 	 * @throws DataBackendException
! 	 *             if the object could not be instantiated.
! 	 */
! 	User getUserInstance() throws DataBackendException;
  
! 	/**
! 	 * Construct a blank User object.
! 	 * 
! 	 * This method calls getUserClass, and then creates a new object using the
! 	 * default constructor.
! 	 * 
! 	 * @param userName
! 	 *            The name of the user.
! 	 * 
! 	 * @return an object implementing User interface.
! 	 * @throws DataBackendException
! 	 *             if the object could not be instantiated.
! 	 */
! 	User getUserInstance(String userName) throws DataBackendException;
  
  	/**
! 	 * Determines if the <code>User</code> exists in the security system.
! 	 * 
! 	 * @param role
! 	 *            a <code>User</code> value
! 	 * @return true if the user exists in the system, false otherwise
! 	 * @throws DataBackendException
! 	 *             when more than one user with the same name exists.
! 	 * @throws Exception
! 	 *             A generic exception.
! 	 */
! 	boolean checkExists(User user) throws DataBackendException;
! 
! 	/**
! 	 * Check whether a specified user's account exists.
! 	 * 
! 	 * The login name is used for looking up the account.
! 	 * 
! 	 * @param userName
! 	 *            The name of the user to be checked.
! 	 * @return true if the specified account exists
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	boolean checkExists(String userName) throws DataBackendException;
! 
! 	/**
! 	 * Retrieve a user from persistent storage using username as the key.
! 	 * 
! 	 * @param username
! 	 *            the name of the user.
! 	 * @return an User object.
! 	 * @exception UnknownEntityException
! 	 *                if the user's record does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 */
! 	User getUser(String username) throws UnknownEntityException,
! 			DataBackendException, EntityDisabledException;
! 
! 	/**
! 	 * Retrieve a user from persistent storage using the id as the key.
! 	 * 
! 	 * @param id
! 	 *            the id of the user.
! 	 * @return an User object.
! 	 * @exception UnknownEntityException
! 	 *                if the user's record does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 */
! 	User getUserById(Object id) throws UnknownEntityException,
! 			DataBackendException, EntityDisabledException;
! 
! 	/**
! 	 * Retrieve a user from persistent storage using username as the key, and
! 	 * authenticate the user. The implementation may chose to authenticate to
! 	 * the server as the user whose data is being retrieved.
! 	 * 
! 	 * @param username
! 	 *            the name of the user.
! 	 * @param password
! 	 *            the user supplied password.
! 	 * @return an User object.
! 	 * @exception PasswordMismatchException
! 	 *                if the supplied password was incorrect.
! 	 * @exception UnknownEntityException
! 	 *                if the user's record does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 * @throws UserLockedException
! 	 * @throws PasswordExpiredException
! 	 */
! 	User getUser(String username, String password)
! 			throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, UserLockedException,
! 			PasswordExpiredException, EntityDisabledException;
! 
! 	/**
! 	 * Retrieves all users defined in the system.
! 	 * 
! 	 * @return the names of all users defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	UserSet getAllUsers() throws DataBackendException;
! 
! 	/**
! 	 * Retrieves all non-disabled users defined in the system.
! 	 * 
! 	 * @return the names of all non-disabled users defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	UserSet getUsers() throws DataBackendException;
! 
! 	/**
! 	 * Saves User's data in the permanent storage. The user account is required
! 	 * to exist in the storage.
! 	 * 
! 	 * @param user
! 	 *            the user object to save
! 	 * @throws DataBackendException
! 	 *             if there is a problem accessing the storage.
! 	 */
! 	void saveUser(User user) throws DataBackendException;
! 
! 	/**
! 	 * Authenticate an User with the specified password. If authentication is
! 	 * successful the method returns nothing. If there are any problems,
! 	 * exception was thrown.
! 	 * 
! 	 * @param user
! 	 *            an User object to authenticate.
! 	 * @param password
! 	 *            the user supplied password.
! 	 * @exception PasswordMismatchException
! 	 *                if the supplied password was incorrect.
! 	 * @exception UnknownEntityException
! 	 *                if the user's record does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 * @throws UserLockedException
! 	 * @throws PasswordExpiredException
! 	 */
! 	void authenticate(User user, String password)
! 			throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, UserLockedException, EntityDisabledException;
! 
! 	/**
! 	 * Creates new user account with specified attributes.
! 	 * 
! 	 * @param user
! 	 *            the object describing account to be created.
! 	 * @param password
! 	 *            The password to use for the object creation
! 	 * 
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws EntityExistsException
! 	 *             if the user account already exists.
! 	 */
! 	public User addUser(User user, String password)
! 			throws EntityExistsException, DataBackendException;
! 
! 	/**
! 	 * Removes a user account from the system.
! 	 * 
! 	 * @param user
! 	 *            the object describing the account to be removed.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the user account is not present.
! 	 */
! 	void removeUser(User user) throws UnknownEntityException,
! 			DataBackendException;
! 
! 	/**
! 	 * Disables a user (effectively rendering it as removed but without actually
! 	 * removing it).
! 	 * 
! 	 * @param user
! 	 *            the object describing the account to be disabled.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the user account is not present.
! 	 */
! 	void disableUser(User user) throws UnknownEntityException,
! 			DataBackendException;
! 
! 	/**
! 	 * Change the password for an User.
! 	 * 
! 	 * @param user
! 	 *            an User to change password for.
! 	 * @param oldPassword
! 	 *            the current password suplied by the user.
! 	 * @param newPassword
! 	 *            the current password requested by the user.
! 	 * @exception PasswordMismatchException
! 	 *                if the supplied password was incorrect.
! 	 * @exception UnknownEntityException
! 	 *                if the user's record does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 * @throws PasswordHistoryException
! 	 * @throws UserLockedException
! 	 * @throws PasswordExpiredException
! 	 */
! 	void changePassword(User user, String oldPassword, String newPassword)
! 			throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, PasswordHistoryException,
! 			UserLockedException, EntityDisabledException;
! 
! 	/**
! 	 * Forcibly sets new password for an User.
! 	 * 
! 	 * This is supposed by the administrator to change the forgotten or
! 	 * compromised passwords. Certain implementatations of this feature would
! 	 * require administrative level access to the authenticating server /
! 	 * program.
! 	 * 
! 	 * @param user
! 	 *            an User to change password for.
! 	 * @param password
! 	 *            the new password.
! 	 * @exception UnknownEntityException
! 	 *                if the user's record does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 * @throws PasswordHistoryException
! 	 */
! 	void forcePassword(User user, String password)
! 			throws UnknownEntityException, DataBackendException,
! 			PasswordHistoryException;
! 
! 	/**
! 	 * Return a Class object representing the system's chosen implementation of
! 	 * of ACL interface.
! 	 * 
! 	 * @return systems's chosen implementation of ACL interface.
! 	 * @throws UnknownEntityException
! 	 *             if the implementation of ACL interface could not be
! 	 *             determined, or does not exist.
! 	 */
! 	public AccessControlList getACL(User user) throws UnknownEntityException;
! 
! 	/**
! 	 * 
! 	 * @return
! 	 * 
! 	 * @author richard.brooks Created on Jan 11, 2006
! 	 */
  	Authenticator getAuthenticator();
! 
  	/**
  	 * 
  	 * @param authenticator
! 	 * 
! 	 * @author richard.brooks Created on Jan 11, 2006
  	 */
  	void setAuthenticator(Authenticator authenticator);
  }

Index: GroupManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/GroupManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** GroupManager.java	14 Nov 2005 18:20:47 -0000	1.1
--- GroupManager.java	18 Mar 2006 16:19:38 -0000	1.2
***************
*** 1,3 ****
--- 1,4 ----
  package org.apache.fulcrum.security;
+ 
  /*
   *  Copyright 2001-2004 The Apache Software Foundation
***************
*** 17,153 ****
  import org.apache.fulcrum.security.entity.Group;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.GroupSet;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  /**
!  * An GroupManager performs {@link org.apache.fulcrum.security.entity.Group} objects
!  * related tasks on behalf of the {@link org.apache.fulcrum.security.BaseSecurityService}.
!  *
   * The responsibilities of this class include loading data of an group from the
!  * storage and putting them into the {@link org.apache.fulcrum.security.entity.Group} objects,
!  * saving those data to the permanent storage.
!  *
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public interface GroupManager
! {
!     /**
!      * Construct a blank Group object.
!      *
!      * This method calls getGroupClass, and then creates a new object using
!      * the default constructor.
!      *
!      * @return an object implementing Group interface.
!      * @throws DataBackendException if the object could not be instantiated.
!      */
!     Group getGroupInstance() throws DataBackendException;
!     /**
!      * Construct a blank Group object.
!      *
!      * This method calls getGroupClass, and then creates a new object using
!      * the default constructor.
!      *
!      * @param groupName The name of the Group
!      *
!      * @return an object implementing Group interface.
!      * @throws DataBackendException if the object could not be instantiated.
!      */
!     Group getGroupInstance(String groupName) throws DataBackendException;
!     /**
!     	* Retrieve a Group object with specified name.
!     	*
!     	* @param name the name of the Group.
!     	* @return an object representing the Group with specified name.
!     	* @throws DataBackendException if there was an error accessing the data
!     	*         backend.
!     	* @throws UnknownEntityException if the group does not exist.
!     	*/
!     Group getGroupByName(String name) throws DataBackendException, UnknownEntityException;
!    
!     /**
! 	* Retrieve a Group object with specified Id.
! 	*
! 	* @param name the name of the Group.
! 	*
! 	* @return an object representing the Group with specified name.
! 	*
! 	* @exception UnknownEntityException if the permission does not
! 	*            exist in the database.
! 	* @exception DataBackendException if there is a problem accessing the
! 	*            storage.
! 	*/
!     Group getGroupById(Object id) throws DataBackendException, UnknownEntityException;
!     
! 	 
! 			
  	/**
  	 * Renames an existing Group.
! 	 *
! 	 * @param group The object describing the group to be renamed.
! 	 * @param name the new name for the group.
! 	 * @throws DataBackendException if there was an error accessing the data
! 	 *         backend.
! 	 * @throws UnknownEntityException if the group does not exist.
  	 */
! 	void renameGroup(Group group, String name)
! 			throws DataBackendException, UnknownEntityException;	
! 			
  	/**
! 	   * Removes a Group from the system.
! 	   *
! 	   * @param group The object describing the group to be removed.
! 	   * @throws DataBackendException if there was an error accessing the data
! 	   *         backend.
! 	   * @throws UnknownEntityException if the group does not exist.
! 	   */
! 	  void removeGroup(Group group)
! 			  throws DataBackendException, UnknownEntityException;
! 			  
  	/**
! 	   * Creates a new group with specified attributes.
! 	   *
! 	   * @param group the object describing the group to be created.
! 	   * @return the new Group object.
! 	   * @throws DataBackendException if there was an error accessing the data
! 	   *         backend.
! 	   * @throws EntityExistsException if the group already exists.
! 	   */
! 	  Group addGroup(Group group)
! 			  throws DataBackendException, EntityExistsException;
! 			  
  	/**
! 	   * Retrieves all groups defined in the system.
! 	   *
! 	   * @return the names of all groups defined in the system.
! 	   * @throws DataBackendException if there was an error accessing the data
! 	   *         backend.
! 	   */
! 	  GroupSet getAllGroups()
! 			  throws DataBackendException;
! 			  
  	/**
! 		   * Determines if the <code>Group</code> exists in the security system.
! 		   *
! 		   * @param permission a <code>Group</code> value
! 		   * @return true if the group exists in the system, false otherwise
! 		   * @throws DataBackendException when more than one group with
! 		   *         the same name exists.
! 		   * @throws Exception A generic exception.
! 		   */
! 		public boolean checkExists(Group group) throws DataBackendException;	
! 		
! 		/**
! 		 * Determines if a <code>Group</code> exists in the security system
! 		 * with the specified name.
! 		 * 
! 		 * @param groupName the name of a <code>Group</code> to check.
! 		 * @return true if the group exists in the system, false otherwise
! 		 * @throws DataBackendException
! 		 *             when more than one group with the same name exists.
! 		 * @throws Exception
! 		 *             A generic exception.
! 		 */
! 		public boolean checkExists(String group) throws DataBackendException;		
! 			  
  }
--- 18,197 ----
  import org.apache.fulcrum.security.entity.Group;
  import org.apache.fulcrum.security.util.DataBackendException;
+ import org.apache.fulcrum.security.util.EntityDisabledException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.GroupSet;
  import org.apache.fulcrum.security.util.UnknownEntityException;
+ 
  /**
!  * An GroupManager performs {@link org.apache.fulcrum.security.entity.Group}
!  * objects related tasks on behalf of the
!  * {@link org.apache.fulcrum.security.BaseSecurityService}.
!  * 
   * The responsibilities of this class include loading data of an group from the
!  * storage and putting them into the
!  * {@link org.apache.fulcrum.security.entity.Group} objects, saving those data
!  * to the permanent storage.
!  * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public interface GroupManager {
! 	/**
! 	 * Construct a blank Group object.
! 	 * 
! 	 * This method calls getGroupClass, and then creates a new object using the
! 	 * default constructor.
! 	 * 
! 	 * @return an object implementing Group interface.
! 	 * @throws DataBackendException
! 	 *             if the object could not be instantiated.
! 	 */
! 	Group getGroupInstance() throws DataBackendException;
! 
! 	/**
! 	 * Construct a blank Group object.
! 	 * 
! 	 * This method calls getGroupClass, and then creates a new object using the
! 	 * default constructor.
! 	 * 
! 	 * @param groupName
! 	 *            The name of the Group
! 	 * 
! 	 * @return an object implementing Group interface.
! 	 * @throws DataBackendException
! 	 *             if the object could not be instantiated.
! 	 */
! 	Group getGroupInstance(String groupName) throws DataBackendException;
! 
! 	/**
! 	 * Retrieve a Group object with specified name.
! 	 * 
! 	 * @param name
! 	 *            the name of the Group.
! 	 * @return an object representing the Group with specified name.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the group does not exist.
! 	 */
! 	Group getGroupByName(String name) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException;
! 
! 	/**
! 	 * Retrieve a Group object with specified Id.
! 	 * 
! 	 * @param name
! 	 *            the name of the Group.
! 	 * 
! 	 * @return an object representing the Group with specified name.
! 	 * 
! 	 * @exception UnknownEntityException
! 	 *                if the permission does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 */
! 	Group getGroupById(Object id) throws DataBackendException,
! 			UnknownEntityException, EntityDisabledException;
! 
  	/**
  	 * Renames an existing Group.
! 	 * 
! 	 * @param group
! 	 *            The object describing the group to be renamed.
! 	 * @param name
! 	 *            the new name for the group.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the group does not exist.
  	 */
! 	void renameGroup(Group group, String name) throws DataBackendException,
! 			UnknownEntityException;
! 
  	/**
! 	 * Removes a Group from the system.
! 	 * 
! 	 * @param group
! 	 *            The object describing the group to be removed.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the group does not exist.
! 	 */
! 	void removeGroup(Group group) throws DataBackendException,
! 			UnknownEntityException;
! 
  	/**
! 	 * Disables a Group (effectively rendering it as removed, but without
! 	 * actually removing it).
! 	 * 
! 	 * @param group
! 	 *            The object describing the group to be disabled.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws UnknownEntityException
! 	 *             if the group does not exist.
! 	 */
! 	void disableGroup(Group group) throws DataBackendException,
! 			UnknownEntityException;
! 
  	/**
! 	 * Creates a new group with specified attributes.
! 	 * 
! 	 * @param group
! 	 *            the object describing the group to be created.
! 	 * @return the new Group object.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 * @throws EntityExistsException
! 	 *             if the group already exists.
! 	 */
! 	Group addGroup(Group group) throws DataBackendException,
! 			EntityExistsException;
! 
  	/**
! 	 * Retrieves all groups defined in the system.
! 	 * 
! 	 * @return the names of all groups defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	GroupSet getAllGroups() throws DataBackendException;
! 
! 	/**
! 	 * Retrieves all non-disabled groups defined in the system.
! 	 * 
! 	 * @return the names of all non-disabled groups defined in the system.
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	GroupSet getGroups() throws DataBackendException;
! 
! 	/**
! 	 * Determines if the <code>Group</code> exists in the security system.
! 	 * 
! 	 * @param permission
! 	 *            a <code>Group</code> value
! 	 * @return true if the group exists in the system, false otherwise
! 	 * @throws DataBackendException
! 	 *             when more than one group with the same name exists.
! 	 * @throws Exception
! 	 *             A generic exception.
! 	 */
! 	public boolean checkExists(Group group) throws DataBackendException;
! 
! 	/**
! 	 * Determines if a <code>Group</code> exists in the security system with
! 	 * the specified name.
! 	 * 
! 	 * @param groupName
! 	 *            the name of a <code>Group</code> to check.
! 	 * @return true if the group exists in the system, false otherwise
! 	 * @throws DataBackendException
! 	 *             when more than one group with the same name exists.
! 	 * @throws Exception
! 	 *             A generic exception.
! 	 */
! 	public boolean checkExists(String group) throws DataBackendException;
! 
  }



