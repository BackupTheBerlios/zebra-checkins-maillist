From nobody at sheep.berlios.de  Tue Jan  3 08:48:34 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Tue, 3 Jan 2006 08:48:34 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/resources hibernate.cfg.xml,1.3,1.4
Message-ID: <200601030748.k037mYH00614@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources
In directory sheep:/tmp/cvs-serv7171/src/test/resources

Modified Files:
	hibernate.cfg.xml 
Log Message:
1.2 Release with Hibernate 3.1 release

Index: hibernate.cfg.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources/hibernate.cfg.xml,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** hibernate.cfg.xml	5 Dec 2005 09:52:37 -0000	1.3
--- hibernate.cfg.xml	3 Jan 2006 07:48:31 -0000	1.4
***************
*** 24,28 ****
  		<mapping class="com.anite.zebra.hivemind.om.state.ZebraTaskInstance"/>
  		<mapping class="com.anite.zebra.hivemind.om.state.ZebraTaskInstanceHistory"/>
! 		<mapping resource="DynamicHibernate.hbm.xml"/>
  	</session-factory>
  </hibernate-configuration>
--- 24,32 ----
  		<mapping class="com.anite.zebra.hivemind.om.state.ZebraTaskInstance"/>
  		<mapping class="com.anite.zebra.hivemind.om.state.ZebraTaskInstanceHistory"/>
! 		
! 		<mapping class="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser"/>
! 		<mapping class="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicGroup"/>
! 		<mapping class="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicRole"/>
! 		<mapping class="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicPermission"/>
  	</session-factory>
  </hibernate-configuration>



From nobody at sheep.berlios.de  Tue Jan  3 08:48:34 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Tue, 3 Jan 2006 08:48:34 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.10,1.11
Message-ID: <200601030748.k037mYH00622@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv7171

Modified Files:
	pom.xml 
Log Message:
1.2 Release with Hibernate 3.1 release

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.10
retrieving revision 1.11
diff -C2 -d -r1.10 -r1.11
*** pom.xml	14 Dec 2005 07:43:49 -0000	1.10
--- pom.xml	3 Jan 2006 07:48:32 -0000	1.11
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.1</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.2</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
***************
*** 107,116 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.6</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.5</version>
          </dependency>
          <dependency>
--- 107,116 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.7</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.7</version>
          </dependency>
          <dependency>
***************
*** 178,181 ****
--- 178,186 ----
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-javadoc-plugin</artifactId>
+             </plugin>
+             <plugin>
+                 <groupId>fulcrum-hivemind</groupId>
+                 <artifactId>hivedoc-maven-plugin</artifactId>
+                 <version>0.2</version>
              </plugin>
          </plugins>



From nobody at sheep.berlios.de  Tue Jan  3 08:48:34 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Tue, 3 Jan 2006 08:48:34 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl ZebraSecurityManagerTest.java,1.3,1.4
Message-ID: <200601030748.k037mYH00619@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv7171/src/test/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraSecurityManagerTest.java 
Log Message:
1.2 Release with Hibernate 3.1 release

Index: ZebraSecurityManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraSecurityManagerTest.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** ZebraSecurityManagerTest.java	13 Dec 2005 09:55:58 -0000	1.3
--- ZebraSecurityManagerTest.java	3 Jan 2006 07:48:32 -0000	1.4
***************
*** 30,33 ****
--- 30,34 ----
  import org.apache.fulcrum.security.entity.Permission;
  import org.apache.fulcrum.security.entity.Role;
+ import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
  import org.apache.fulcrum.security.model.dynamic.DynamicModelManager;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicGroup;
***************
*** 66,72 ****
      private Zebra zebra;
  
!     DynamicUser adminUser;
  
!     DynamicUser user;
  
      /*
--- 67,73 ----
      private Zebra zebra;
  
!     HibernateDynamicUser adminUser;
  
!     HibernateDynamicUser user;
  
      /*
***************
*** 163,175 ****
  
          //create user
!         DynamicUser adminUser;
!         DynamicUser user;
  
          userManager = (UserManager) RegistryManager.getInstance().getRegistry().getService(
                  "fulcrum.security.hivemind.userManagerDynamic", org.apache.fulcrum.security.UserManager.class);
  
!         adminUser = (DynamicUser) userManager.getUserInstance("ZEBRA_ADMIN_USER");
  
!         user = (DynamicUser) userManager.getUserInstance("ZEBRA_USER");
          // TODO add authentication stuff
          userManager.addUser(user, "password");
--- 164,176 ----
  
          //create user
!         HibernateDynamicUser adminUser;
!         HibernateDynamicUser user;
  
          userManager = (UserManager) RegistryManager.getInstance().getRegistry().getService(
                  "fulcrum.security.hivemind.userManagerDynamic", org.apache.fulcrum.security.UserManager.class);
  
!         adminUser = (HibernateDynamicUser) userManager.getUserInstance("ZEBRA_ADMIN_USER");
  
!         user = (HibernateDynamicUser) userManager.getUserInstance("ZEBRA_USER");
          // TODO add authentication stuff
          userManager.addUser(user, "password");
***************
*** 198,214 ****
          zebra.startProcess(processInstance);
  
!         List<ZebraTaskInstance> taskList = zebra.getTaskList((DynamicUser) userManager.getUser("ZEBRA_ADMIN_USER"));
  
          assertTrue(checkIfInTaskList(taskList, "First Screen"));
  
!         taskList = zebra.getTaskList((DynamicUser) userManager.getUser("ZEBRA_USER"));
          assertFalse(checkIfInTaskList(taskList, "First Screen"));
          
          testTaskDef(FIRST_SCREEN, processInstance);
  
!         taskList = zebra.getTaskList((DynamicUser) userManager.getUser("ZEBRA_ADMIN_USER"));
          assertTrue(checkIfInTaskList(taskList, "Second Screen"));
          
!         taskList = zebra.getTaskList((DynamicUser) userManager.getUser("ZEBRA_USER"));
          assertTrue(checkIfInTaskList(taskList, "Second Screen"));
          
--- 199,215 ----
          zebra.startProcess(processInstance);
  
!         List<ZebraTaskInstance> taskList = zebra.getTaskList((HibernateDynamicUser) userManager.getUser("ZEBRA_ADMIN_USER"));
  
          assertTrue(checkIfInTaskList(taskList, "First Screen"));
  
!         taskList = zebra.getTaskList((HibernateDynamicUser) userManager.getUser("ZEBRA_USER"));
          assertFalse(checkIfInTaskList(taskList, "First Screen"));
          
          testTaskDef(FIRST_SCREEN, processInstance);
  
!         taskList = zebra.getTaskList((HibernateDynamicUser) userManager.getUser("ZEBRA_ADMIN_USER"));
          assertTrue(checkIfInTaskList(taskList, "Second Screen"));
          
!         taskList = zebra.getTaskList((HibernateDynamicUser) userManager.getUser("ZEBRA_USER"));
          assertTrue(checkIfInTaskList(taskList, "Second Screen"));
          



From nobody at sheep.berlios.de  Tue Jan  3 08:48:33 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Tue, 3 Jan 2006 08:48:33 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl ZebraSecurity.java,1.3,1.4 Zebra.java,1.6,1.7
Message-ID: <200601030748.k037mXH00611@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv7171/src/main/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraSecurity.java Zebra.java 
Log Message:
1.2 Release with Hibernate 3.1 release

Index: ZebraSecurity.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/ZebraSecurity.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** ZebraSecurity.java	13 Dec 2005 09:55:53 -0000	1.3
--- ZebraSecurity.java	3 Jan 2006 07:48:31 -0000	1.4
***************
*** 12,15 ****
--- 12,16 ----
  import org.apache.fulcrum.security.UserManager;
  import org.apache.fulcrum.security.entity.Permission;
+ import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
  import org.apache.fulcrum.security.model.dynamic.DynamicAccessControlList;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
***************
*** 174,182 ****
      }
  
!     public List<ZebraTaskInstance> getOnlyOwnedTaskList(DynamicUser user) {
          throw new NotImplementedException("See Antelope for how to implement");
      }
  
!     public List<ZebraTaskInstance> getOnlyDelegatedTaskList(DynamicUser user) {
          throw new NotImplementedException("See Antelope for how to implement");
      }
--- 175,183 ----
      }
  
!     public List<ZebraTaskInstance> getOnlyOwnedTaskList(HibernateDynamicUser user) {
          throw new NotImplementedException("See Antelope for how to implement");
      }
  
!     public List<ZebraTaskInstance> getOnlyDelegatedTaskList(HibernateDynamicUser user) {
          throw new NotImplementedException("See Antelope for how to implement");
      }

Index: Zebra.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/impl/Zebra.java,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** Zebra.java	5 Dec 2005 16:32:02 -0000	1.6
--- Zebra.java	3 Jan 2006 07:48:31 -0000	1.7
***************
*** 22,25 ****
--- 22,26 ----
  import java.util.Set;
  
+ import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
  
***************
*** 102,111 ****
      }
  
!     public List<ZebraTaskInstance> getOnlyOwnedTaskList(DynamicUser user) {
          
          return zebraSecurity.getOnlyOwnedTaskList(user);
      }
  
!     public List<ZebraTaskInstance> getOnlyDelegatedTaskList(DynamicUser user) {
          
          return zebraSecurity.getOnlyDelegatedTaskList(user);
--- 103,112 ----
      }
  
!     public List<ZebraTaskInstance> getOnlyOwnedTaskList(HibernateDynamicUser user) {
          
          return zebraSecurity.getOnlyOwnedTaskList(user);
      }
  
!     public List<ZebraTaskInstance> getOnlyDelegatedTaskList(HibernateDynamicUser user) {
          
          return zebraSecurity.getOnlyDelegatedTaskList(user);
***************
*** 136,140 ****
       * 
       */
!     public void killProcess(ZebraProcessInstance processInstance, DynamicUser owner) throws StateFailureException,
              DestructException {
  
--- 137,141 ----
       * 
       */
!     public void killProcess(ZebraProcessInstance processInstance, HibernateDynamicUser owner) throws StateFailureException,
              DestructException {
  



From nobody at sheep.berlios.de  Tue Jan  3 08:48:33 2006
From: nobody at sheep.berlios.de (bgidley)
Date: Tue, 3 Jan 2006 08:48:33 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state ZebraProcessInstance.java,1.7,1.8 AbstractZebraTaskInstance.java,1.4,1.5
Message-ID: <200601030748.k037mXH00607@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state
In directory sheep:/tmp/cvs-serv7171/src/main/java/com/anite/zebra/hivemind/om/state

Modified Files:
	ZebraProcessInstance.java AbstractZebraTaskInstance.java 
Log Message:
1.2 Release with Hibernate 3.1 release

Index: ZebraProcessInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/ZebraProcessInstance.java,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** ZebraProcessInstance.java	5 Dec 2005 16:32:00 -0000	1.7
--- ZebraProcessInstance.java	3 Jan 2006 07:48:31 -0000	1.8
***************
*** 46,50 ****
  import org.apache.fulcrum.security.PermissionManager;
  import org.apache.fulcrum.security.entity.Permission;
! import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.PermissionSet;
--- 46,50 ----
  import org.apache.fulcrum.security.PermissionManager;
  import org.apache.fulcrum.security.entity.Permission;
! import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.PermissionSet;
***************
*** 105,109 ****
  
      /** The user that activated this process */
!     private DynamicUser activatedBy;
  
      /** The property set catch all for anything at all */
--- 105,109 ----
  
      /** The user that activated this process */
!     private HibernateDynamicUser activatedBy;
  
      /** The property set catch all for anything at all */
***************
*** 225,228 ****
--- 225,230 ----
       * @hibernate.collection-cache usage="transactional"
       * @return Returns the dynamicPermissionMap.
+      * 
+      * @TODO implement me using CollectionOfElements once Hibernate Annonations B7 is integrated
       */
      @Transient
***************
*** 374,382 ****
       */
      @ManyToOne
!     public DynamicUser getActivatedBy() {
          return this.activatedBy;
      }
  
!     public void setActivatedBy(DynamicUser activatedBy) {
          this.activatedBy = activatedBy;
      }
--- 376,384 ----
       */
      @ManyToOne
!     public HibernateDynamicUser getActivatedBy() {
          return this.activatedBy;
      }
  
!     public void setActivatedBy(HibernateDynamicUser activatedBy) {
          this.activatedBy = activatedBy;
      }

Index: AbstractZebraTaskInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/AbstractZebraTaskInstance.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** AbstractZebraTaskInstance.java	5 Dec 2005 09:52:36 -0000	1.4
--- AbstractZebraTaskInstance.java	3 Jan 2006 07:48:31 -0000	1.5
***************
*** 33,37 ****
  import org.apache.commons.lang.exception.NestableException;
  import org.apache.fulcrum.security.entity.Permission;
! import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
  import org.apache.fulcrum.security.util.PermissionSet;
  
--- 33,37 ----
  import org.apache.commons.lang.exception.NestableException;
  import org.apache.fulcrum.security.entity.Permission;
! import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
  import org.apache.fulcrum.security.util.PermissionSet;
  
***************
*** 67,71 ****
  	private String routingAnswer;
  
! 	private DynamicUser taskOwner;
  
  	private String caption;
--- 67,71 ----
  	private String routingAnswer;
  
! 	private HibernateDynamicUser taskOwner;
  
  	private String caption;
***************
*** 81,85 ****
  	private Date actualCompletionDate;
  
! 	private DynamicUser decisionMadeBy;
  
  	private Priority priority;
--- 81,85 ----
  	private Date actualCompletionDate;
  
! 	private HibernateDynamicUser decisionMadeBy;
  
  	private Priority priority;
***************
*** 221,229 ****
  
  	@ManyToOne
! 	public DynamicUser getTaskOwner() {
  		return this.taskOwner;
  	}
  
! 	public void setTaskOwner(DynamicUser user) {
  		this.taskOwner = user;
  	}
--- 221,229 ----
  
  	@ManyToOne
! 	public HibernateDynamicUser getTaskOwner() {
  		return this.taskOwner;
  	}
  
! 	public void setTaskOwner(HibernateDynamicUser user) {
  		this.taskOwner = user;
  	}
***************
*** 304,308 ****
  	 */
  	@ManyToOne
! 	public DynamicUser getDecisionMadeBy() {
  		return this.decisionMadeBy;
  	}
--- 304,308 ----
  	 */
  	@ManyToOne
! 	public HibernateDynamicUser getDecisionMadeBy() {
  		return this.decisionMadeBy;
  	}
***************
*** 313,317 ****
  	 * set
  	 */
! 	public void setDecisionMadeBy(DynamicUser decisionMadeBy) {
  		this.decisionMadeBy = decisionMadeBy;
  	}
--- 313,317 ----
  	 * set
  	 */
! 	public void setDecisionMadeBy(HibernateDynamicUser decisionMadeBy) {
  		this.decisionMadeBy = decisionMadeBy;
  	}



From nobody at sheep.berlios.de  Wed Jan  4 12:38:29 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 12:38:29 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz - New directory
Message-ID: <200601041138.k04BcTH05503@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz
In directory sheep:/tmp/cvs-serv24533/fulcrum-hivemind-quartz

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:51 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:51 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/.settings - New directory
Message-ID: <200601041205.k04C5pH06676@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/.settings
In directory sheep:/tmp/cvs-serv6701/.settings

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/.settings added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:52 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:52 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org - New directory
Message-ID: <200601041205.k04C5qH06689@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org
In directory sheep:/tmp/cvs-serv6701/src/main/java/org

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:52 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:52 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum - New directory
Message-ID: <200601041205.k04C5qH06697@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum
In directory sheep:/tmp/cvs-serv6701/src/main/java/org/apache/fulcrum

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:52 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:52 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory - New directory
Message-ID: <200601041205.k04C5qH06704@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory
In directory sheep:/tmp/cvs-serv6701/src/main/java/org/apache/fulcrum/quartz/factory

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:51 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:51 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java - New directory
Message-ID: <200601041205.k04C5pH06686@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java
In directory sheep:/tmp/cvs-serv6701/src/main/java

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:51 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:51 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src - New directory
Message-ID: <200601041205.k04C5pH06680@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src
In directory sheep:/tmp/cvs-serv6701/src

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:51 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:51 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main - New directory
Message-ID: <200601041205.k04C5pH06683@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main
In directory sheep:/tmp/cvs-serv6701/src/main

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:52 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:52 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz - New directory
Message-ID: <200601041205.k04C5qH06700@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz
In directory sheep:/tmp/cvs-serv6701/src/main/java/org/apache/fulcrum/quartz

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:52 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:52 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache - New directory
Message-ID: <200601041205.k04C5qH06694@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache
In directory sheep:/tmp/cvs-serv6701/src/main/java/org/apache

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:58 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:58 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz - New directory
Message-ID: <200601041205.k04C5wH06743@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz
In directory sheep:/tmp/cvs-serv6701/src/test/java/org/apache/fulcrum/quartz

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:58 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:58 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache - New directory
Message-ID: <200601041205.k04C5wH06735@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache
In directory sheep:/tmp/cvs-serv6701/src/test/java/org/apache

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:58 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:58 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum - New directory
Message-ID: <200601041205.k04C5wH06739@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum
In directory sheep:/tmp/cvs-serv6701/src/test/java/org/apache/fulcrum

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:57 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:57 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/java - New directory
Message-ID: <200601041205.k04C5vH06728@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java
In directory sheep:/tmp/cvs-serv6701/src/test/java

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:06:00 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:00 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/resources - New directory
Message-ID: <200601041206.k04C60H06752@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources
In directory sheep:/tmp/cvs-serv6701/src/test/resources

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:55 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:55 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/resources/META-INF - New directory
Message-ID: <200601041205.k04C5tH06715@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/resources/META-INF
In directory sheep:/tmp/cvs-serv6701/src/main/resources/META-INF

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/resources/META-INF added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:57 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:57 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test - New directory
Message-ID: <200601041205.k04C5vH06724@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test
In directory sheep:/tmp/cvs-serv6701/src/test

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:55 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:55 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/resources - New directory
Message-ID: <200601041205.k04C5tH06713@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/resources
In directory sheep:/tmp/cvs-serv6701/src/main/resources

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/resources added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:05:58 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:58 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org - New directory
Message-ID: <200601041205.k04C5wH06731@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org
In directory sheep:/tmp/cvs-serv6701/src/test/java/org

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:06:09 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:09 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/resources/META-INF hivemodule-quartztest.xml,NONE,1.1
Message-ID: <200601041206.k04C69H06796@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources/META-INF
In directory sheep:/tmp/cvs-serv6930/src/test/resources/META-INF

Added Files:
	hivemodule-quartztest.xml 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: hivemodule-quartztest.xml ---
<?xml version="1.0"?>
<module id="fulcrum.quartz.test" version="1.0.0">
    <implementation service-id="fulcrum.quartz.QuartzSchedulerFactory">
        <invoke-factory model="singleton">
            <construct class="org.apache.fulcrum.quartz.factory.QuartzSchedulerFactory"/>
        </invoke-factory>
    </implementation>
</module>



From nobody at sheep.berlios.de  Wed Jan  4 13:06:08 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:08 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/resources .cvsignore,NONE,1.1 log4j.properties,NONE,1.1 mcKoi.conf,NONE,1.1 hibernate.cfg.xml,NONE,1.1
Message-ID: <200601041206.k04C68H06788@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources
In directory sheep:/tmp/cvs-serv6930/src/test/resources

Added Files:
	.cvsignore log4j.properties mcKoi.conf hibernate.cfg.xml 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: .cvsignore ---
data

--- NEW FILE: log4j.properties ---
log4j.rootLogger = INFO, stdout

# BEGIN HIBERNATE SECTION
### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n
--- NEW FILE: mcKoi.conf ---

#######################################################
#
# Configuration options for the Mckoi SQL Database.
#
#   This is a configuration for the simple database
#   demonstrations.
#
#
# NOTE: Lines starting with '#' are comments.
#
#######################################################

#
# database_path - The path where the database data files
#   are located.
#   See the 'root_path' configuration property for the
#   details of how the engine resolves this to an
#   absolute path in your file system.

database_path=./data
storage_system = v1file

#
# log_path - The path the log files are written.
#   See the 'root_path' configuration property for the
#   details of how the engine resolves this to an
#   absolute path in your file system.
#   The log path must point to a writable directory.  If
#   no log files are to be kept, then comment out (or
#   remove) the 'log_path' variable.

log_path=../../target/mckoi/log

#
# root_path - If this is set to 'jvm' then the root
#   path of all database files is the root path of the
#   JVM (Java virtual machine) running the database
#   engine.  If this property is set to 'configuration'
#   or if it is not present then the root path is the
#   path of this configuration file.
#   This property is useful if you are deploying a
#   database and need this configuration file to be the
#   root of the directory tree of the database files.

root_path=configuration
#root_path=jvm

#
# jdbc_server_port - The TCP/IP port on this host where
#   the database server is mounted.  The default port
#   of the Mckoi SQL Database server is '9157'

jdbc_server_port=9157

#
# ignore_case_for_identifiers - If enabled all
#   identifiers are compared case insensitive.  If
#   disabled (the default) the case of the identifier
#   is important.
#   For example, if a table called 'MyTable' contains
#   a column called 'my_column' and this property is
#   enabled, the identifier 'MYTAble.MY_COlumN' will
#   correctly reference the column of the table.  If
#   this property is disable a not found error is
#   generated.
#   This property is intended for compatibility with
#   other database managements systems where the case
#   of identifiers is not important.

ignore_case_for_identifiers=disabled


# ----- PLUG-INS -----

#
# function_factories - Registers one or more FunctionFactory
#   classes with the database at boot time.  A
#   FunctionFactory allows user-defined functions to be
#   incorporated into the SQL language.  Each factory class
#   is separated by a semi-colon (;) character.
#
#function_factories=mypackage.MyFunctionFactory

#
# The Java regular expression library to use.  Currently
# the engine supports the Apache Jakarta regular expression
# library, and the GNU LGPL regular expression library.
# These two regular expression libraries can be found at the
# following web sites:
#
# GNU Regexp: http://www.cacas.org/~wes/java/
# Apache Regexp: http://jakarta.apache.org/regexp/
#
# The libraries provide similar functionality, however they
# are released under a different license.  The GNU library
# is released under the LGPL and is compatible with GPL
# distributions of the database.  The Apache Jakarta library
# is released under the Apache Software License and must not
# be linked into GPL distributions.
#
# Use 'regex_library=gnu.regexp' to use the GNU library, or
# 'regex_library=org.apache.regexp' to use the Apache
# library.
#
# NOTE: To use either library, you must include the
#  respective .jar package in the Java classpath.

regex_library=gnu.regexp




# ----- PERFORMANCE -----

#
# data_cache_size - The maximum amount of memory (in bytes)
#   to allow the memory cache to grow to.  If this is set
#   to a value < 4096 then the internal cache is disabled.
#   It is recommended that a database server should provide
#   a cache of 4 Megabytes (4194304).  A stand alone
#   database need not have such a large cache.

data_cache_size=2097152

#
# max_cache_entry_size - The maximum size of an element
#   in the data cache.  This is available for tuning
#   reasons and the value here is dependant on the type
#   of data being stored.  If your data has more larger
#   fields that would benefit from being stored in the
#   cache then increase this value from its default of
#   8192 (8k).

max_cache_entry_size=8192

#
# max_worker_threads - The maximum number of worker
#   threads that can be spawned to handle incoming
#   requests.  The higher this number, the more
#   'multi-threaded' the database becomes.  The
#   default setting is '4'.

maximum_worker_threads=2

#
# dont_synch_filesystem - If this is enabled, the engine
#   will not synchronize the file handle when a table change
#   is committed.  This will mean the data is not as
#   safe but the 'commit' command will work faster.  If this
#   is enabled, there is a chance that committed changes will
#   not get a chance to flush to the file system if the
#   system crashes.
#
#   It is recommended this property is left commented out.
#
#dont_synch_filesystem=enabled

#
# transaction_error_on_dirty_select - If this is disabled
#   the 4th conflict (dirty read on modified table) will
#   not be detected.  This has transactional consequences
#   that will cause data modifications to sometimes be
#   out of syncronization.  For example, one transaction
#   adds an entry, and another concurrent transaction
#   deletes all entries.  If this is disabled this
#   conflict will not be detected.  The table will end up
#   with the one entry added after commit.
#
#   It is recommended this property is left commented out.
#
#transaction_error_on_dirty_select=disabled




# ----- SPECIAL -----

#
# read_only - If this is set to 'enabled' then the database
#   is readable and not writable.  You may boot a database
#   in read only mode from multiple VM's.  If the database
#   data files are stored on a read only medium such as a
#   CD, then the property must be enabled else it will not
#   be possible to boot the database.
#   ( Uncomment the line below for read only mode )
#read_only=enabled




# ----- DEBUGGING -----

#
# debug_log_file - The file that is used to log all debug
#   information.  This file is stored in the 'log_path'
#   path.

debug_log_file=debug.log

#
# debug_level - The minimum debug level of messages that
#   are written to the log file.  Reducing this number
#   will cause more debug information to be written to
#   the log.
#     10 = INFORMATION
#     20 = WARNINGS
#     30 = ALERTS
#     40 = ERRORS

debug_level=20

--- NEW FILE: hibernate.cfg.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<!-- Generated file - Do not edit! -->
<hibernate-configuration>
  <!-- a SessionFactory instance listed as /jndi/name -->
  <session-factory>
    <property name="show_sql">false</property>
    <property name="use_outer_join">auto</property>
    <!-- properties for this SessionFactory only -->
    <property name="hibernate.cglib.use_reflection_optimizer">false</property>
    <property name="connection.driver_class">com.mckoi.JDBCDriver</property>
    <property name="connection.username">test</property>
    <property name="connection.password">test</property>
    <property name="connection.url">jdbc:mckoi:local://./src/test/resources/mcKoi.conf?create_or_boot=true</property>
    <property name="dialect">org.hibernate.dialect.MckoiDialect</property>
	</session-factory>
</hibernate-configuration>



From nobody at sheep.berlios.de  Wed Jan  4 13:06:09 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:09 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/.settings org.eclipse.jdt.ui.prefs,NONE,1.1 org.eclipse.jdt.core.prefs,NONE,1.1
Message-ID: <200601041206.k04C69H06804@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/.settings
In directory sheep:/tmp/cvs-serv6930/.settings

Added Files:
	org.eclipse.jdt.ui.prefs org.eclipse.jdt.core.prefs 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: org.eclipse.jdt.ui.prefs ---
#Tue Dec 20 09:33:30 GMT 2005
eclipse.preferences.version=1
internal.default.compliance=default

--- NEW FILE: org.eclipse.jdt.core.prefs ---
#Tue Dec 20 09:42:51 GMT 2005
org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
eclipse.preferences.version=1
org.eclipse.jdt.core.compiler.source=1.5
org.eclipse.jdt.core.compiler.compliance=1.5



From nobody at sheep.berlios.de  Wed Jan  4 13:06:09 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:09 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz pom.xml,NONE,1.1 .cvsignore,NONE,1.1
Message-ID: <200601041206.k04C69H06802@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz
In directory sheep:/tmp/cvs-serv6930

Added Files:
	pom.xml .cvsignore 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: pom.xml ---
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>fulcrum-hivemind</groupId>
    <artifactId>fulcrum-quartz</artifactId>
    <packaging>jar</packaging>
    <version>1.0.0</version>
    <name>fulcrum-hivemind-quartz - Scheduler factory for Hivemind</name>
    <url>http://gnasher.aniteps.com/docs/</url>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>eclipse</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.5</source>
                    <target>1.5</target>
                </configuration>
            </plugin>
	        </plugins>
    </build>
    <repositories>
        <repository>
            <id>Anite</id>
            <name>Anite Mirror</name>
            <layout>default</layout>
            <url>http://gnasher.aniteps.com/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>Zebra2</id>
            <name>Zebra</name>
            <layout>default</layout>
            <url>http://zebra.berlios.de/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>Zebra</id>
            <name>Zebra</name>
            <layout>legacy</layout>
            <url>http://zebra.berlios.de/MavenRepository</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <dependencies>
        <dependency>
            <groupId>fulcrum-hivemind</groupId>
            <artifactId>fulcrum-hivemind</artifactId>
            <version>1.3</version>
        </dependency>
        <dependency>
            <groupId>quartz</groupId>
            <artifactId>quartz</artifactId>
            <version>1.5.1</version>
        </dependency>
        <dependency>
            <groupId>fulcrum-hivemind</groupId>
            <artifactId>fulcrum-hibernate</artifactId>
            <version>1.7</version>
        </dependency>
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.2.1</version>
        </dependency>
    </dependencies>
    <distributionManagement>
        <repository>
            <id>zebra-berlios</id>
            <url>scp://shell.berlios.de/home/groups/zebra/htdocs/maven2</url>
        </repository>
        <site>
            <id>zebra-berlios</id>
            <url>scp://shell.berlios.de/home/groups/zebra/htdocs/cc/fulcrum-quartz</url>
        </site>
    </distributionManagement>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jxr-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>changelog-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>surefire-report-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>fulcrum-hivemind</groupId>
                <artifactId>hivedoc-maven-plugin</artifactId>
                <version>0.2</version>
            </plugin>
        </plugins>
    </reporting>
</project>

--- NEW FILE: .cvsignore ---
.classpath
.project
.wtpmodules
target
bin



From nobody at sheep.berlios.de  Wed Jan  4 13:06:10 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:10 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/resources/META-INF hivemodule.xml,NONE,1.1
Message-ID: <200601041206.k04C6AH06807@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/resources/META-INF
In directory sheep:/tmp/cvs-serv6930/src/main/resources/META-INF

Added Files:
	hivemodule.xml 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: hivemodule.xml ---
<?xml version="1.0"?>
<module id="fulcrum.quartz" version="1.0.0">
    <!-- quartz scheduler -->
    <service-point id="Scheduler" interface="org.quartz.Scheduler">
        <invoke-factory service-id="QuartzSchedulerFactory" model="singleton">
            <construct/>
        </invoke-factory>
        <interceptor service-id="hivemind.LoggingInterceptor"/>
    </service-point>
    <service-point id="QuartzSchedulerFactory"
        interface="org.apache.fulcrum.quartz.factory.QuartzSchedulerFactory">
        <invoke-factory model="singleton">
            <construct class="org.apache.fulcrum.quartz.factory.QuartzSchedulerFactory"/>
        </invoke-factory>
        <interceptor service-id="hivemind.LoggingInterceptor"/>
    </service-point>
	<contribution configuration-id="hivemind.EagerLoad">
		<load service-id="fulcrum.quartz.Scheduler"/>
	</contribution>
</module>



From nobody at sheep.berlios.de  Wed Jan  4 13:06:08 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:08 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables CreateMcKoiTables.java,NONE,1.1 CreateTables.java,NONE,1.1 CreatePostgresTables.java,NONE,1.1
Message-ID: <200601041206.k04C68H06785@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables
In directory sheep:/tmp/cvs-serv6930/src/main/java/org/apache/fulcrum/quartz/tables

Added Files:
	CreateMcKoiTables.java CreateTables.java 
	CreatePostgresTables.java 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: CreateMcKoiTables.java ---
package org.apache.fulcrum.quartz.tables;

public class CreateMcKoiTables extends CreateTables{

	
	public void addCommands() {
		addSql("drop table if exists qrtz_job_listeners;");
		addSql("drop table if exists qrtz_trigger_listeners;");
		addSql("drop table if exists qrtz_fired_triggers;");
		addSql("drop TABLE if exists qrtz_paused_trigger_grps;");
		addSql("drop TABLE if exists qrtz_scheduler_state;");
		addSql("drop TABLE if exists qrtz_locks;");
		addSql("drop table if exists qrtz_simple_triggers;");
		addSql("drop table if exists qrtz_cron_triggers;");
		addSql("drop TABLE if exists qrtz_blob_triggers;");
		addSql("drop table if exists qrtz_triggers;");
		addSql("drop table if exists qrtz_job_details;");
		addSql("drop table if exists qrtz_calendars;");
		addSql("CREATE TABLE APP.qrtz_job_details  ( JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, DESCRIPTION VARCHAR(120) NULL, JOB_CLASS_NAME   VARCHAR(128) NOT NULL, IS_DURABLE VARCHAR(1) NOT NULL, IS_VOLATILE VARCHAR(1) NOT NULL, IS_STATEFUL VARCHAR(1) NOT NULL, REQUESTS_RECOVERY VARCHAR(1) NOT NULL, JOB_DATA binary NULL, PRIMARY KEY (JOB_NAME,JOB_GROUP));");
		addSql("CREATE TABLE APP.qrtz_job_listeners ( JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, JOB_LISTENER VARCHAR(80) NOT NULL, PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER), FOREIGN KEY (JOB_NAME,JOB_GROUP) REFERENCES qrtz_job_details(JOB_NAME,JOB_GROUP));");
		addSql("CREATE TABLE APP.qrtz_triggers (TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, IS_VOLATILE VARCHAR(1) NOT NULL, DESCRIPTION VARCHAR(120) NULL, NEXT_FIRE_TIME BIGINT NULL, PREV_FIRE_TIME BIGINT NULL, TRIGGER_STATE VARCHAR(16) NOT NULL, TRIGGER_TYPE VARCHAR(8) NOT NULL, START_TIME BIGINT NOT NULL, END_TIME BIGINT NULL, CALENDAR_NAME VARCHAR(80) NULL, MISFIRE_INSTR SMALLINT NULL, JOB_DATA binary NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (JOB_NAME,JOB_GROUP) REFERENCES qrtz_job_details(JOB_NAME,JOB_GROUP));");
		addSql("CREATE TABLE APP.qrtz_simple_triggers ( TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, REPEAT_COUNT BIGINT NOT NULL, REPEAT_INTERVAL BIGINT NOT NULL, TIMES_TRIGGERED BIGINT NOT NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES qrtz_triggers(TRIGGER_NAME,TRIGGER_GROUP));");
		addSql("CREATE TABLE APP.qrtz_cron_triggers (TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, CRON_EXPRESSION VARCHAR(80) NOT NULL, TIME_ZONE_ID VARCHAR(80), PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES qrtz_triggers(TRIGGER_NAME,TRIGGER_GROUP));");
		addSql("CREATE TABLE APP.qrtz_blob_triggers ( TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, BLOB_DATA binary NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES qrtz_triggers(TRIGGER_NAME,TRIGGER_GROUP));");
		addSql("CREATE TABLE APP.qrtz_trigger_listeners ( TRIGGER_NAME  VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, TRIGGER_LISTENER VARCHAR(80) NOT NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES qrtz_triggers(TRIGGER_NAME,TRIGGER_GROUP));");
		addSql("CREATE TABLE APP.qrtz_calendars ( CALENDAR_NAME  VARCHAR(80) NOT NULL, CALENDAR binary NOT NULL, PRIMARY KEY (CALENDAR_NAME));");
		addSql("CREATE TABLE APP.qrtz_paused_trigger_grps (TRIGGER_GROUP  VARCHAR(80) NOT NULL, PRIMARY KEY (TRIGGER_GROUP));");
		addSql("CREATE TABLE APP.qrtz_fired_triggers  ( ENTRY_ID VARCHAR(95) NOT NULL, TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, IS_VOLATILE VARCHAR(1) NOT NULL, INSTANCE_NAME VARCHAR(80) NOT NULL, FIRED_TIME BIGINT NOT NULL, STATE VARCHAR(16) NOT NULL, JOB_NAME VARCHAR(80) NULL, JOB_GROUP VARCHAR(80) NULL, IS_STATEFUL VARCHAR(1) NULL, REQUESTS_RECOVERY VARCHAR(1) NULL, PRIMARY KEY (ENTRY_ID));");
		addSql("CREATE TABLE APP.qrtz_scheduler_state ( INSTANCE_NAME VARCHAR(80) NOT NULL, LAST_CHECKIN_TIME BIGINT NOT NULL, CHECKIN_INTERVAL BIGINT NOT NULL, RECOVERER VARCHAR(80) NULL, PRIMARY KEY (INSTANCE_NAME));");
		addSql("CREATE TABLE APP.qrtz_locks (LOCK_NAME  VARCHAR(40) NOT NULL, PRIMARY KEY (LOCK_NAME));");
		addSql("INSERT INTO qrtz_locks values('TRIGGER_ACCESS');");
		addSql("INSERT INTO qrtz_locks values('JOB_ACCESS');");
		addSql("INSERT INTO qrtz_locks values('CALENDAR_ACCESS');");
		addSql("INSERT INTO qrtz_locks values('STATE_ACCESS');");
		addSql("INSERT INTO qrtz_locks values('MISFIRE_ACCESS');");
		addSql("commit;");
		}

}

--- NEW FILE: CreateTables.java ---
package org.apache.fulcrum.quartz.tables;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;

public abstract class CreateTables {

	private ArrayList<String> sql = new ArrayList<String>();

	protected void addSql(String sqlCommand) {
		sql.add(sqlCommand);
	}

	public void createTables(Connection conn) throws SQLException {
		addCommands();
		Iterator<String> itr = sql.iterator();
		while (itr.hasNext()) {
			try
			{
				Statement stmt = conn.createStatement();
				String q = itr.next();
				System.out.println(q);
				conn.setAutoCommit(true);
				stmt.execute(q);
			}
			catch (SQLException sqle)
			{
				/*
				 * ignore this if it is a table does not exist exception from
				 * postgresql on a drop statement.
				 */
				if (!sqle.getMessage().endsWith("does not exist"))
				{
					sqle.printStackTrace();
				}
			}
		}
		conn.setAutoCommit(false);

	}

	public abstract void addCommands();
}

--- NEW FILE: CreatePostgresTables.java ---
package org.apache.fulcrum.quartz.tables;

/**
 * use this for postgreSQL
 * @author peter
 *
 */
public class CreatePostgresTables extends CreateTables{
	
	
	public void addCommands() {
	addSql("DROP TABLE qrtz_locks;");
	addSql("CREATE TABLE qrtz_locks (LOCK_NAME  VARCHAR(40) NOT NULL, PRIMARY KEY (LOCK_NAME));");
	addSql("drop table qrtz_job_listeners;");
	addSql("drop table qrtz_trigger_listeners;");
	addSql("drop table qrtz_fired_triggers;");
	addSql("DROP TABLE qrtz_paused_trigger_grps;");
	addSql("DROP TABLE qrtz_scheduler_state;");
	addSql("drop table qrtz_simple_triggers;");
	addSql("drop table qrtz_cron_triggers;");
	addSql("DROP TABLE qrtz_blob_triggers;");
	addSql("drop table qrtz_triggers;");
	addSql("drop table qrtz_job_details;");
	addSql("drop table qrtz_calendars;");
	addSql("CREATE TABLE qrtz_job_details (JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, DESCRIPTION VARCHAR(120) NULL, JOB_CLASS_NAME VARCHAR(128) NOT NULL, IS_DURABLE BOOL NOT NULL, IS_VOLATILE BOOL NOT NULL, IS_STATEFUL BOOL NOT NULL, REQUESTS_RECOVERY BOOL NOT NULL, JOB_DATA BYTEA NULL, PRIMARY KEY (JOB_NAME,JOB_GROUP));");
	addSql("CREATE TABLE qrtz_job_listeners ( JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, JOB_LISTENER VARCHAR(80) NOT NULL, PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER), FOREIGN KEY (JOB_NAME,JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP));");
	addSql("CREATE TABLE qrtz_triggers (TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, IS_VOLATILE BOOL NOT NULL, DESCRIPTION VARCHAR(120) NULL, NEXT_FIRE_TIME BIGINT NULL, PREV_FIRE_TIME BIGINT NULL, TRIGGER_STATE VARCHAR(16) NOT NULL, TRIGGER_TYPE VARCHAR(8) NOT NULL, START_TIME BIGINT NOT NULL, END_TIME BIGINT NULL, CALENDAR_NAME VARCHAR(80) NULL, MISFIRE_INSTR SMALLINT NULL, JOB_DATA BYTEA NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (JOB_NAME,JOB_GROUP)REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP));");
	addSql("CREATE TABLE qrtz_simple_triggers ( TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, REPEAT_COUNT BIGINT NOT NULL, REPEAT_INTERVAL BIGINT NOT NULL, TIMES_TRIGGERED BIGINT NOT NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
	addSql("CREATE TABLE qrtz_cron_triggers (TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, CRON_EXPRESSION VARCHAR(80) NOT NULL, TIME_ZONE_ID VARCHAR(80), PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
	addSql("CREATE TABLE qrtz_blob_triggers ( TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, BLOB_DATA BYTEA NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
	addSql("CREATE TABLE qrtz_trigger_listeners ( TRIGGER_NAME  VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, TRIGGER_LISTENER VARCHAR(80) NOT NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
	addSql("CREATE TABLE qrtz_calendars ( CALENDAR_NAME  VARCHAR(80) NOT NULL, CALENDAR BYTEA NOT NULL, PRIMARY KEY (CALENDAR_NAME));");
	addSql("CREATE TABLE qrtz_paused_trigger_grps (TRIGGER_GROUP  VARCHAR(80) NOT NULL, PRIMARY KEY (TRIGGER_GROUP));");
	addSql("CREATE TABLE qrtz_fired_triggers  ( ENTRY_ID VARCHAR(95) NOT NULL, TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, IS_VOLATILE BOOL NOT NULL, INSTANCE_NAME VARCHAR(80) NOT NULL, FIRED_TIME BIGINT NOT NULL, STATE VARCHAR(16) NOT NULL, JOB_NAME VARCHAR(80) NULL, JOB_GROUP VARCHAR(80) NULL, IS_STATEFUL BOOL NULL, REQUESTS_RECOVERY BOOL NULL, PRIMARY KEY (ENTRY_ID));");
	addSql("CREATE TABLE qrtz_scheduler_state ( INSTANCE_NAME VARCHAR(80) NOT NULL, LAST_CHECKIN_TIME BIGINT NOT NULL, CHECKIN_INTERVAL BIGINT NOT NULL, RECOVERER VARCHAR(80) NULL, PRIMARY KEY (INSTANCE_NAME));");
	addSql("INSERT INTO qrtz_locks values('TRIGGER_ACCESS');");
	addSql("INSERT INTO qrtz_locks values('JOB_ACCESS');");
	addSql("INSERT INTO qrtz_locks values('CALENDAR_ACCESS');");
	addSql("INSERT INTO qrtz_locks values('STATE_ACCESS');");
	addSql("INSERT INTO qrtz_locks values('MISFIRE_ACCESS');");
	}
	

	


	
	
	
	
	

	

	
}



From nobody at sheep.berlios.de  Wed Jan  4 13:06:09 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:09 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory QuartzSchedulerFactory.java,NONE,1.1
Message-ID: <200601041206.k04C69H06792@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory
In directory sheep:/tmp/cvs-serv6930/src/main/java/org/apache/fulcrum/quartz/factory

Added Files:
	QuartzSchedulerFactory.java 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: QuartzSchedulerFactory.java ---
package org.apache.fulcrum.quartz.factory;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import org.apache.commons.lang.exception.NestableRuntimeException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.fulcrum.hibernate.factory.HibernateSessionFactory;
import org.apache.fulcrum.quartz.tables.CreateMcKoiTables;
import org.apache.fulcrum.quartz.tables.CreatePostgresTables;
import org.apache.hivemind.ServiceImplementationFactory;
import org.apache.hivemind.ServiceImplementationFactoryParameters;
import org.apache.hivemind.events.RegistryShutdownListener;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.impl.StdSchedulerFactory;

public class QuartzSchedulerFactory implements ServiceImplementationFactory,
		RegistryShutdownListener {

	private static final Log log = LogFactory
			.getLog(QuartzSchedulerFactory.class);

	private static final String HIBERNATE_DRIVER_KEY = "hibernate.connection.driver_class";

	private static final String HIBERNATE_PASSWORD_KEY = "hibernate.connection.password";

	private static final String HIBERNATE_URL_KEY = "hibernate.connection.url";

	private static final String HIBERNATE_USERNAME_KEY = "hibernate.connection.username";

	private static final String HIBERNATE_POOL_SIZE_KEY = "hibernate.connection.pool_size";

	private static final String DEFAULT_MAX_CONNECTIONS = "10";

	/*
	 * This class only supports use of the following databases/drivers
	 * to support a new db, create a new class to create the tables using
	 * the McKoi or Postgres ones as an example and add the appropriate 
	 * block into the createTables method.
	 */
	private static final String MCKOI = "com.mckoi.JDBCDriver";
	private static final String POSTGRESQL = "org.postgresql.Driver";
	
	private SchedulerFactory schedulerFactory = new StdSchedulerFactory();

	private Scheduler scheduler = null;

	private HibernateSessionFactory hibernateSessionFactory = null;

	public HibernateSessionFactory getHibernateSessionFactory() {
		return hibernateSessionFactory;
	}

	public void setHibernateSessionFactory(
			HibernateSessionFactory hibernateSessionFactory) {
		this.hibernateSessionFactory = hibernateSessionFactory;
	}

	public Object createCoreServiceImplementation(
			ServiceImplementationFactoryParameters arg0) {
		try {
			/*
			 * check and see if we have scheduler tables in the DB.
			 */
			Properties hibernateProperties = hibernateSessionFactory
					.getHibernateProperties();
			String driver = hibernateProperties.getProperty(HIBERNATE_DRIVER_KEY);
			System.out.println("url:" +hibernateProperties.getProperty(HIBERNATE_URL_KEY));
			System.out.println("username:" +hibernateProperties.getProperty(HIBERNATE_USERNAME_KEY));
			System.out.println("password:" +hibernateProperties.getProperty(HIBERNATE_PASSWORD_KEY));
			checkTables(driver);
			Properties defaults = new Properties();
			defaults.load(this.getClass().getResourceAsStream(
					"/quartz.properties"));
			defaults.put("org.quartz.dataSource.quartzDS.driver",
					hibernateProperties.getProperty(HIBERNATE_DRIVER_KEY));
			defaults.put("org.quartz.dataSource.quartzDS.URL",
					hibernateProperties.getProperty(HIBERNATE_URL_KEY));
			defaults.put("org.quartz.dataSource.quartzDS.user",
					hibernateProperties.getProperty(HIBERNATE_USERNAME_KEY));
			defaults.put("org.quartz.dataSource.quartzDS.password",
					hibernateProperties.getProperty(HIBERNATE_PASSWORD_KEY));
			defaults.put("org.quartz.dataSource.quartzDS.maxConnections",
					DEFAULT_MAX_CONNECTIONS);
			System.out.println(defaults.toString());
			SchedulerFactory schedulerFactory = new StdSchedulerFactory(
					defaults);
			scheduler = schedulerFactory.getScheduler();
			scheduler.start();
		} catch (IOException ioe) {
			throw new NestableRuntimeException(ioe);
		} catch (SchedulerException se) {
			throw new NestableRuntimeException(se);
		} catch (SQLException sqle) {
			log.error("SQLException caught:", sqle);
			throw new NestableRuntimeException(sqle);
		}
		
		return scheduler;
	}

	public void registryDidShutdown() {
		try {
			scheduler.shutdown();
			scheduler = null;
		} catch (SchedulerException se) {
			throw new NestableRuntimeException(se);
		}

	}

	/**
	 * method to check the JobStore to see if tables exist and if not create
	 * them.
	 */
	private void checkTables(String driverClassName) throws SQLException {
		Connection conn = hibernateSessionFactory
				.getConnectionProviderDataSource().getConnection();
		String query = "select * from qrtz_job_details;";
		try {
			/*
			 * we are not interested in the result just whether an
			 * exception is thrown on a table not found
			 */
			Statement stmt = conn.createStatement();
			stmt.execute(query);
		} catch (SQLException sqle) {
			/*
			 * no table.
			 */
			createTables(conn, driverClassName);
		}
	}
	
	/**
	 * creates the tables for the Quartz jobStore.
	 */
	private void createTables(Connection conn, String driver) throws SQLException
	{
		if (MCKOI.equalsIgnoreCase(driver))
		{
			CreateMcKoiTables tableCreator = new CreateMcKoiTables();
			tableCreator.createTables(conn);
			return;
		}
		if (POSTGRESQL.equalsIgnoreCase(driver))
		{
			CreatePostgresTables tableCreator = new CreatePostgresTables();
			tableCreator.createTables(conn);
			return;
		}
		throw new RuntimeException("Driver not recognised as either McKoi or Postgres:" + driver);
	}
	
}



From nobody at sheep.berlios.de  Wed Jan  4 13:06:00 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:00 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz/factory - New directory
Message-ID: <200601041206.k04C60H06753@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz/factory
In directory sheep:/tmp/cvs-serv6701/src/test/java/org/apache/fulcrum/quartz/factory

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz/factory added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:06:00 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:00 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/resources/META-INF - New directory
Message-ID: <200601041206.k04C60H06751@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources/META-INF
In directory sheep:/tmp/cvs-serv6701/src/test/resources/META-INF

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources/META-INF added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:06:05 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:05 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz/factory QuartzSchedulerFactoryTest.java,NONE,1.1
Message-ID: <200601041206.k04C65H06773@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz/factory
In directory sheep:/tmp/cvs-serv6930/src/test/java/org/apache/fulcrum/quartz/factory

Added Files:
	QuartzSchedulerFactoryTest.java 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: QuartzSchedulerFactoryTest.java ---
package org.apache.fulcrum.quartz.factory;

import org.apache.fulcrum.hivemind.RegistryManager;
import org.apache.hivemind.ServiceImplementationFactory;
import org.quartz.Scheduler;

import junit.framework.TestCase;

public class QuartzSchedulerFactoryTest extends TestCase {

	public void testInitializeScheduler() {
		ServiceImplementationFactory quartzSchedulerFactory = (ServiceImplementationFactory) RegistryManager
				.getInstance().getRegistry().getService(
						"fulcrum.quartz.QuartzSchedulerFactory",
						ServiceImplementationFactory.class);
		assertNotNull(quartzSchedulerFactory);

		Scheduler scheduler = (Scheduler) RegistryManager.getInstance()
				.getRegistry().getService("fulcrum.quartz.Scheduler",
						Scheduler.class);
		assertNotNull(scheduler);
	}
}



From nobody at sheep.berlios.de  Wed Jan  4 13:05:55 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:05:55 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables - New directory
Message-ID: <200601041205.k04C5tH06716@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables
In directory sheep:/tmp/cvs-serv6701/src/main/java/org/apache/fulcrum/quartz/tables

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables added to the repository




From nobody at sheep.berlios.de  Wed Jan  4 13:06:05 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:05 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src .cvsignore,NONE,1.1
Message-ID: <200601041206.k04C65H06780@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src
In directory sheep:/tmp/cvs-serv6930/src

Added Files:
	.cvsignore 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: .cvsignore ---
target



From nobody at sheep.berlios.de  Wed Jan  4 13:06:05 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:06:05 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/resources quartz.properties,NONE,1.1 .cvsignore,NONE,1.1
Message-ID: <200601041206.k04C65H06776@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/resources
In directory sheep:/tmp/cvs-serv6930/src/main/resources

Added Files:
	quartz.properties .cvsignore 
Log Message:
Initial commit of hivemind-quartz service. 

--- NEW FILE: quartz.properties ---
#============================================================================
# Configure Main Scheduler Properties  
#============================================================================
org.quartz.scheduler.instanceName = ClusteredZebraTaskScheduler
org.quartz.scheduler.instanceId = AUTO
#============================================================================
# Configure ThreadPool  
#============================================================================
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 25
org.quartz.threadPool.threadPriority = 5
#============================================================================
# Configure JobStore  
#============================================================================
org.quartz.jobStore.misfireThreshold = 60000
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
org.quartz.jobStore.useProperties = false
org.quartz.jobStore.dataSource = quartzDS
org.quartz.jobStore.tablePrefix = qrtz_
org.quartz.jobStore.isClustered = true
org.quartz.jobStore.clusterCheckinInterval = 20000
--- NEW FILE: .cvsignore ---
tables_postgres.sql
tables_postgres7.sql
quartz-1.5.1-src.jar



From nobody at sheep.berlios.de  Wed Jan  4 13:59:12 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:59:12 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz/factory QuartzSchedulerFactoryTest.java,1.1,1.2
Message-ID: <200601041259.k04CxCH10708@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz/factory
In directory sheep:/tmp/cvs-serv31287/src/test/java/org/apache/fulcrum/quartz/factory

Modified Files:
	QuartzSchedulerFactoryTest.java 
Log Message:
Add Anite copyright/Apache 2 licence to .java files.

Index: QuartzSchedulerFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/java/org/apache/fulcrum/quartz/factory/QuartzSchedulerFactoryTest.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** QuartzSchedulerFactoryTest.java	4 Jan 2006 12:06:02 -0000	1.1
--- QuartzSchedulerFactoryTest.java	4 Jan 2006 12:59:09 -0000	1.2
***************
*** 1,2 ****
--- 1,18 ----
+ /*
+  * Copyright 2005 Anite - Central Government Division
+  *    http://www.anite.com/publicsector
+  *
+  * Licensed under the Apache License, Version 2.0 (the "License");
+  * you may not use this file except in compliance with the License.
+  * You may obtain a copy of the License at
+  *
+  *    http://www.apache.org/licenses/LICENSE-2.0
+  *
+  * Unless required by applicable law or agreed to in writing, software
+  * distributed under the License is distributed on an "AS IS" BASIS,
+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  * See the License for the specific language governing permissions and
+  * limitations under the License.
+  */
  package org.apache.fulcrum.quartz.factory;
  



From nobody at sheep.berlios.de  Wed Jan  4 13:59:12 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:59:12 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory QuartzSchedulerFactory.java,1.1,1.2
Message-ID: <200601041259.k04CxCH10715@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory
In directory sheep:/tmp/cvs-serv31287/src/main/java/org/apache/fulcrum/quartz/factory

Modified Files:
	QuartzSchedulerFactory.java 
Log Message:
Add Anite copyright/Apache 2 licence to .java files.

Index: QuartzSchedulerFactory.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory/QuartzSchedulerFactory.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** QuartzSchedulerFactory.java	4 Jan 2006 12:06:06 -0000	1.1
--- QuartzSchedulerFactory.java	4 Jan 2006 12:59:10 -0000	1.2
***************
*** 1,2 ****
--- 1,18 ----
+ /*
+  * Copyright 2005 Anite - Central Government Division
+  *    http://www.anite.com/publicsector
+  *
+  * Licensed under the Apache License, Version 2.0 (the "License");
+  * you may not use this file except in compliance with the License.
+  * You may obtain a copy of the License at
+  *
+  *    http://www.apache.org/licenses/LICENSE-2.0
+  *
+  * Unless required by applicable law or agreed to in writing, software
+  * distributed under the License is distributed on an "AS IS" BASIS,
+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  * See the License for the specific language governing permissions and
+  * limitations under the License.
+  */
  package org.apache.fulcrum.quartz.factory;
  



From nobody at sheep.berlios.de  Wed Jan  4 13:59:12 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 13:59:12 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables CreatePostgresTables.java,1.1,1.2 CreateMcKoiTables.java,1.1,1.2 CreateTables.java,1.1,1.2
Message-ID: <200601041259.k04CxCH10712@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables
In directory sheep:/tmp/cvs-serv31287/src/main/java/org/apache/fulcrum/quartz/tables

Modified Files:
	CreatePostgresTables.java CreateMcKoiTables.java 
	CreateTables.java 
Log Message:
Add Anite copyright/Apache 2 licence to .java files.

Index: CreatePostgresTables.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables/CreatePostgresTables.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** CreatePostgresTables.java	4 Jan 2006 12:06:05 -0000	1.1
--- CreatePostgresTables.java	4 Jan 2006 12:59:10 -0000	1.2
***************
*** 1,2 ****
--- 1,18 ----
+ /*
+  * Copyright 2005 Anite - Central Government Division
+  *    http://www.anite.com/publicsector
+  *
+  * Licensed under the Apache License, Version 2.0 (the "License");
+  * you may not use this file except in compliance with the License.
+  * You may obtain a copy of the License at
+  *
+  *    http://www.apache.org/licenses/LICENSE-2.0
+  *
+  * Unless required by applicable law or agreed to in writing, software
+  * distributed under the License is distributed on an "AS IS" BASIS,
+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  * See the License for the specific language governing permissions and
+  * limitations under the License.
+  */
  package org.apache.fulcrum.quartz.tables;
  

Index: CreateMcKoiTables.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables/CreateMcKoiTables.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** CreateMcKoiTables.java	4 Jan 2006 12:06:05 -0000	1.1
--- CreateMcKoiTables.java	4 Jan 2006 12:59:10 -0000	1.2
***************
*** 1,2 ****
--- 1,18 ----
+ /*
+  * Copyright 2005 Anite - Central Government Division
+  *    http://www.anite.com/publicsector
+  *
+  * Licensed under the Apache License, Version 2.0 (the "License");
+  * you may not use this file except in compliance with the License.
+  * You may obtain a copy of the License at
+  *
+  *    http://www.apache.org/licenses/LICENSE-2.0
+  *
+  * Unless required by applicable law or agreed to in writing, software
+  * distributed under the License is distributed on an "AS IS" BASIS,
+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  * See the License for the specific language governing permissions and
+  * limitations under the License.
+  */
  package org.apache.fulcrum.quartz.tables;
  

Index: CreateTables.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables/CreateTables.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** CreateTables.java	4 Jan 2006 12:06:05 -0000	1.1
--- CreateTables.java	4 Jan 2006 12:59:10 -0000	1.2
***************
*** 1,2 ****
--- 1,18 ----
+ /*
+  * Copyright 2005 Anite - Central Government Division
+  *    http://www.anite.com/publicsector
+  *
+  * Licensed under the Apache License, Version 2.0 (the "License");
+  * you may not use this file except in compliance with the License.
+  * You may obtain a copy of the License at
+  *
+  *    http://www.apache.org/licenses/LICENSE-2.0
+  *
+  * Unless required by applicable law or agreed to in writing, software
+  * distributed under the License is distributed on an "AS IS" BASIS,
+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  * See the License for the specific language governing permissions and
+  * limitations under the License.
+  */
  package org.apache.fulcrum.quartz.tables;
  



From nobody at sheep.berlios.de  Wed Jan  4 16:33:48 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:33:48 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/test/resources log4j.properties,1.1,1.2 hibernate.cfg.xml,1.1,1.2 mcKoi.conf,1.1,NONE
Message-ID: <200601041533.k04FXmH16261@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources
In directory sheep:/tmp/cvs-serv4274/src/test/resources

Modified Files:
	log4j.properties hibernate.cfg.xml 
Removed Files:
	mcKoi.conf 
Log Message:
McKoi is not supported by Quartz. Removed McKoi as a test db.

Index: log4j.properties
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources/log4j.properties,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** log4j.properties	4 Jan 2006 12:06:06 -0000	1.1
--- log4j.properties	4 Jan 2006 15:33:45 -0000	1.2
***************
*** 1,3 ****
! log4j.rootLogger = INFO, stdout
  
  # BEGIN HIBERNATE SECTION
--- 1,4 ----
! log4j.rootLogger = info, stdout
! 
  
  # BEGIN HIBERNATE SECTION

Index: hibernate.cfg.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/test/resources/hibernate.cfg.xml,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** hibernate.cfg.xml	4 Jan 2006 12:06:06 -0000	1.1
--- hibernate.cfg.xml	4 Jan 2006 15:33:45 -0000	1.2
***************
*** 10,18 ****
      <!-- properties for this SessionFactory only -->
      <property name="hibernate.cglib.use_reflection_optimizer">false</property>
!     <property name="connection.driver_class">com.mckoi.JDBCDriver</property>
!     <property name="connection.username">test</property>
!     <property name="connection.password">test</property>
!     <property name="connection.url">jdbc:mckoi:local://./src/test/resources/mcKoi.conf?create_or_boot=true</property>
!     <property name="dialect">org.hibernate.dialect.MckoiDialect</property>
  	</session-factory>
  </hibernate-configuration>
--- 10,18 ----
      <!-- properties for this SessionFactory only -->
      <property name="hibernate.cglib.use_reflection_optimizer">false</property>
!     <property name="connection.driver_class">org.postgresql.Driver</property>
!     <property name="connection.username">zebra</property>
!     <property name="connection.password">zebra</property>
!     <property name="connection.url">jdbc:postgresql:zebra</property>
!     <property name="dialect">org.hibernate.dialect.PostgreSQLDialect</property>
  	</session-factory>
  </hibernate-configuration>

--- mcKoi.conf DELETED ---



From nobody at sheep.berlios.de  Wed Jan  4 16:33:47 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:33:47 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables CreateTables.java,1.2,1.3 CreateMcKoiTables.java,1.2,NONE
Message-ID: <200601041533.k04FXlH16257@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables
In directory sheep:/tmp/cvs-serv4274/src/main/java/org/apache/fulcrum/quartz/tables

Modified Files:
	CreateTables.java 
Removed Files:
	CreateMcKoiTables.java 
Log Message:
McKoi is not supported by Quartz. Removed McKoi as a test db.

Index: CreateTables.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables/CreateTables.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** CreateTables.java	4 Jan 2006 12:59:10 -0000	1.2
--- CreateTables.java	4 Jan 2006 15:33:45 -0000	1.3
***************
*** 47,53 ****
  				/*
  				 * ignore this if it is a table does not exist exception from
! 				 * postgresql on a drop statement.
  				 */
! 				if (!sqle.getMessage().endsWith("does not exist"))
  				{
  					sqle.printStackTrace();
--- 47,53 ----
  				/*
  				 * ignore this if it is a table does not exist exception from
! 				 * postgresql or McKoi on a drop statement.
  				 */
! 				if ((!sqle.getMessage().endsWith("does not exist")) && (!sqle.getMessage().endsWith("does not exist.")))
  				{
  					sqle.printStackTrace();

--- CreateMcKoiTables.java DELETED ---



From nobody at sheep.berlios.de  Wed Jan  4 16:33:48 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:33:48 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory QuartzSchedulerFactory.java,1.2,1.3
Message-ID: <200601041533.k04FXmH16265@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory
In directory sheep:/tmp/cvs-serv4274/src/main/java/org/apache/fulcrum/quartz/factory

Modified Files:
	QuartzSchedulerFactory.java 
Log Message:
McKoi is not supported by Quartz. Removed McKoi as a test db.

Index: QuartzSchedulerFactory.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/factory/QuartzSchedulerFactory.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** QuartzSchedulerFactory.java	4 Jan 2006 12:59:10 -0000	1.2
--- QuartzSchedulerFactory.java	4 Jan 2006 15:33:46 -0000	1.3
***************
*** 27,31 ****
  import org.apache.commons.logging.LogFactory;
  import org.apache.fulcrum.hibernate.factory.HibernateSessionFactory;
- import org.apache.fulcrum.quartz.tables.CreateMcKoiTables;
  import org.apache.fulcrum.quartz.tables.CreatePostgresTables;
  import org.apache.hivemind.ServiceImplementationFactory;
--- 27,30 ----
***************
*** 58,65 ****
  	 * This class only supports use of the following databases/drivers
  	 * to support a new db, create a new class to create the tables using
! 	 * the McKoi or Postgres ones as an example and add the appropriate 
  	 * block into the createTables method.
  	 */
- 	private static final String MCKOI = "com.mckoi.JDBCDriver";
  	private static final String POSTGRESQL = "org.postgresql.Driver";
  	
--- 57,63 ----
  	 * This class only supports use of the following databases/drivers
  	 * to support a new db, create a new class to create the tables using
! 	 * Postgres ones as an example and add the appropriate 
  	 * block into the createTables method.
  	 */
  	private static final String POSTGRESQL = "org.postgresql.Driver";
  	
***************
*** 160,169 ****
  	private void createTables(Connection conn, String driver) throws SQLException
  	{
- 		if (MCKOI.equalsIgnoreCase(driver))
- 		{
- 			CreateMcKoiTables tableCreator = new CreateMcKoiTables();
- 			tableCreator.createTables(conn);
- 			return;
- 		}
  		if (POSTGRESQL.equalsIgnoreCase(driver))
  		{
--- 158,161 ----
***************
*** 172,176 ****
  			return;
  		}
! 		throw new RuntimeException("Driver not recognised as either McKoi or Postgres:" + driver);
  	}
  	
--- 164,168 ----
  			return;
  		}
! 		throw new RuntimeException("Driver not recognised as Postgres:" + driver);
  	}
  	



From nobody at sheep.berlios.de  Wed Jan  4 16:55:34 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:34 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state ZebraTaskInstance.java,1.4,1.5 ZebraPropertySetEntry.java,1.4,1.5
Message-ID: <200601041555.k04FtYH17131@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state
In directory sheep:/tmp/cvs-serv8139/src/main/java/com/anite/zebra/hivemind/om/state

Modified Files:
	ZebraTaskInstance.java ZebraPropertySetEntry.java 
Log Message:
Add Quartz scheduled delay task and test. 

Index: ZebraTaskInstance.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/ZebraTaskInstance.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** ZebraTaskInstance.java	5 Dec 2005 16:32:00 -0000	1.4
--- ZebraTaskInstance.java	4 Jan 2006 15:55:32 -0000	1.5
***************
*** 24,27 ****
--- 24,28 ----
  import javax.persistence.Entity;
  import javax.persistence.FetchType;
+ import javax.persistence.JoinColumn;
  import javax.persistence.MapKey;
  import javax.persistence.OneToMany;
***************
*** 75,79 ****
  	 */
  	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
! 	@MapKey
  	public Map<String, ZebraPropertySetEntry> getPropertySet() {
  		return this.propertySet;
--- 76,81 ----
  	 */
  	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
! 	@MapKey(name="key")
! 	@JoinColumn
  	public Map<String, ZebraPropertySetEntry> getPropertySet() {
  		return this.propertySet;

Index: ZebraPropertySetEntry.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/state/ZebraPropertySetEntry.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** ZebraPropertySetEntry.java	5 Dec 2005 09:52:35 -0000	1.4
--- ZebraPropertySetEntry.java	4 Jan 2006 15:55:32 -0000	1.5
***************
*** 38,41 ****
--- 38,43 ----
      private String value = null;
  
+     private String key = null;
+     
      private Serializable object = null;
  
***************
*** 63,77 ****
      }
  
-     /**
-      * 
-      */
-     @Id(generate = GeneratorType.AUTO)
-     public Integer getId() {
-         return this.propertySetId;
-     }
- 
-     public void setId(Integer propertySetId) {
-         this.propertySetId = propertySetId;
-     }
  
      /**
--- 65,68 ----
***************
*** 118,120 ****
--- 109,129 ----
          this.object = object;
      }
+ 
+     @Id(generate = GeneratorType.AUTO)
+     public Integer getPropertySetId() {
+ 		return propertySetId;
+ 	}
+ 
+ 	public void setPropertySetId(Integer propertySetId) {
+ 		this.propertySetId = propertySetId;
+ 	}
+ 
+ 	
+ 	public String getKey() {
+ 		return key;
+ 	}
+ 
+ 	public void setKey(String key) {
+ 		this.key = key;
+ 	}
  }



From nobody at sheep.berlios.de  Wed Jan  4 16:55:34 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:34 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/resources/Templates/Tasks Quartz.xml,NONE,1.1 TestWithProperty.xml,NONE,1.1 Hivemind.xml,1.1,1.2
Message-ID: <200601041555.k04FtYH17135@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/resources/Templates/Tasks
In directory sheep:/tmp/cvs-serv8139/src/main/resources/Templates/Tasks

Modified Files:
	Hivemind.xml 
Added Files:
	Quartz.xml TestWithProperty.xml 
Log Message:
Add Quartz scheduled delay task and test. 

--- NEW FILE: Quartz.xml ---
<ACGWFD.TaskTemplate name="Quartz" icon="Bee.bmp" description="A hivemind service" routingparallel="no">
	<properties name="(General)">
		<property name="synchronise" type="boolean" value="false" locked="no"/>
		<property name="auto" type="boolean" value="true" locked="yes"/>
		<property name="Class Name" type="string" value="com.anite.zebra.hivemind.taskAction.HivemindServiceTaskAction" locked="yes" />
	</properties>
	<properties name="(General Task Properties)">
		<property name="ShowInTaskList" value="no" type="Boolean" locked="yes"/>
		<property name="ServiceId" type="string" value="zebra.QuartzTaskAction" locked="yes"/>
		<property name="Wait" type="string" value="" locked="no"/>
	</properties>
	<properties name="(Inputs)"/>
</ACGWFD.TaskTemplate>

--- NEW FILE: TestWithProperty.xml ---
<ACGWFD.TaskTemplate name="TestWithProperty" icon="Bee.bmp" description="Test Property Set stuff" routingparallel="no">
	<properties name="(General)">
		<property name="synchronise" type="boolean" value="false" locked="no"/>
		<property name="auto" type="boolean" value="true" locked="yes"/>
		<property name="Class Name" type="string" value="com.anite.zebra.hivemind.taskAction.HivemindServiceTaskAction" locked="yes" />
	</properties>
	<properties name="(General Task Properties)">
		<property name="ShowInTaskList" value="no" type="Boolean" locked="yes"/>
		<property name="ServiceId" type="string" value="zebra.test.noopTaskAction" locked="yes"/>
		<property name="Wait" type="string" value="" locked="no"/>
	</properties>
	<properties name="(Inputs)"/>
</ACGWFD.TaskTemplate>

Index: Hivemind.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/resources/Templates/Tasks/Hivemind.xml,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** Hivemind.xml	13 Dec 2005 07:57:17 -0000	1.1
--- Hivemind.xml	4 Jan 2006 15:55:32 -0000	1.2
***************
*** 7,11 ****
  	<properties name="(General Task Properties)">
  		<property name="ShowInTaskList" value="no" type="Boolean" locked="yes"/>
! 		<property name="ServiceId" type="string" value="" locked="no"/>
  	</properties>
  	<properties name="(Inputs)"/>
--- 7,11 ----
  	<properties name="(General Task Properties)">
  		<property name="ShowInTaskList" value="no" type="Boolean" locked="yes"/>
! 		<property name="ServiceId" type="string" value="zebra.quartzTask" locked="yes"/>
  	</properties>
  	<properties name="(Inputs)"/>



From nobody at sheep.berlios.de  Wed Jan  4 16:55:36 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:36 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.11,1.12
Message-ID: <200601041555.k04FtaH17149@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv8139

Modified Files:
	pom.xml 
Log Message:
Add Quartz scheduled delay task and test. 

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.11
retrieving revision 1.12
diff -C2 -d -r1.11 -r1.12
*** pom.xml	3 Jan 2006 07:48:32 -0000	1.11
--- pom.xml	4 Jan 2006 15:55:33 -0000	1.12
***************
*** 106,109 ****
--- 106,114 ----
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
+             <artifactId>fulcrum-quartz</artifactId>
+             <version>1.0.0</version>
+         </dependency>
+         <dependency>
+             <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
              <version>1.7</version>



From nobody at sheep.berlios.de  Wed Jan  4 16:55:36 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:36 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/resources/META-INF hivemodule.xml,1.5,1.6
Message-ID: <200601041555.k04FtaH17153@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/resources/META-INF
In directory sheep:/tmp/cvs-serv8139/src/main/resources/META-INF

Modified Files:
	hivemodule.xml 
Log Message:
Add Quartz scheduled delay task and test. 

Index: hivemodule.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/resources/META-INF/hivemodule.xml,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** hivemodule.xml	5 Dec 2005 09:12:31 -0000	1.5
--- hivemodule.xml	4 Jan 2006 15:55:34 -0000	1.6
***************
*** 45,47 ****
--- 45,52 ----
          </invoke-factory>
      </service-point>
+ 	<service-point id="QuartzTaskAction" interface="com.anite.zebra.core.api.ITaskAction">
+ 		<invoke-factory>
+ 			<construct class="com.anite.zebra.hivemind.taskAction.QuartzServiceTaskAction"></construct>
+ 		</invoke-factory>
+ 	</service-point>
  </module>



From nobody at sheep.berlios.de  Wed Jan  4 16:55:36 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:36 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl ZebraStateFactoryTest.java,1.2,1.3
Message-ID: <200601041555.k04FtaH17151@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl
In directory sheep:/tmp/cvs-serv8139/src/test/java/com/anite/zebra/hivemind/impl

Modified Files:
	ZebraStateFactoryTest.java 
Log Message:
Add Quartz scheduled delay task and test. 

Index: ZebraStateFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/impl/ZebraStateFactoryTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** ZebraStateFactoryTest.java	5 Dec 2005 09:52:38 -0000	1.2
--- ZebraStateFactoryTest.java	4 Jan 2006 15:55:34 -0000	1.3
***************
*** 39,42 ****
--- 39,44 ----
  import com.anite.zebra.hivemind.om.defs.ZebraProcessDefinition;
  import com.anite.zebra.hivemind.om.state.ZebraProcessInstance;
+ import com.anite.zebra.hivemind.om.state.ZebraPropertySetEntry;
+ import com.anite.zebra.hivemind.om.state.ZebraTaskInstance;
  
  /**
***************
*** 147,150 ****
--- 149,154 ----
          assertNotNull(taskInstance);
          assertEquals(processInstance, taskInstance.getProcessInstance());
+         ZebraTaskInstance zebraTaskInstance = (ZebraTaskInstance) taskInstance;
+         zebraTaskInstance.getPropertySet().put("bob", new ZebraPropertySetEntry("bob"));
          assertEquals(foe, taskInstance.getFOE());
  
***************
*** 154,157 ****
--- 158,167 ----
  
          assertTrue(taskInstance.getTaskInstanceId().longValue() > 0);
+         
+         t = this.stateFactory.beginTransaction();
+         this.stateFactory.deleteObject(taskInstance);
+         t.commit();
+ 
+         
      }
  



From nobody at sheep.berlios.de  Wed Jan  4 16:55:36 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:36 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/resources log4j.properties,NONE,1.1 hibernate.cfg.xml,1.4,1.5
Message-ID: <200601041555.k04FtZH17147@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources
In directory sheep:/tmp/cvs-serv8139/src/test/resources

Modified Files:
	hibernate.cfg.xml 
Added Files:
	log4j.properties 
Log Message:
Add Quartz scheduled delay task and test. 

--- NEW FILE: log4j.properties ---
# Basic logging for testing
log4j.rootLogger = info, stdout

log4j.org.hibernate = debug, stdout

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n


Index: hibernate.cfg.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources/hibernate.cfg.xml,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** hibernate.cfg.xml	3 Jan 2006 07:48:31 -0000	1.4
--- hibernate.cfg.xml	4 Jan 2006 15:55:33 -0000	1.5
***************
*** 5,8 ****
--- 5,9 ----
  <hibernate-configuration>
  	<session-factory>
+ 		<property name="show_sql">false</property>
  		<property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
  		<property name="hibernate.connection.password">zebra</property>



From nobody at sheep.berlios.de  Wed Jan  4 16:55:35 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:35 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/taskAction LogTaskActivity.java,NONE,1.1 LogTaskActionTest.java,NONE,1.1 QuartzServiceTaskActionTest.java,NONE,1.1
Message-ID: <200601041555.k04FtZH17138@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/java/com/anite/zebra/hivemind/taskAction
In directory sheep:/tmp/cvs-serv8139/src/test/java/com/anite/zebra/hivemind/taskAction

Added Files:
	LogTaskActivity.java LogTaskActionTest.java 
	QuartzServiceTaskActionTest.java 
Log Message:
Add Quartz scheduled delay task and test. 

--- NEW FILE: LogTaskActivity.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.taskAction;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.anite.zebra.core.api.ITaskAction;
import com.anite.zebra.core.exceptions.RunTaskException;
import com.anite.zebra.core.state.api.ITaskInstance;
import com.anite.zebra.hivemind.om.state.ZebraTaskInstance;

public class LogTaskActivity implements ITaskAction{

	private static final Log log = LogFactory.getLog(LogTaskActivity.class);
	
	public void runTask(ITaskInstance arg0) throws RunTaskException {
		SimpleDateFormat sdf = new SimpleDateFormat();
		log.info("Task ran at :" + sdf.format(new Date()));
		arg0.setState(ZebraTaskInstance.STATE_AWAITINGCOMPLETE);
	}

}

--- NEW FILE: LogTaskActionTest.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.taskAction;

import junit.framework.TestCase;

import org.apache.fulcrum.hivemind.RegistryManager;
import org.apache.hivemind.Resource;
import org.apache.hivemind.impl.DefaultClassResolver;
import org.apache.hivemind.util.ClasspathResource;

import com.anite.zebra.hivemind.impl.Zebra;
import com.anite.zebra.hivemind.om.state.ZebraProcessInstance;
import com.anite.zebra.hivemind.util.RegistryHelper;

public class LogTaskActionTest  extends TestCase {
    protected void setUp() throws Exception {

        Resource resource = new ClasspathResource(new DefaultClassResolver(),
                "META-INF/hivemodule_zebradefinitions.xml");
        RegistryManager.getInstance().getResources().add(resource);
    }

    public void testService() throws Exception {

        Zebra zebra = RegistryHelper.getInstance().getZebra();
        ZebraProcessInstance pi = zebra.createProcessPaused("testProcess");
        
        zebra.startProcess(pi);        
    }
}

--- NEW FILE: QuartzServiceTaskActionTest.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.taskAction;

import junit.framework.TestCase;

import org.apache.fulcrum.hivemind.RegistryManager;
import org.apache.hivemind.Resource;
import org.apache.hivemind.impl.DefaultClassResolver;
import org.apache.hivemind.util.ClasspathResource;

import com.anite.zebra.hivemind.impl.Zebra;
import com.anite.zebra.hivemind.om.state.ZebraProcessInstance;
import com.anite.zebra.hivemind.util.RegistryHelper;

public class QuartzServiceTaskActionTest extends TestCase {
    protected void setUp() throws Exception {

        Resource resource = new ClasspathResource(new DefaultClassResolver(),
                "META-INF/hivemodule_zebradefinitions.xml");
        RegistryManager.getInstance().getResources().add(resource);
    }

    public void testService() throws Exception {

        Zebra zebra = RegistryHelper.getInstance().getZebra();
        ZebraProcessInstance pi = zebra.createProcessPaused("TestQuartzProcess");
        
        zebra.startProcess(pi);
        
        // This return as soon as Zebra can't run any more tasks immediately.
        
        Thread.sleep(60000);
        
        // by now it will have run
        
        
        
    }
}



From nobody at sheep.berlios.de  Wed Jan  4 16:55:35 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:35 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/taskAction ScheduledTaskTransitionJob.java,NONE,1.1 QuartzServiceTaskAction.java,NONE,1.1
Message-ID: <200601041555.k04FtZH17145@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/taskAction
In directory sheep:/tmp/cvs-serv8139/src/main/java/com/anite/zebra/hivemind/taskAction

Added Files:
	ScheduledTaskTransitionJob.java QuartzServiceTaskAction.java 
Log Message:
Add Quartz scheduled delay task and test. 

--- NEW FILE: ScheduledTaskTransitionJob.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.taskAction;

import org.hibernate.Session;
import org.quartz.Job;
import org.quartz.JobDataMap;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import com.anite.zebra.core.exceptions.TransitionException;
import com.anite.zebra.hivemind.impl.Zebra;
import com.anite.zebra.hivemind.om.state.ZebraTaskInstance;
import com.anite.zebra.hivemind.util.RegistryHelper;

public class ScheduledTaskTransitionJob implements Job {

	public void execute(JobExecutionContext context)
			throws JobExecutionException {
		JobDataMap data = context.getJobDetail().getJobDataMap();
		Long taskInstanceId = (Long) data
				.get(QuartzServiceTaskAction.TASK_INSTANCE_ID_KEY);

		Session session = RegistryHelper.getInstance().getSession();

		ZebraTaskInstance task = (ZebraTaskInstance) session.load(
				ZebraTaskInstance.class, taskInstanceId);
		task.setState(ZebraTaskInstance.STATE_AWAITINGCOMPLETE);
		Zebra zebra = RegistryHelper.getInstance().getZebra();
		try {
			zebra.transitionTask(task);
		} catch (TransitionException te) {
			throw new JobExecutionException(te);
		}
		
		// Tell hivemind to recycle thread

	}

}

--- NEW FILE: QuartzServiceTaskAction.java ---
/*
 * Copyright 2004, 2005 Anite 
 *    http://www.anite.com/publicsector
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.anite.zebra.hivemind.taskAction;

import java.util.Date;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SimpleTrigger;

import com.anite.zebra.core.api.ITaskAction;
import com.anite.zebra.core.exceptions.DefinitionNotFoundException;
import com.anite.zebra.core.exceptions.RunTaskException;
import com.anite.zebra.core.state.api.ITaskInstance;
import com.anite.zebra.hivemind.om.defs.ZebraTaskDefinition;

public class QuartzServiceTaskAction implements ITaskAction {

	public static final Log log = LogFactory.getLog(QuartzServiceTaskAction.class);
	
	public static final String TASK_INSTANCE_ID_KEY = "taskInstanceId";
	
	private static final long SECONDS_DELAY = 1000L;
	private static final long MINUTES_DELAY = 60L * 1000L;
	private static final long HOURS_DELAY = 60L * 60L * 1000L;
	private static final long DAYS_DELAY = 24L * 60L * 60L * 1000L;

	private Scheduler scheduler;

	public Scheduler getScheduler() {
		return scheduler;
	}

	public void setScheduler(Scheduler scheduler) {
		this.scheduler = scheduler;
	}

	/**
	 * When this task is run, it waits until the scheduled time and then runs
	 * the QuartzJob. This job is given the taskInstanceId and is responsible
	 * for tranistioning the task when the trigger is fired.
	 */
	public void runTask(ITaskInstance taskInstance) throws RunTaskException {
		try {
			/*
			 * Create your Scheduled job
			 */
			JobDetail jobDetail = new JobDetail(taskInstance
					.getTaskInstanceId().toString(), null,
					ScheduledTaskTransitionJob.class);
			jobDetail.getJobDataMap().put(TASK_INSTANCE_ID_KEY,
					taskInstance.getTaskInstanceId());
			/*
			 * get the poll interval from taskInstace.getTaskDefinition
			 * (downcast to ZebraTaskDefinition) get property.
			 */
			ZebraTaskDefinition taskDef = (ZebraTaskDefinition) taskInstance
					.getTaskDefinition();
			String wait = taskDef.getGeneralProperties().getString(
					"Wait");
			log.info("Wait is : " + wait);
			log.info("Delay is :" + new Long(delay(wait)).toString());
			/*
			 * Wait supports delay times in : - 
			 * 	S	Seconds ( Default )
			 *  M	Minutes
			 *  H	Hours
			 *  D	Days
			 *   
			 */
			
			SimpleTrigger trigger = new SimpleTrigger();
			trigger.setStartTime(new Date(new Date().getTime() + delay(wait)));
			trigger.setName("delay");
			scheduler.scheduleJob(jobDetail, trigger);
			/*
			 * Don't set the state unlike every other task action as the state
			 * will be set when the trigger fires.
			 */
		} catch (DefinitionNotFoundException dnfe) {
			throw new RunTaskException(dnfe);
		} catch (SchedulerException se) {
			throw new RunTaskException(se);
		}

	}

	
	private long delay(String wait) throws IllegalArgumentException
	{
		long delay = 0;
		String sd = null;
		String period = "S";
		wait.trim().toUpperCase();
		if (wait.startsWith("S"))
		{
			sd = wait.substring(1);
		}
		if (wait.endsWith("S"))
		{
			sd = wait.substring(0, wait.length()-1);
		}
		if (wait.startsWith("M"))
		{
			sd = wait.substring(1);
			period = "M";
		}
		if (wait.endsWith("M"))
		{
			sd = wait.substring(0, wait.length()-1);
			period = "M";
		}
		if (wait.startsWith("H"))
		{
			sd = wait.substring(1);
			period = "H";
		}
		if (wait.endsWith("H"))
		{
			sd = wait.substring(0, wait.length()-1);
			period = "H";
		}
		if (wait.startsWith("D"))
		{
			sd = wait.substring(1);
			period = "D";
		}
		if (wait.endsWith("D"))
		{
			sd = wait.substring(0, wait.length()-1);
			period = "D";
		}
		/*
		 * wait does not contain S,M,H or D
		 */
		if ((wait.indexOf("S") == -1) &&
			(wait.indexOf("M") == -1) &&
			(wait.indexOf("H") == -1) &&
			(wait.indexOf("D") == -1))
		{
			sd = wait;
		}
		try
		{
			delay = Long.parseLong(sd);
		}
		catch (NumberFormatException pe)
		{
			throw new IllegalArgumentException("Wait string should be an integer followed by S, M, H or D. : " + sd);
		}
		if (period.equals("S"))
		{
			return delay * SECONDS_DELAY;
		}
		if (period.equals("M"))
		{
			return delay * MINUTES_DELAY;
		}
		if (period.equals("H"))
		{
			return delay * HOURS_DELAY;
		}
		if (period.equals("D"))
		{
			return delay * DAYS_DELAY;
		}
		return delay * SECONDS_DELAY;
	}
}



From nobody at sheep.berlios.de  Wed Jan  4 16:55:35 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:55:35 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/resources/processes testProcess.acgwfd.xml,NONE,1.1 TestQuartzProcess.acgwfd.xml,NONE,1.1
Message-ID: <200601041555.k04FtZH17142@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources/processes
In directory sheep:/tmp/cvs-serv8139/src/test/resources/processes

Added Files:
	testProcess.acgwfd.xml TestQuartzProcess.acgwfd.xml 
Log Message:
Add Quartz scheduled delay task and test. 

--- NEW FILE: testProcess.acgwfd.xml ---
<ACGWFDNative Version="3.0"><ProcessVersions><ProcessVersion VersionID="1"><ProcessDef ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/></properties><TaskDefs/><RoutingDefs/></ProcessDef></ProcessVersion><ProcessVersion VersionID="2"><ProcessDef FirstTask="1" ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/><property locked="-1" name="Class Destruct" value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/><property locked="-1" name="Class Construct" value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/></properties><properties name="Visibility"><property locked="0" name="DebugFlow" value="Yes" type="boolean"/><property locked="0" name="Display Name" value="" type="string"/></properties><properties name="Security"><property locked="0" name="Process Start Permissions" value="systemAccess;" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/></properties><properties name="(Inputs)"/><properties name="(Outputs)"/><TaskDefs><TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/></properties><properties name="(Inputs)"/></Ta
skDef><TaskDef GUID="2" Height="1440" Left="6195" Top="4095" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef></TaskDefs><RoutingDefs><RoutingDef GUID="3" TaskDestGUID="2" TaskOrgGUID="1"><Points><Point X="7440" Y="4095"/></Points><properties name="(General)"><property locked="0" name="Name" value="" type="string"/><property locked="0" name="Parallel" value="No" type="boolean"/><property locked="0" name="Condition Class" value="com.anite.zebra.hivemind.routing.RoutingNameCondition" type="string"/></properties></RoutingDef></RoutingDefs></ProcessDef></ProcessVersion><ProcessVersion VersionID="3"><ProcessDef FirstTask="1" ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/><property locked="-1" name="Class Destruct" value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/><property locked="-1" name="Class Construct" value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/></properties><properties name="Visibility"><property locked="0" name="DebugFlow" value="Yes" type="boolean"/><property locked="0" name="Display Name" value="" type="string"/></properties><properties name="Security"><property locked="0" name="Process Start Permiss
ions" value="systemAccess;" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/></properties><properties name="(Inputs)"/><properties name="(Outputs)"/><TaskDefs><TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef><TaskDef GUID="2" Height="1440" Left="6675" Top="3945" Width="2340" TaskTemplate="TestWithProperty"><properties name="(General)"><property locked="0" name="Name" value="TestWithProperty" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="-1" name="Class Name" value="com.anite.zebra.hivemind.taskAction.HivemindServiceTaskAction" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/><property locked="-1" name="ServiceId" value="zebra.QuartzTaskAction" type="string"/><property locked="0" name="Wait" value="WaitString" type="string"/><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="st
ring"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef></TaskDefs><RoutingDefs><RoutingDef GUID="3" TaskDestGUID="2" TaskOrgGUID="1"><Points><Point X="7320" Y="3945"/></Points><properties name="(General)"><property locked="0" name="Name" value="" type="string"/><property locked="0" name="Parallel" value="No" type="boolean"/><property locked="0" name="Condition Class" value="com.anite.zebra.hivemind.routing.RoutingNameCondition" type="string"/></properties></RoutingDef></RoutingDefs></ProcessDef></ProcessVersion><ProcessVersion VersionID="4"><ProcessDef ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/><property locked="-1" name="Class Destruct" value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/><property locked="-1" name="Class Construct" value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/></properties><properties name="Visibility"><property locked="0" name="DebugFlow" value="Yes" type="boolean"/><property locked="0" name="Display Name" value="" type="string"/></properties><properties name="Security"><property locked="0" name="Process Start Permissions" value="systemAccess;" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/></properties><properties name="(Inputs)"/><properties name="(Outputs)"/><TaskDefs><TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="0" name="Static Permissi
ons" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef></TaskDefs><RoutingDefs/></ProcessDef></ProcessVersion><ProcessVersion VersionID="5"><ProcessDef FirstTask="1" ProcessTemplate="Zebra"><properties name="(General)"><property locked="-1" name="Name" value="testProcess" type="string"/><property locked="-1" name="Class Destruct" value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct" type="string"/><property locked="-1" name="Class Construct" value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct" type="string"/></properties><properties name="Visibility"><property locked="0" name="DebugFlow" value="Yes" type="boolean"/><property locked="0" name="Display Name" value="" type="string"/></properties><properties name="Security"><property locked="0" name="Process Start Permissions" value="systemAccess;" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/></properties><properties name="(Inputs)"/><properties name="(Outputs)"/><TaskDefs><TaskDef GUID="1" Height="1440" Left="4035" Top="1695" Width="2340" TaskTemplate="Activity"><properties name="(General)"><property locked="0" name="Name" value="Activity" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="0" name="Class Name" value="com.anite.zebra.hivemind.taskAction.LogTaskActivity" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/><property locked="-1" name="ShowI
nTaskList" value="No" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef><TaskDef GUID="2" Height="1440" Left="7890" Top="3975" Width="2070" TaskTemplate="TestWithProperty"><properties name="(General)"><property locked="0" name="Name" value="TestWithProperty" type="string"/><property locked="0" name="Synchronise" value="No" type="boolean"/><property locked="-1" name="Auto" value="Yes" type="boolean"/><property locked="-1" name="Class Name" value="com.anite.zebra.hivemind.taskAction.HivemindServiceTaskAction" type="string"/><property locked="0" name="NewThread" value="No" type="boolean"/></properties><properties name="(General Task Properties)"><property locked="-1" name="ShowInTaskList" value="No" type="boolean"/><property locked="-1" name="ServiceId" value="zebra.test.noopTaskAction" type="string"/><property locked="0" name="Wait" value="waitstring" type="string"/><property locked="0" name="Static Permissions" value="systemAccess" type="string"/><property locked="0" name="Dynamic Permissions" value="" type="string"/><property locked="0" name="ShowInHistory" value="Yes" type="boolean"/></properties><properties name="(Inputs)"/></TaskDef></TaskDefs><RoutingDefs><RoutingDef GUID="3" TaskDestGUID="2" TaskOrgGUID="1"><Points><Point X="9030" Y="3975"/></Points><properties name="(General)"><property locked="0" name="Name" value="" type="string"/><property locked="0" name="Parallel" value="No" type="boolean"/><property locked="0" name="Condition Class" value="com.anite.zebra.hivemind.routing.RoutingNameCondition" type="string"/></properties></RoutingDef></RoutingDefs></ProcessDef></ProcessVersion></ProcessVersions></ACGWFDNative>

--- NEW FILE: TestQuartzProcess.acgwfd.xml ---
<ACGWFDNative Version="3.0">
	<ProcessVersions>
		<ProcessVersion VersionID="1">
			<ProcessDef FirstTask="2" ProcessTemplate="Zebra">
				<properties name="(General)">
					<property locked="-1" name="Name" value="TestQuartzProcess"
						type="string"/>
					<property locked="-1" name="Class Destruct"
						value="com.anite.zebra.hivemind.lifecycle.ProcessDestruct"
						type="string"/>
					<property locked="-1" name="Class Construct"
						value="com.anite.zebra.hivemind.lifecycle.ProcessConstruct"
						type="string"/>
				</properties>
				<properties name="Visibility">
					<property locked="0" name="DebugFlow" value="Yes"
						type="boolean"/>
					<property locked="0" name="Display Name" value=""
						type="string"/>
				</properties>
				<properties name="Security">
					<property locked="0" name="Process Start Permissions"
						value="systemAccess;" type="string"/>
					<property locked="0" name="Dynamic Permissions" value=""
						type="string"/>
				</properties>
				<properties name="(Inputs)"/>
				<properties name="(Outputs)"/>
				<TaskDefs>
					<TaskDef GUID="1" Height="1440" Left="7395" Top="4665"
						Width="2340" TaskTemplate="Activity">
						<properties name="(General)">
							<property locked="0" name="Name" value="Activity"
								type="string"/>
							<property locked="0" name="Synchronise" value="No"
								type="boolean"/>
							<property locked="-1" name="Auto" value="Yes"
								type="boolean"/>
							<property locked="0" name="Class Name"
								value="com.anite.zebra.hivemind.taskAction.LogTaskActivity"
								type="string"/>
							<property locked="0" name="NewThread" value="No"
								type="boolean"/>
						</properties>
						<properties name="(General Task Properties)">
							<property locked="0" name="Static Permissions"
								value="systemAccess" type="string"/>
							<property locked="0" name="Dynamic Permissions"
								value="" type="string"/>
							<property locked="0" name="ShowInHistory" value="Yes"
								type="boolean"/>
							<property locked="-1" name="ShowInTaskList" value="No"
								type="boolean"/>
						</properties>
						<properties name="(Inputs)"/>
					</TaskDef>
					<TaskDef GUID="2" Height="1440" Left="1680" Top="120"
						Width="2340" TaskTemplate="Activity">
						<properties name="(General)">
							<property locked="0" name="Name" value="Activity"
								type="string"/>
							<property locked="0" name="Synchronise" value="No"
								type="boolean"/>
							<property locked="-1" name="Auto" value="Yes"
								type="boolean"/>
							<property locked="0" name="Class Name"
								value="com.anite.zebra.hivemind.taskAction.LogTaskActivity"
								type="string"/>
							<property locked="0" name="NewThread" value="No"
								type="boolean"/>
						</properties>
						<properties name="(General Task Properties)">
							<property locked="0" name="Static Permissions"
								value="systemAccess" type="string"/>
							<property locked="0" name="Dynamic Permissions"
								value="" type="string"/>
							<property locked="0" name="ShowInHistory" value="Yes"
								type="boolean"/>
							<property locked="-1" name="ShowInTaskList" value="No"
								type="boolean"/>
						</properties>
						<properties name="(Inputs)"/>
					</TaskDef>
					<TaskDef GUID="3" Height="1440" Left="5205" Top="2385"
						Width="2085" TaskTemplate="Quartz">
						<properties name="(General)">
							<property locked="0" name="Name" value="Quartz"
								type="string"/>
							<property locked="0" name="Synchronise" value="No"
								type="boolean"/>
							<property locked="-1" name="Auto" value="Yes"
								type="boolean"/>
							<property locked="-1" name="Class Name"
								value="com.anite.zebra.hivemind.taskAction.HivemindServiceTaskAction"
								type="string"/>
							<property locked="0" name="NewThread" value="No"
								type="boolean"/>
						</properties>
						<properties name="(General Task Properties)">
							<property locked="0" name="Static Permissions"
								value="systemAccess" type="string"/>
							<property locked="0" name="Dynamic Permissions"
								value="" type="string"/>
							<property locked="0" name="ShowInHistory" value="Yes"
								type="boolean"/>
							<property locked="-1" name="ShowInTaskList" value="No"
								type="boolean"/>
							<property locked="-1" name="ServiceId"
								value="zebra.QuartzTaskAction" type="string"/>
							<property locked="0" name="Wait" value="40S"
								type="string"/>
						</properties>
						<properties name="(Inputs)"/>
					</TaskDef>
				</TaskDefs>
				<RoutingDefs>
					<RoutingDef GUID="4" TaskDestGUID="3" TaskOrgGUID="2">
						<Points>
							<Point X="6255" Y="2385"/>
						</Points>
						<properties name="(General)">
							<property locked="0" name="Name" value=""
								type="string"/>
							<property locked="0" name="Parallel" value="No"
								type="boolean"/>
							<property locked="0" name="Condition Class"
								value="com.anite.zebra.hivemind.routing.RoutingNameCondition"
								type="string"/>
						</properties>
					</RoutingDef>
					<RoutingDef GUID="5" TaskDestGUID="1" TaskOrgGUID="3">
						<Points>
							<Point X="8895" Y="4665"/>
						</Points>
						<properties name="(General)">
							<property locked="0" name="Name" value=""
								type="string"/>
							<property locked="0" name="Parallel" value="No"
								type="boolean"/>
							<property locked="0" name="Condition Class"
								value="com.anite.zebra.hivemind.routing.RoutingNameCondition"
								type="string"/>
						</properties>
					</RoutingDef>
				</RoutingDefs>
			</ProcessDef>
		</ProcessVersion>
	</ProcessVersions>
</ACGWFDNative>



From nobody at sheep.berlios.de  Wed Jan  4 16:56:04 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:56:04 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/defs ZebraPropertyGroups.java,1.2,1.3
Message-ID: <200601041556.k04Fu4H17178@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/defs
In directory sheep:/tmp/cvs-serv8139/src/main/java/com/anite/zebra/hivemind/om/defs

Modified Files:
	ZebraPropertyGroups.java 
Log Message:
Add Quartz scheduled delay task and test. 

Index: ZebraPropertyGroups.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/main/java/com/anite/zebra/hivemind/om/defs/ZebraPropertyGroups.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** ZebraPropertyGroups.java	26 Nov 2005 12:51:10 -0000	1.2
--- ZebraPropertyGroups.java	4 Jan 2006 15:55:31 -0000	1.3
***************
*** 54,58 ****
  
  	@OneToMany(targetEntity = ZebraPropertyElement.class, cascade=CascadeType.ALL)
! 	@JoinTable(table = @Table(name = "propertyGroupElements"), joinColumns = { @JoinColumn(name = "propertyGroupsId") }, inverseJoinColumns = @JoinColumn(name = "propertyId"))
      protected Set getPropertyElements() {
          return super.getPropertyElements();
--- 54,58 ----
  
  	@OneToMany(targetEntity = ZebraPropertyElement.class, cascade=CascadeType.ALL)
! 	//@JoinTable(table = @Table(name = "propertyGroupElements"), joinColumns = { @JoinColumn(name = "propertyGroupsId") }, inverseJoinColumns = @JoinColumn(name = "propertyId"))
      protected Set getPropertyElements() {
          return super.getPropertyElements();



From nobody at sheep.berlios.de  Wed Jan  4 16:59:18 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Wed, 4 Jan 2006 16:59:18 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind/src/test/resources Log4j.properties,1.3,NONE
Message-ID: <200601041559.k04FxIH17383@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind/src/test/resources
In directory sheep:/tmp/cvs-serv8911/src/test/resources

Removed Files:
	Log4j.properties 
Log Message:
Replaced with log4j.properties!

--- Log4j.properties DELETED ---



From nobody at sheep.berlios.de  Thu Jan  5 11:32:51 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Thu, 5 Jan 2006 11:32:51 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-hibernate/src/main/java/org/apache/fulcrum/hibernate/factory HibernateConnectionProviderDataSource.java,NONE,1.1 HibernateSessionFactory.java,1.4,1.5
Message-ID: <200601051032.k05AWpH28419@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/main/java/org/apache/fulcrum/hibernate/factory
In directory sheep:/tmp/cvs-serv22775/src/main/java/org/apache/fulcrum/hibernate/factory

Modified Files:
	HibernateSessionFactory.java 
Added Files:
	HibernateConnectionProviderDataSource.java 
Log Message:
Add datasource and properties attributes.

--- NEW FILE: HibernateConnectionProviderDataSource.java ---
package org.apache.fulcrum.hibernate.factory;

import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.apache.commons.lang.NotImplementedException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.connection.ConnectionProvider;

public class HibernateConnectionProviderDataSource implements DataSource {

	private ConnectionProvider connectionProvider = null;
	
	private static final Log log = LogFactory.getLog(HibernateConnectionProviderDataSource.class);
	
	public HibernateConnectionProviderDataSource(ConnectionProvider cp)
	{
		this.connectionProvider = cp;
	}
	
	public Connection getConnection() throws SQLException {
		return connectionProvider.getConnection();
	}

	public Connection getConnection(String username, String password) throws SQLException {
		log.warn("Not implemented by ConnectionProvider. Username/password ignored. getConnection() called.");
		return this.connectionProvider.getConnection();
	}

	public PrintWriter getLogWriter() throws SQLException {
		throw new NotImplementedException("getLogWriter() is not implemented by this DataSource.");
	}

	public void setLogWriter(PrintWriter out) throws SQLException {
		throw new NotImplementedException("setLogWriter() is not implemented by this DataSource.");
		
	}

	public void setLoginTimeout(int seconds) throws SQLException {
		throw new NotImplementedException("setLoginTimeout is not implemented by this DataSource.");
		
	}

	public int getLoginTimeout() throws SQLException {
		throw new NotImplementedException("getLoginTimeout() is not implemented by this DataSource.");
	}

}

Index: HibernateSessionFactory.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/main/java/org/apache/fulcrum/hibernate/factory/HibernateSessionFactory.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** HibernateSessionFactory.java	24 Nov 2005 10:38:04 -0000	1.4
--- HibernateSessionFactory.java	5 Jan 2006 10:32:49 -0000	1.5
***************
*** 4,7 ****
--- 4,11 ----
  package org.apache.fulcrum.hibernate.factory;
  
+ import java.util.Properties;
+ 
+ import javax.sql.DataSource;
+ 
  import org.apache.commons.lang.exception.NestableRuntimeException;
  import org.apache.hivemind.ServiceImplementationFactory;
***************
*** 15,18 ****
--- 19,23 ----
  import org.hibernate.cfg.AnnotationConfiguration;
  import org.hibernate.cfg.Configuration;
+ import org.hibernate.connection.ConnectionProvider;
  import org.hibernate.tool.hbm2ddl.SchemaExport;
  import org.hibernate.tool.hbm2ddl.SchemaUpdate;
***************
*** 35,38 ****
--- 40,47 ----
      private boolean updateSchema = false;
      private boolean createSchema = false;
+     
+     private DataSource connectionProviderDataSource = null;
+     
+     private Properties hibernateProperties = null;
  
      /**
***************
*** 44,48 ****
              Configuration config = new AnnotationConfiguration();
              config.configure();
! 
              if (createSchema){ 
                  SchemaExport export = new SchemaExport(config);
--- 53,57 ----
              Configuration config = new AnnotationConfiguration();
              config.configure();
!             hibernateProperties = config.getProperties();
              if (createSchema){ 
                  SchemaExport export = new SchemaExport(config);
***************
*** 54,59 ****
              }
              sessionFactory = config.buildSessionFactory();
! 
          } catch (HibernateException e) {
              throw new NestableRuntimeException(e);
          }
--- 63,71 ----
              }
              sessionFactory = config.buildSessionFactory();
!             ConnectionProvider connectionProvider = config.buildSettings().getConnectionProvider();
!             connectionProviderDataSource = 
!             	new HibernateConnectionProviderDataSource(connectionProvider);
          } catch (HibernateException e) {
+         	e.printStackTrace();
              throw new NestableRuntimeException(e);
          }
***************
*** 120,122 ****
--- 132,143 ----
      }
  
+     public DataSource getConnectionProviderDataSource()
+     {
+     	return this.connectionProviderDataSource;
+     }
+     
+     public Properties getHibernateProperties()
+     {
+     	return this.hibernateProperties;
+     }
  }



From nobody at sheep.berlios.de  Thu Jan  5 11:33:17 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Thu, 5 Jan 2006 11:33:17 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-hibernate/src/test/java/org/apache/fulcrum/hibernate/factory HibernateSessionFactoryTest.java,1.2,1.3
Message-ID: <200601051033.k05AXHH28475@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/test/java/org/apache/fulcrum/hibernate/factory
In directory sheep:/tmp/cvs-serv22870/src/test/java/org/apache/fulcrum/hibernate/factory

Modified Files:
	HibernateSessionFactoryTest.java 
Log Message:
test properties attributes.

Index: HibernateSessionFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/src/test/java/org/apache/fulcrum/hibernate/factory/HibernateSessionFactoryTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** HibernateSessionFactoryTest.java	22 Nov 2005 16:58:27 -0000	1.2
--- HibernateSessionFactoryTest.java	5 Jan 2006 10:33:15 -0000	1.3
***************
*** 1,4 ****
--- 1,6 ----
  package org.apache.fulcrum.hibernate.factory;
  
+ import java.util.Properties;
+ 
  import junit.framework.TestCase;
  
***************
*** 10,21 ****
      public void testInitialiseService() {
          
!         ServiceImplementationFactory hibernateSessionFactory = (ServiceImplementationFactory) RegistryManager
                  .getInstance().getRegistry().getService("fulcrum.hibernate.HibernateSessionFactory",
!                         ServiceImplementationFactory.class);
          assertNotNull(hibernateSessionFactory);
  
          Session session = (Session) hibernateSessionFactory.createCoreServiceImplementation(null);
          assertNotNull(session);
! 
      }
  }
--- 12,25 ----
      public void testInitialiseService() {
          
!         HibernateSessionFactory hibernateSessionFactory = (HibernateSessionFactory) RegistryManager
                  .getInstance().getRegistry().getService("fulcrum.hibernate.HibernateSessionFactory",
!                         HibernateSessionFactory.class);
          assertNotNull(hibernateSessionFactory);
  
          Session session = (Session) hibernateSessionFactory.createCoreServiceImplementation(null);
          assertNotNull(session);
!         Properties props = hibernateSessionFactory.getHibernateProperties();
!         assertNotNull(props);
!         System.out.println(props.toString());
      }
  }



From nobody at sheep.berlios.de  Thu Jan  5 12:36:55 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Thu, 5 Jan 2006 12:36:55 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-hibernate pom.xml,1.13,1.14
Message-ID: <200601051136.k05BatH32551@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate
In directory sheep:/tmp/cvs-serv5650

Modified Files:
	pom.xml 
Log Message:
bump version to 1.8

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-hibernate/pom.xml,v
retrieving revision 1.13
retrieving revision 1.14
diff -C2 -d -r1.13 -r1.14
*** pom.xml	22 Dec 2005 14:58:20 -0000	1.13
--- pom.xml	5 Jan 2006 11:36:50 -0000	1.14
***************
*** 6,10 ****
      <artifactId>fulcrum-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.7</version>
      <name>fulcrum-hivemind-hibernate - Hibernate Session manager for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.8</version>
      <name>fulcrum-hivemind-hibernate - Hibernate Session manager for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>



From nobody at sheep.berlios.de  Thu Jan  5 12:42:35 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Thu, 5 Jan 2006 12:42:35 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz pom.xml,1.1,1.2
Message-ID: <200601051142.k05BgZH00024@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz
In directory sheep:/tmp/cvs-serv12124

Modified Files:
	pom.xml 
Log Message:
bumped dependency for fulcrum-hibernate to 1.8

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/pom.xml,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** pom.xml	4 Jan 2006 12:06:07 -0000	1.1
--- pom.xml	5 Jan 2006 11:42:32 -0000	1.2
***************
*** 76,80 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.7</version>
          </dependency>
          <dependency>
--- 76,80 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.8</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Tue Jan 17 10:17:22 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:22 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model HibernateDynamicUser.java,1.1,1.2
Message-ID: <200601170917.k0H9HMx27871@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model
In directory sheep:/tmp/cvs-serv30009/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model

Modified Files:
	HibernateDynamicUser.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: HibernateDynamicUser.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model/HibernateDynamicUser.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** HibernateDynamicUser.java	22 Dec 2005 16:26:00 -0000	1.1
--- HibernateDynamicUser.java	17 Jan 2006 09:17:20 -0000	1.2
***************
*** 1,4 ****
--- 1,6 ----
  package org.apache.fulcrum.security.hibernate.dynamic.model;
  
+ import java.util.Date;
+ import java.util.List;
  import java.util.Set;
  
***************
*** 13,16 ****
--- 15,19 ----
  
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
+ import org.hibernate.annotations.CollectionOfElements;
  import org.hibernate.annotations.Type;
  
***************
*** 55,58 ****
--- 58,85 ----
      public Set<HibernateDynamicGroup> getGroupsAsSet() {
          return super.getGroupsAsSet();
+     }
+     
+     @Override
+     @Type(type="java.util.Date")
+     public Date getPasswordExpiryDate() {
+     	return super.getPasswordExpiryDate();
+     }
+     
+     @Override
+     @Type(type="java.util.Date")
+     public Date getLockedDate() {
+     	return super.getLockedDate();
+     }
+     
+     @Override
+     @Type(type="int")
+     public int getLoginAttempts() {
+     	return super.getLoginAttempts();
+     }
+     
+     @Override
+     @CollectionOfElements
+     public List<String> getPasswordHistory() {
+     	return super.getPasswordHistory();
      }
  



From nobody at sheep.berlios.de  Tue Jan 17 10:17:22 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:22 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate pom.xml,1.4,1.5
Message-ID: <200601170917.k0H9HMx27863@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate
In directory sheep:/tmp/cvs-serv30009

Modified Files:
	pom.xml 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/pom.xml,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** pom.xml	22 Dec 2005 16:26:01 -0000	1.4
--- pom.xml	17 Jan 2006 09:17:19 -0000	1.5
***************
*** 6,10 ****
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.7</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.8</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>



From nobody at sheep.berlios.de  Tue Jan 17 10:17:22 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:22 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/resources/META-INF hivemodule.xml,1.2,1.3
Message-ID: <200601170917.k0H9HMx27866@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/resources/META-INF
In directory sheep:/tmp/cvs-serv30009/src/main/resources/META-INF

Modified Files:
	hivemodule.xml 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: hivemodule.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/resources/META-INF/hivemodule.xml,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** hivemodule.xml	22 Dec 2005 16:26:01 -0000	1.2
--- hivemodule.xml	17 Jan 2006 09:17:20 -0000	1.3
***************
*** 21,24 ****
--- 21,28 ----
          <set property="className"
            value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser"/>
+ 		<set property="passwordDuration" value="28"/>
+ 		<set property="passwordCyclePolicy" value="5"/>
+ 		<set property="maxLoginAttempts" value="3"/>
+ 		<set property="lockReset" value="12"/>
          <set-service property="authenticator" service-id="fulcrum.security.authenticatorTextMatch"/>
          <set-service property="aclFactory" service-id="fulcrum.security.aclFactoryDynamic"/>



From nobody at sheep.berlios.de  Tue Jan 17 10:17:26 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:26 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/basic BasicModelManager.java,1.1,NONE BasicAccessControlListImpl.java,1.1,NONE BasicACLFactory.java,1.1,NONE BasicAccessControlList.java,1.1,NONE
Message-ID: <200601170917.k0H9HQx27882@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/basic
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/model/basic

Removed Files:
	BasicModelManager.java BasicAccessControlListImpl.java 
	BasicACLFactory.java BasicAccessControlList.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

--- BasicModelManager.java DELETED ---

--- BasicAccessControlListImpl.java DELETED ---

--- BasicACLFactory.java DELETED ---

--- BasicAccessControlList.java DELETED ---



From nobody at sheep.berlios.de  Tue Jan 17 10:17:26 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:26 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind pom.xml,1.9,1.10
Message-ID: <200601170917.k0H9HQx27886@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind
In directory sheep:/tmp/cvs-serv30075

Modified Files:
	pom.xml 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/pom.xml,v
retrieving revision 1.9
retrieving revision 1.10
diff -C2 -d -r1.9 -r1.10
*** pom.xml	20 Dec 2005 12:47:20 -0000	1.9
--- pom.xml	17 Jan 2006 09:17:24 -0000	1.10
***************
*** 7,11 ****
    <packaging>jar</packaging>
    <name>Fulcrum Security for Hivemind</name>
!   <version>1.4</version>
    <description>A port of Fulcrum Security to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>
--- 7,11 ----
    <packaging>jar</packaging>
    <name>Fulcrum Security for Hivemind</name>
!   <version>1.5</version>
    <description>A port of Fulcrum Security to run inside Hivemind.</description>
    <url>http://zebra.berlios.de</url>



From nobody at sheep.berlios.de  Tue Jan 17 10:17:27 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:27 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi AbstractUserManager.java,1.3,1.4
Message-ID: <200601170917.k0H9HRx27899@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/spi

Modified Files:
	AbstractUserManager.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: AbstractUserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi/AbstractUserManager.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** AbstractUserManager.java	15 Nov 2005 17:56:26 -0000	1.3
--- AbstractUserManager.java	17 Jan 2006 09:17:25 -0000	1.4
***************
*** 1,3 ****
--- 1,4 ----
  package org.apache.fulcrum.security.spi;
+ 
  /*
   *  Copyright 2001-2004 The Apache Software Foundation
***************
*** 15,21 ****
   *  limitations under the License.
   */
  import org.apache.commons.lang.StringUtils;
- import org.apache.commons.logging.Log;
- import org.apache.commons.logging.LogFactory;
  import org.apache.fulcrum.security.UserManager;
  import org.apache.fulcrum.security.acl.AccessControlList;
--- 16,25 ----
   *  limitations under the License.
   */
+ import java.util.Calendar;
+ import java.util.Date;
+ import java.util.GregorianCalendar;
+ import java.util.List;
+ 
  import org.apache.commons.lang.StringUtils;
  import org.apache.fulcrum.security.UserManager;
  import org.apache.fulcrum.security.acl.AccessControlList;
***************
*** 25,320 ****
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.PasswordMismatchException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  
  /**
!  * This implementation keeps all objects in memory.  This is mostly meant to help
   * with testing and prototyping of ideas.
!  *
   * Implementing classes must inject an ACLFractory and Authenticator
!  *
   * @todo Need to load up Crypto component and actually encrypt passwords!
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public abstract class AbstractUserManager
!     extends AbstractEntityManager
!     implements UserManager
! {
  
!     protected abstract User persistNewUser(User user)
!         throws DataBackendException;
  
  	private ACLFactory aclFactory;
!     
!     /**
!      * Authenticator will be dependency injected
!      */
  	private Authenticator authenticator;
  
!     public AccessControlList getACL(User user) throws UnknownEntityException
!     {
!         return getAclFactory().getAccessControlList(user);
  
!     }
  
!     /**
!     	* Check whether a specified user's account exists.
!     	*
!     	* The login name is used for looking up the account.
!     	*
!     	* @param user The user to be checked.
!     	* @return true if the specified account exists
!     	* @throws DataBackendException if there was an error accessing
!     	*         the data backend.
!     	*/
!     public boolean checkExists(User user) throws DataBackendException
!     {
!         return checkExists(user.getName());
!     }
  
!     /**
!      * Retrieve a user from persistent storage using username as the
!      * key, and authenticate the user. The implementation may chose
!      * to authenticate to the server as the user whose data is being
!      * retrieved.
!      *
!      * @param userName the name of the user.
!      * @param password the user supplied password.
!      * @return an User object.
!      * @exception PasswordMismatchException if the supplied password was
!      *            incorrect.
!      * @exception UnknownEntityException if the user's account does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      */
!     public User getUser(String userName, String password)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException
!     {
!         User user = getUser(userName);
!         authenticate(user, password);
!         return user;
!     }
!     
!     public User getUser(String name)
!     	throws DataBackendException, UnknownEntityException
!     {
!     	User user = getAllUsers().getUserByName(name);
!     	if (user == null)
!     	{
!     		throw new UnknownEntityException("The specified user does not exist");
!     	}
!     	return user;
!     }    
!     
!     /**
! 	* Retrieve a User object with specified Id.
! 	*
! 	* @param id the id of the User.
! 	*
! 	* @return an object representing the User with specified id.
! 	*
! 	* @throws UnknownEntityException if the user does not
! 	*            exist in the database.
! 	* @throws DataBackendException if there is a problem accessing the
! 	*            storage.
! 	*/
!     public User getUserById(Object id)
!     	throws DataBackendException, UnknownEntityException
! 		{
!     	User user = getAllUsers().getUserById(id);
!     	if (user == null)
!     	{
!     		throw new UnknownEntityException("The specified user does not exist");
!     	}
!     	return user;
! 	}    
!     /**
!      * Authenticate an User with the specified password. If authentication
!      * is successful the method returns nothing. If there are any problems,
!      * exception was thrown.
!      *
!      * @param user an User object to authenticate.
!      * @param password the user supplied password.
!      * @exception PasswordMismatchException if the supplied password was
!      *            incorrect.
!      * @exception UnknownEntityException if the user's account does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      */
!     public void authenticate(User user, String password)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException
!     {
!         if (!authenticator.authenticate(user, password))
!         {
!             throw new PasswordMismatchException("Can not authenticate user.");
!         }
!     }
!     /**
!      * Change the password for an User. The user must have supplied the
!      * old password to allow the change.
!      *
!      * @param user an User to change password for.
!      * @param oldPassword The old password to verify
!      * @param newPassword The new password to set
!      * @exception PasswordMismatchException if the supplied password was
!      *            incorrect.
!      * @exception UnknownEntityException if the user's account does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      */
!     public void changePassword(
!         User user,
!         String oldPassword,
!         String newPassword)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException
!     {
!         if (!checkExists(user))
!         {
!             throw new UnknownEntityException(
!                 "The account '" + user.getName() + "' does not exist");
!         }
!         if (!oldPassword.equals(user.getPassword()))
!         {
!             throw new PasswordMismatchException(
!                 "The supplied old password for '"
!                     + user.getName()
!                     + "' was incorrect");
!         }
!         user.setPassword(newPassword);
!         // save the changes in the database imediately, to prevent the password
!         // being 'reverted' to the old value if the user data is lost somehow
!         // before it is saved at session's expiry.
!         saveUser(user);
!     }
!     /**
!      * Forcibly sets new password for an User.
!      *
!      * This is supposed by the administrator to change the forgotten or
!      * compromised passwords. Certain implementatations of this feature
!      * would require administrative level access to the authenticating
!      * server / program.
!      *
!      * @param user an User to change password for.
!      * @param password the new password.
!      * @exception UnknownEntityException if the user's record does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      */
!     public void forcePassword(User user, String password)
!         throws UnknownEntityException, DataBackendException
!     {
!         if (!checkExists(user))
!         {
!             throw new UnknownEntityException(
!                 "The account '" + user.getName() + "' does not exist");
!         }
!         user.setPassword(password);
!         // save the changes in the database immediately, to prevent the
!         // password being 'reverted' to the old value if the user data
!         // is lost somehow before it is saved at session's expiry.
!         saveUser(user);
!     }
!     /**
!      * Construct a blank User object.
!      *
!      * This method calls getUserClass, and then creates a new object using
!      * the default constructor.
!      *
!      * @return an object implementing User interface.
!      * @throws DataBackendException if the object could not be instantiated.
!      */
!     public User getUserInstance() throws DataBackendException
!     {
!         User user;
  
!         try
!         {
!             user = (User) Class.forName(getClassName()).newInstance();
!         }
!         catch (Exception e)
!         {
!             throw new DataBackendException(
!                 "Problem creating instance of class " + getClassName(),
!                 e);
!         }
  
!         return user;
!     }
!     /**
!      * Construct a blank User object.
!      *
!      * This method calls getUserClass, and then creates a new object using
!      * the default constructor.
!      *
!      * @param userName The name of the user.
!      *
!      * @return an object implementing User interface.
!      *
!      * @throws DataBackendException if the object could not be instantiated.
!      */
!     public User getUserInstance(String userName) throws DataBackendException
!     {
!         User user = getUserInstance();
!         user.setName(userName);
!         return user;
!     }
  
!     /**
!        * Creates new user account with specified attributes.
!        *
!        * @param user the object describing account to be created.
!        * @param password The password to use for the account.
!        *
!        * @throws DataBackendException if there was an error accessing the
!        *         data backend.
!        * @throws EntityExistsException if the user account already exists.
!        */
!     public User addUser(User user, String password)
!         throws DataBackendException, EntityExistsException
!     {
!         if (StringUtils.isEmpty(user.getName()))
!         {
!             throw new DataBackendException(
!                 "Could not create " + "an user with empty name!");
!         }
!         if (checkExists(user))
!         {
!             throw new EntityExistsException(
!                 "The account '" + user.getName() + "' already exists");
!         }
!         user.setPassword(password);
!         try
!         {
!             return persistNewUser(user);
!         }
!         catch (Exception e)
!         {
!             throw new DataBackendException(
!                 "Failed to create account '" + user.getName() + "'",
!                 e);
!         }
!     }
  
!    
!     public Authenticator getAuthenticator() {
!         return authenticator;
!     }
  
!     public void setAuthenticator(Authenticator authenticator) {
!         this.authenticator = authenticator;
!     }
  
!     public ACLFactory getAclFactory() {
!         return aclFactory;
!     }
  
!     public void setAclFactory(ACLFactory aclFactory) {
!         this.aclFactory = aclFactory;
!     }
  
  }
--- 29,448 ----
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
+ import org.apache.fulcrum.security.util.PasswordExpiredException;
+ import org.apache.fulcrum.security.util.PasswordHistoryException;
  import org.apache.fulcrum.security.util.PasswordMismatchException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
+ import org.apache.fulcrum.security.util.UserLockedException;
  
  /**
!  * This implementation keeps all objects in memory. This is mostly meant to help
   * with testing and prototyping of ideas.
!  * 
   * Implementing classes must inject an ACLFractory and Authenticator
!  * 
   * @todo Need to load up Crypto component and actually encrypt passwords!
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
   * @version $Id$
   */
! public abstract class AbstractUserManager extends AbstractEntityManager
! 		implements UserManager {
  
! 	protected abstract User persistNewUser(User user)
! 			throws DataBackendException;
  
  	private ACLFactory aclFactory;
! 
! 	/**
! 	 * Authenticator will be dependency injected
! 	 */
  	private Authenticator authenticator;
  
! 	// Password Cycle Policy, Password Duration, Login Attempts and
! 	// Lock Reset will be dependency injected.
! 	private int passwordCyclePolicy;
  
! 	private int passwordDuration;
! 	
! 	private int maxLoginAttempts;
! 	
! 	private int lockReset;
  
! 	public AccessControlList getACL(User user) throws UnknownEntityException {
! 		return getAclFactory().getAccessControlList(user);
! 	}
  
! 	/**
! 	 * Check whether a specified user's account exists.
! 	 * 
! 	 * The login name is used for looking up the account.
! 	 * 
! 	 * @param user
! 	 *            The user to be checked.
! 	 * @return true if the specified account exists
! 	 * @throws DataBackendException
! 	 *             if there was an error accessing the data backend.
! 	 */
! 	public boolean checkExists(User user) throws DataBackendException {
! 		return checkExists(user.getName());
! 	}
  
! 	/**
! 	 * Retrieve a user from persistent storage using username as the key, and
! 	 * authenticate the user. The implementation may chose to authenticate to
! 	 * the server as the user whose data is being retrieved.
! 	 * 
! 	 * @param userName
! 	 *            the name of the user.
! 	 * @param password
! 	 *            the user supplied password.
! 	 * @return a User object.
! 	 * @exception PasswordMismatchException
! 	 *                if the supplied password was incorrect.
! 	 * @exception UnknownEntityException
! 	 *                if the user's account does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 * @throws PasswordExpiredException 
! 	 *                if the user's password has expired.
! 	 */
! 	public User getUser(String userName, String password)
! 			throws PasswordMismatchException, UnknownEntityException,
! 			UserLockedException, DataBackendException, PasswordExpiredException {
! 		User user = getUser(userName);
! 		authenticate(user, password);
! 		return user;
! 	}
  
! 	public User getUser(String name) throws DataBackendException,
! 			UnknownEntityException {
! 		User user = getAllUsers().getUserByName(name);
! 		if (user == null) {
! 			throw new UnknownEntityException(
! 					"The specified user does not exist");
! 		}
! 		return user;
! 	}
  
! 	/**
! 	 * Retrieve a User object with specified Id.
! 	 * 
! 	 * @param id
! 	 *            the id of the User.
! 	 * 
! 	 * @return an object representing the User with specified id.
! 	 * 
! 	 * @throws UnknownEntityException
! 	 *             if the user does not exist in the database.
! 	 * @throws DataBackendException
! 	 *             if there is a problem accessing the storage.
! 	 */
! 	public User getUserById(Object id) throws DataBackendException,
! 			UnknownEntityException {
! 		User user = getAllUsers().getUserById(id);
! 		if (user == null) {
! 			throw new UnknownEntityException(
! 					"The specified user does not exist");
! 		}
! 		return user;
! 	}
  
! 	/**
! 	 * Authenticate an User with the specified password. If authentication is
! 	 * successful the method returns nothing. If there are any problems,
! 	 * exception was thrown.
! 	 * 
! 	 * @param user
! 	 *            an User object to authenticate.
! 	 * @param password
! 	 *            the user supplied password.
! 	 * @exception PasswordMismatchException
! 	 *                if the supplied password was incorrect.
! 	 * @exception UnknownEntityException
! 	 *                if the user's account does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 * @throws PasswordExpiredException
! 	 * 				  is the user's password has expired
! 	 */
! 	public void authenticate(User user, String password)
! 			throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, UserLockedException, PasswordExpiredException {
  
! 		if (user.getLockedDate() != null) {
! 			Calendar cal = Calendar.getInstance();
! 			cal.add(Calendar.HOUR_OF_DAY, (-1 * lockReset));
! 			if (cal.getTime().before(user.getLockedDate())) {
! 				throw new UserLockedException("User is locked");
! 			}
! 		}
! 		
! 		if (user.getPasswordExpiryDate().compareTo(new Date()) <= 0) {
! 			throw new PasswordExpiredException("Password expired on "+user.getPasswordExpiryDate());
! 		}
! 		
! 		if (!authenticator.authenticate(user, password)) {
! 			user.setLoginAttempts(user.getLoginAttempts()+1);
! 			System.out.println(user.getLoginAttempts()+" max="+maxLoginAttempts+" lockTime= "+lockReset);
! 			if (user.getLoginAttempts() == maxLoginAttempts) {
! 				user.setLockedDate(new Date());
! 				user.setLoginAttempts(0);
! 				System.out.println("User locked");
! 			}
! 			throw new PasswordMismatchException("Can not authenticate user.");
! 		}
! 		user.setLoginAttempts(0);
! 	}
  
! 	/**
! 	 * Change the password for an User. The user must have supplied the old
! 	 * password to allow the change.
! 	 * 
! 	 * @param user
! 	 *            an User to change password for.
! 	 * @param oldPassword
! 	 *            The old password to verify
! 	 * @param newPassword
! 	 *            The new password to set
! 	 * @exception PasswordMismatchException
! 	 *                if the supplied password was incorrect.
! 	 * @exception UnknownEntityException
! 	 *                if the user's account does not exist in the database.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 * @throws PasswordExpiredException 
! 	 */
! 	public void changePassword(User user, String oldPassword, String newPassword)
! 			throws PasswordMismatchException, PasswordHistoryException,
! 			UserLockedException, UnknownEntityException, DataBackendException, PasswordExpiredException {
! 		if (!checkExists(user)) {
! 			throw new UnknownEntityException("The account '" + user.getName()
! 					+ "' does not exist");
! 		}
  
! 		authenticate(user, oldPassword);
! 		cyclePassword(user, newPassword);
! 		// save the changes in the database imediately, to prevent the password
! 		// being 'reverted' to the old value if the user data is lost somehow
! 		// before it is saved at session's expiry.
! 		saveUser(user);
! 	}
  
+ 	/**
+ 	 * Utility method to set new password and maintain the password history.
+ 	 * 
+ 	 * @param user User.
+ 	 * @param newPassword User's new password.
+ 	 * @throws DataBackendException
+ 	 * @throws PasswordHistoryException
+ 	 * 				if the password is contained in the history
+ 	 *
+ 	 * @author richard.brooks
+ 	 * Created on Jan 16, 2006
+ 	 */
+ 	private void cyclePassword(User user, String newPassword)
+ 			throws DataBackendException, PasswordHistoryException {
+ 		String cryptoPassword = authenticator.getCryptoPassword(newPassword);
+ 		List passwordHistory = user.getPasswordHistory();
+ 
+ 		if (passwordHistory.contains(cryptoPassword)) {
+ 			throw new PasswordHistoryException("Password invalid");
+ 		} else {
+ 			if (passwordHistory.size() >= getPasswordCyclePolicy()) {
+ 				for (int i = 0; i < getPasswordCyclePolicy() - 1; i++) {
+ 					passwordHistory.set(i, passwordHistory.get(i + 1));
+ 				}
+ 				passwordHistory.remove(getPasswordCyclePolicy() - 1);
+ 			}
+ 			passwordHistory.add(user.getPassword());
+ 			user.setPassword(cryptoPassword);
+ 			setPasswordExpiry(user);
+ 		}
+ 	}
+ 
+ 	/**
+ 	 * Utility method that sets the user's password expiry date.
+ 	 * @param user The user whose password is to be changed.
+ 	 *
+ 	 * @author richard.brooks
+ 	 * Created on Jan 16, 2006
+ 	 */
+ 	private void setPasswordExpiry(User user) {
+ 		Calendar date = Calendar.getInstance();
+ 		GregorianCalendar passwordExpiry = new GregorianCalendar(date.get(Calendar.YEAR),
+                 												 date.get(Calendar.MONTH),
+                 												 date.get(Calendar.DAY_OF_MONTH));
+ 		passwordExpiry.add(Calendar.DAY_OF_MONTH, getPasswordDuration());
+ 		user.setPasswordExpiryDate(passwordExpiry.getTime());
+ 	}
+ 
+ 	/**
+ 	 * Forcibly sets new password for a User.
+ 	 * 
+ 	 * This is supposed by the administrator to change the forgotten or
+ 	 * compromised passwords. Certain implementatations of this feature would
+ 	 * require administrative level access to the authenticating server /
+ 	 * program.
+ 	 * 
+ 	 * @param user
+ 	 *            an User to change password for.
+ 	 * @param password
+ 	 *            the new password.
+ 	 * @exception UnknownEntityException
+ 	 *                if the user's record does not exist in the database.
+ 	 * @exception DataBackendException
+ 	 *                if there is a problem accessing the storage.
+ 	 */
+ 	public void forcePassword(User user, String password)
+ 			throws UnknownEntityException, DataBackendException,
+ 			PasswordHistoryException {
+ 		if (!checkExists(user)) {
+ 			throw new UnknownEntityException("The account '" + user.getName()
+ 					+ "' does not exist");
+ 		}
+ 		// user.setPassword(authenticator.getCryptoPassword(password));
+ 		cyclePassword(user, password);
+ 		// save the changes in the database immediately, to prevent the
+ 		// password being 'reverted' to the old value if the user data
+ 		// is lost somehow before it is saved at session's expiry.
+ 		saveUser(user);
+ 	}
+ 
+ 	/**
+ 	 * Construct a blank User object.
+ 	 * 
+ 	 * This method calls getUserClass, and then creates a new object using the
+ 	 * default constructor.
+ 	 * 
+ 	 * @return an object implementing User interface.
+ 	 * @throws DataBackendException
+ 	 *             if the object could not be instantiated.
+ 	 */
+ 	public User getUserInstance() throws DataBackendException {
+ 		User user;
+ 
+ 		try {
+ 			user = (User) Class.forName(getClassName()).newInstance();
+ 		} catch (Exception e) {
+ 			throw new DataBackendException(
+ 					"Problem creating instance of class " + getClassName(), e);
+ 		}
+ 
+ 		return user;
+ 	}
+ 
+ 	/**
+ 	 * Construct a blank User object.
+ 	 * 
+ 	 * This method calls getUserClass, and then creates a new object using the
+ 	 * default constructor.
+ 	 * 
+ 	 * @param userName
+ 	 *            The name of the user.
+ 	 * 
+ 	 * @return an object implementing User interface.
+ 	 * 
+ 	 * @throws DataBackendException
+ 	 *             if the object could not be instantiated.
+ 	 */
+ 	public User getUserInstance(String userName) throws DataBackendException {
+ 		User user = getUserInstance();
+ 		user.setName(userName);
+ 		return user;
+ 	}
+ 
+ 	/**
+ 	 * Creates new user account with specified attributes.
+ 	 * 
+ 	 * @param user
+ 	 *            the object describing account to be created.
+ 	 * @param password
+ 	 *            The password to use for the account.
+ 	 * 
+ 	 * @throws DataBackendException
+ 	 *             if there was an error accessing the data backend.
+ 	 * @throws EntityExistsException
+ 	 *             if the user account already exists.
+ 	 */
+ 	public User addUser(User user, String password)
+ 			throws DataBackendException, EntityExistsException {
+ 		if (StringUtils.isEmpty(user.getName())) {
+ 			throw new DataBackendException(
+ 					"Could not create a user with empty name!");
+ 		}
+ 		if (checkExists(user)) {
+ 			throw new EntityExistsException("The account '" + user.getName()
+ 					+ "' already exists");
+ 		}
+ 		user.setPassword(authenticator.getCryptoPassword(password));
+ 		setPasswordExpiry(user);
+ 		user.setLockedDate(null);
+ 		user.setLoginAttempts(0);
+ 		try {
+ 			return persistNewUser(user);
+ 		} catch (Exception e) {
+ 			throw new DataBackendException("Failed to create account '"
+ 					+ user.getName() + "'", e);
+ 		}
+ 	}
+ 
+ 	public Authenticator getAuthenticator() {
+ 		return authenticator;
+ 	}
+ 
+ 	public void setAuthenticator(Authenticator authenticator) {
+ 		this.authenticator = authenticator;
+ 	}
+ 
+ 	public ACLFactory getAclFactory() {
+ 		return aclFactory;
+ 	}
+ 
+ 	public void setAclFactory(ACLFactory aclFactory) {
+ 		this.aclFactory = aclFactory;
+ 	}
+ 
+ 	/**
+ 	 * 
+ 	 * @return The number of previous passwords stored.
+ 	 * 
+ 	 * @author richard.brooks Created on Jan 11, 2006
+ 	 */
+ 	public int getPasswordCyclePolicy() {
+ 		return this.passwordCyclePolicy;
+ 	}
+ 
+ 	/**
+ 	 * Sets the number of previous passwords stored.
+ 	 * 
+ 	 * @param passwordCyclePolicy Number of passwords to store
+ 	 * 
+ 	 * @author richard.brooks Created on Jan 11, 2006
+ 	 */
+ 	public void setPasswordCyclePolicy(int passwordCyclePolicy) {
+ 		this.passwordCyclePolicy = passwordCyclePolicy;
+ 	}
+ 
+ 	public int getPasswordDuration() {
+ 		return this.passwordDuration;
+ 	}
+ 
+ 	public void setPasswordDuration(int passwordDuration) {
+ 		this.passwordDuration = passwordDuration;
+ 	}
+ 
+ 	public int getLockReset() {
+ 		return lockReset;
+ 	}
+ 
+ 	public void setLockReset(int lockReset) {
+ 		this.lockReset = lockReset;
+ 	}
+ 
+ 	public int getMaxLoginAttempts() {
+ 		return maxLoginAttempts;
+ 	}
+ 
+ 	public void setMaxLoginAttempts(int maxLoginAttempts) {
+ 		this.maxLoginAttempts = maxLoginAttempts;
+ 	}
  }



From nobody at sheep.berlios.de  Tue Jan 17 10:17:27 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:27 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/test/java/org/apache/fulcrum/security/model ACLFactoryTest.java,1.2,1.3
Message-ID: <200601170917.k0H9HRx27895@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/test/java/org/apache/fulcrum/security/model
In directory sheep:/tmp/cvs-serv30075/src/test/java/org/apache/fulcrum/security/model

Modified Files:
	ACLFactoryTest.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: ACLFactoryTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/test/java/org/apache/fulcrum/security/model/ACLFactoryTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** ACLFactoryTest.java	15 Nov 2005 09:30:30 -0000	1.2
--- ACLFactoryTest.java	17 Jan 2006 09:17:24 -0000	1.3
***************
*** 21,27 ****
  import org.apache.fulcrum.hivemind.RegistryManager;
  import org.apache.fulcrum.security.acl.AccessControlList;
- import org.apache.fulcrum.security.model.basic.BasicAccessControlList;
- import org.apache.fulcrum.security.model.basic.entity.BasicGroup;
- import org.apache.fulcrum.security.model.basic.entity.BasicUser;
  import org.apache.fulcrum.security.model.dynamic.DynamicAccessControlList;
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicGroup;
--- 21,24 ----
***************
*** 60,82 ****
          DynamicAccessControlList dacl = (DynamicAccessControlList) acl;
          assertTrue(dacl.hasPermission(permission));
- 
-     }
- 
-     public void testCreatingBasicACL() throws Exception {
-         ACLFactory factory = (ACLFactory) RegistryManager.getInstance().getRegistry().getService(
-                 "fulcrum.security.aclFactoryBasic", ACLFactory.class);
-         BasicUser user = new BasicUser();
-         user.setName("bob");
-         user.setId(new Integer(1));
-         BasicGroup group = new BasicGroup();
-         group.setName("group1");
-         group.setId(new Integer(1));
-         user.addGroup(group);
-         AccessControlList acl = factory.getAccessControlList(user);
-         assertTrue(acl instanceof BasicAccessControlList);
-         BasicAccessControlList bacl = (BasicAccessControlList) acl;
-         assertTrue(bacl.hasGroup(group));
- 
      }
- 
  }
--- 57,60 ----



From nobody at sheep.berlios.de  Tue Jan 17 10:17:28 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:28 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/basic/entity BasicGroup.java,1.1,NONE BasicUser.java,1.1,NONE
Message-ID: <200601170917.k0H9HSx27905@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/basic/entity
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/model/basic/entity

Removed Files:
	BasicGroup.java BasicUser.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

--- BasicGroup.java DELETED ---

--- BasicUser.java DELETED ---



From nobody at sheep.berlios.de  Tue Jan 17 10:17:28 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:28 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/basic/test AbstractModelManagerTest.java,1.1,NONE
Message-ID: <200601170917.k0H9HRx27902@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/basic/test
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/model/basic/test

Removed Files:
	AbstractModelManagerTest.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

--- AbstractModelManagerTest.java DELETED ---



From nobody at sheep.berlios.de  Tue Jan 17 10:17:28 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:28 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security UserManager.java,1.1,1.2
Message-ID: <200601170917.k0H9HSx27908@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security

Modified Files:
	UserManager.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: UserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/UserManager.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** UserManager.java	14 Nov 2005 18:20:47 -0000	1.1
--- UserManager.java	17 Jan 2006 09:17:25 -0000	1.2
***************
*** 16,24 ****
--- 16,28 ----
   */
  import org.apache.fulcrum.security.acl.AccessControlList;
+ import org.apache.fulcrum.security.authenticator.Authenticator;
  import org.apache.fulcrum.security.entity.User;
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.EntityExistsException;
+ import org.apache.fulcrum.security.util.PasswordExpiredException;
+ import org.apache.fulcrum.security.util.PasswordHistoryException;
  import org.apache.fulcrum.security.util.PasswordMismatchException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
+ import org.apache.fulcrum.security.util.UserLockedException;
  import org.apache.fulcrum.security.util.UserSet;
  /**
***************
*** 119,125 ****
       * @exception DataBackendException if there is a problem accessing the
       *            storage.
       */
      User getUser(String username, String password)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException;
  
  	/**
--- 123,132 ----
       * @exception DataBackendException if there is a problem accessing the
       *            storage.
+      * @throws UserLockedException 
+      * @throws PasswordExpiredException 
       */
      User getUser(String username, String password)
!         throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, UserLockedException, PasswordExpiredException;
  
  	/**
***************
*** 154,160 ****
       * @exception DataBackendException if there is a problem accessing the
       *            storage.
       */
      void authenticate(User user, String password)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException;
      /**
       * Creates new user account with specified attributes.
--- 161,169 ----
       * @exception DataBackendException if there is a problem accessing the
       *            storage.
+      * @throws UserLockedException 
+      * @throws PasswordExpiredException 
       */
      void authenticate(User user, String password)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException, UserLockedException, PasswordExpiredException;
      /**
       * Creates new user account with specified attributes.
***************
*** 187,193 ****
       * @exception DataBackendException if there is a problem accessing the
       *            storage.
       */
      void changePassword(User user, String oldPassword, String newPassword)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException;
      /**
       * Forcibly sets new password for an User.
--- 196,206 ----
       * @exception DataBackendException if there is a problem accessing the
       *            storage.
+      * @throws PasswordHistoryException 
+      * @throws UserLockedException 
+      * @throws PasswordExpiredException 
       */
      void changePassword(User user, String oldPassword, String newPassword)
!         throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, PasswordHistoryException, UserLockedException, PasswordExpiredException;
      /**
       * Forcibly sets new password for an User.
***************
*** 204,209 ****
       * @exception DataBackendException if there is a problem accessing the
       *            storage.
       */
!     void forcePassword(User user, String password) throws UnknownEntityException, DataBackendException;
      
      /**
--- 217,223 ----
       * @exception DataBackendException if there is a problem accessing the
       *            storage.
+      * @throws PasswordHistoryException 
       */
!     void forcePassword(User user, String password) throws UnknownEntityException, DataBackendException, PasswordHistoryException;
      
      /**
***************
*** 217,221 ****
--- 231,251 ----
      public AccessControlList getACL(User user) throws UnknownEntityException;
      
+     /**
+      * 
+      * @return
+      *
+      * @author richard.brooks
+      * Created on Jan 11, 2006
+      */
+ 	Authenticator getAuthenticator();
  	
+ 	/**
+ 	 * 
+ 	 * @param authenticator
+ 	 *
+ 	 * @author richard.brooks
+ 	 * Created on Jan 11, 2006
+ 	 */
+ 	void setAuthenticator(Authenticator authenticator);
  
  



From nobody at sheep.berlios.de  Tue Jan 17 10:17:28 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:28 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity DynamicUser.java,1.1,1.2
Message-ID: <200601170917.k0H9HSx27906@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/model/dynamic/entity

Modified Files:
	DynamicUser.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: DynamicUser.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity/DynamicUser.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** DynamicUser.java	14 Nov 2005 18:20:50 -0000	1.1
--- DynamicUser.java	17 Jan 2006 09:17:25 -0000	1.2
***************
*** 16,20 ****
--- 16,23 ----
   */
  
+ import java.util.ArrayList;
+ import java.util.Date;
  import java.util.HashSet;
+ import java.util.List;
  import java.util.Set;
  
***************
*** 39,46 ****
--- 42,76 ----
  {
      private String password;
+     private Date passwordExpiryDate;
+     private Date locked;
+     private int loginAttempts;
+         
+     private List passwordHistory = new ArrayList<String>();
      private Set groupSet = new GroupSet();
      private Set delegators = new HashSet();
      private Set delegatees = new HashSet();
  
+     /**
+      * 
+      * @return Returns the password history.
+      *
+      * @author richard.brooks
+      * Created on Jan 11, 2006
+      */
+     public List getPasswordHistory() {
+     	return this.passwordHistory;
+     }
+     
+     /**
+      * 
+      * @param passwordHistory The password history to set.
+      *
+      * @author richard.brooks
+      * Created on Jan 11, 2006
+      */
+     public void setPasswordHistory(List passwordHistory) {
+     	this.passwordHistory = passwordHistory;
+     }
+     
  	/**
  	 * @return Returns the delegatees.
***************
*** 49,52 ****
--- 79,83 ----
  		return delegatees;
  	}
+ 	
  	/**
  	 * @param delegatees The delegatees to set.
***************
*** 55,58 ****
--- 86,90 ----
  		this.delegatees = delegatees;
  	}
+ 	
  	/**
  	 * @return Returns the delegators.
***************
*** 61,64 ****
--- 93,97 ----
  		return delegators;
  	}
+ 	
  	/**
  	 * @param delegates The delegators to set.
***************
*** 67,72 ****
  		this.delegators = delegates;
  	}
      /**
!      * @return
       */
      public String getPassword()
--- 100,106 ----
  		this.delegators = delegates;
  	}
+ 	
      /**
!      * @return Returns the password.
       */
      public String getPassword()
***************
*** 74,79 ****
          return password;
      }
      /**
!      * @param password
       */
      public void setPassword(String password)
--- 108,114 ----
          return password;
      }
+     
      /**
!      * @param password The password to set.
       */
      public void setPassword(String password)
***************
*** 81,85 ****
--- 116,165 ----
          this.password = password;
      }
+     
+     /**
+      * 
+      * @return The expiry date of the current password.
+      *
+      * @author richard.brooks
+      * Created on Jan 11, 2006
+      */
+     public Date getPasswordExpiryDate() {
+ 		return passwordExpiryDate;
+ 	}
+ 
      /**
+      * 
+      * @param passwordExpiryDate Set the expiry date of the password.
+      *
+      * @author richard.brooks
+      * Created on Jan 11, 2006
+      */
+ 	public void setPasswordExpiryDate(Date passwordExpiryDate) {
+ 		this.passwordExpiryDate = passwordExpiryDate;
+ 	}
+ 
+ 	/**
+ 	 * 
+ 	 * @return Return whether the user is locked.
+ 	 *
+ 	 * @author richard.brooks
+ 	 * Created on Jan 11, 2006
+ 	 */
+ 	public Date getLockedDate() {
+ 		return locked;
+ 	}
+ 
+ 	/**
+ 	 * 
+ 	 * @param locked Sets whether the user is locked
+ 	 *
+ 	 * @author richard.brooks
+ 	 * Created on Jan 11, 2006
+ 	 */
+ 	public void setLockedDate(Date locked) {
+ 		this.locked = locked;
+ 	}
+ 	
+ 	/**
      * @return
      */
***************
*** 93,96 ****
--- 173,177 ----
      	}
      }
+     
      /**
       * @param groups
***************
*** 103,110 ****
--- 184,193 ----
      		this.groupSet = new GroupSet();
      }
+     
      public void removeGroup(Group group)
      {
          getGroups().remove(group);
      }
+     
      public void addGroup(Group group)
      {
***************
*** 116,122 ****
--- 199,214 ----
  		this.groupSet = groups;
  	}
+ 	
  	public Set getGroupsAsSet()
  	{
  		return groupSet;
+ 	}
+ 
+ 	public int getLoginAttempts() {
+ 		return loginAttempts;
+ 	}
+ 
+ 	public void setLoginAttempts(int loginAttempts) {
+ 		this.loginAttempts = loginAttempts;
  	}
  }



From nobody at sheep.berlios.de  Tue Jan 17 10:17:25 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:25 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util PasswordHistoryException.java,NONE,1.1 PasswordExpiredException.java,NONE,1.1 UserLockedException.java,NONE,1.1
Message-ID: <200601170917.k0H9HPx27877@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/util
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/util

Added Files:
	PasswordHistoryException.java PasswordExpiredException.java 
	UserLockedException.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

--- NEW FILE: PasswordHistoryException.java ---
package org.apache.fulcrum.security.util;

/**
 * Thrown upon an attempt to change password to one that exists in the password
 * history
 * 
 * @author richard.brooks
 * Created on Jan 13, 2006
 */
public class PasswordHistoryException extends TurbineSecurityException {

	/**
     * Construct a PasswordHistoryException with specified detail message.
     * @param msg The detail message.
     *
     * @author richard.brooks
     * Created on Jan 13, 2006
     */
	public PasswordHistoryException(String msg)
    {
        super(msg);
    }

}

--- NEW FILE: PasswordExpiredException.java ---
package org.apache.fulcrum.security.util;

/**
 * Thrown when a user's password has expired.
 * 
 * @author richard.brooks
 * Created on Jan 13, 2006
 */

public class PasswordExpiredException extends TurbineSecurityException {
	/**
     * Construct a PasswordExpiredException with specified detail message.
     * @param msg The detail message.
     *
     * @author richard.brooks
     * Created on Jan 13, 2006
     */
	public PasswordExpiredException(String msg)
    {
        super(msg);
    }

}

--- NEW FILE: UserLockedException.java ---
package org.apache.fulcrum.security.util;

/**
 * Thrown when a locked user attempts to authenticate.
 * 
 * @author richard.brooks
 * Created on Jan 13, 2006
 */

public class UserLockedException extends TurbineSecurityException {

	/**
     * Construct a UserLockedException with specified detail message.
     * @param msg The detail message.
     *
     * @author richard.brooks
     * Created on Jan 13, 2006
     */
	public UserLockedException(String msg)
    {
        super(msg);
    }
}



From nobody at sheep.berlios.de  Tue Jan 17 10:17:26 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:26 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator CryptoAuthenticator.java,1.1,1.2 TextMatchAuthenticator.java,1.1,1.2 Authenticator.java,1.1,1.2 NoOpAuthenticator.java,1.1,1.2
Message-ID: <200601170917.k0H9HQx27890@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/authenticator

Modified Files:
	CryptoAuthenticator.java TextMatchAuthenticator.java 
	Authenticator.java NoOpAuthenticator.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: CryptoAuthenticator.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator/CryptoAuthenticator.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** CryptoAuthenticator.java	14 Nov 2005 18:20:49 -0000	1.1
--- CryptoAuthenticator.java	17 Jan 2006 09:17:24 -0000	1.2
***************
*** 53,81 ****
      {
   
!         try
!         {
              CryptoAlgorithm ca = cryptoService.getCryptoAlgorithm(algorithm);
              ca.setCipher(cipher);
!             String output = ca.encrypt(password);
              return output.equals(user.getPassword());
!         }
!         catch (NoSuchAlgorithmException e)
!         {
              throw new DataBackendException(e.getMessage(), e);
          }
!         catch (Exception ex)
!         {
              throw new DataBackendException(ex.getMessage(), ex);
!         }
      }
      public String getAlgorithm() {
          return algorithm;
      }
      public void setAlgorithm(String algorithm) {
          this.algorithm = algorithm;
      }
      public String getCipher() {
          return cipher;
      }
      public void setCipher(String cipher) {
          this.cipher = cipher;
--- 53,83 ----
      {
   
!         /*try {
              CryptoAlgorithm ca = cryptoService.getCryptoAlgorithm(algorithm);
              ca.setCipher(cipher);
!             String output = ca.encrypt(password);*/
!         	String output = getCryptoPassword(password);
              return output.equals(user.getPassword());
!         /*}
!         catch (NoSuchAlgorithmException e) {
              throw new DataBackendException(e.getMessage(), e);
          }
!         catch (Exception ex) {
              throw new DataBackendException(ex.getMessage(), ex);
!         }*/
      }
+     
      public String getAlgorithm() {
          return algorithm;
      }
+     
      public void setAlgorithm(String algorithm) {
          this.algorithm = algorithm;
      }
+     
      public String getCipher() {
          return cipher;
      }
+     
      public void setCipher(String cipher) {
          this.cipher = cipher;
***************
*** 86,89 ****
      }
      
! 
  }
--- 88,101 ----
      }
      
! 	public String getCryptoPassword(String password) throws DataBackendException {
! 		try {
! 			CryptoAlgorithm ca = cryptoService.getCryptoAlgorithm(algorithm);
! 	        ca.setCipher(cipher);
! 	        return ca.encrypt(password);
! 		} catch (NoSuchAlgorithmException e) {
!             throw new DataBackendException(e.getMessage(), e);
! 		} catch (Exception e) {
!             throw new DataBackendException(e.getMessage(), e);
! 		}
! 	}
  }

Index: TextMatchAuthenticator.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator/TextMatchAuthenticator.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** TextMatchAuthenticator.java	14 Nov 2005 18:20:49 -0000	1.1
--- TextMatchAuthenticator.java	17 Jan 2006 09:17:24 -0000	1.2
***************
*** 51,53 ****
--- 51,57 ----
          return referenced.equals(tested);
      }
+ 
+ 	public String getCryptoPassword(String password) throws DataBackendException {
+ 		return password;
+ 	}
  }

Index: Authenticator.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator/Authenticator.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** Authenticator.java	14 Nov 2005 18:20:49 -0000	1.1
--- Authenticator.java	17 Jan 2006 09:17:24 -0000	1.2
***************
*** 30,32 ****
--- 30,35 ----
      public boolean authenticate(User user, String password)
          throws  DataBackendException;
+     
+     public String getCryptoPassword(String password)
+     	throws DataBackendException;
  }

Index: NoOpAuthenticator.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator/NoOpAuthenticator.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** NoOpAuthenticator.java	14 Nov 2005 18:20:49 -0000	1.1
--- NoOpAuthenticator.java	17 Jan 2006 09:17:24 -0000	1.2
***************
*** 45,47 ****
--- 45,51 ----
          return true;
      }
+ 
+ 	public String getCryptoPassword(String password) throws DataBackendException {
+ 		return password;
+ 	}
  }



From nobody at sheep.berlios.de  Tue Jan 17 10:17:28 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:28 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test AbstractUserManagerTest.java,1.2,1.3
Message-ID: <200601170917.k0H9HSx27910@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/model/test

Modified Files:
	AbstractUserManagerTest.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: AbstractUserManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test/AbstractUserManagerTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** AbstractUserManagerTest.java	15 Nov 2005 17:56:25 -0000	1.2
--- AbstractUserManagerTest.java	17 Jan 2006 09:17:26 -0000	1.3
***************
*** 17,220 ****
   */
  
  import org.apache.fulcrum.security.AbstractSecurityServiceTest;
  import org.apache.fulcrum.security.acl.AccessControlList;
  import org.apache.fulcrum.security.entity.User;
  import org.apache.fulcrum.security.util.EntityExistsException;
  import org.apache.fulcrum.security.util.PasswordMismatchException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  import org.apache.fulcrum.security.util.UserSet;
  
  /**
   * @author Eric Pugh
!  *
   * To change the template for this generated type comment go to
   * Window>Preferences>Java>Code Generation>Code and Comments
   */
! public abstract class AbstractUserManagerTest extends AbstractSecurityServiceTest {
  
!     public void testCheckExists() throws Exception {
!         User user = getUserManager().getUserInstance("Philipa");
!         getUserManager().addUser(user, "bobo");
!         assertTrue(getUserManager().checkExists("philipa"));
!         assertTrue(getUserManager().checkExists(user));
!         assertFalse(getUserManager().checkExists("ImaginaryFriend"));
!         user = getUserManager().getUserInstance("ImaginaryFriend");
!         assertFalse(getUserManager().checkExists(user));
!     }
  
!     public void testCheckExistsWithString() throws Exception {
!         User user = getUserManager().getUserInstance("Philip2");
!         getUserManager().addUser(user, "bobo");
!         assertTrue(getUserManager().checkExists("philip2"));
!         assertTrue(getUserManager().checkExists(user.getName()));
!         assertFalse(getUserManager().checkExists("ImaginaryFriend2"));
!         user = getUserManager().getUserInstance("ImaginaryFriend2");
!         assertFalse(getUserManager().checkExists(user.getName()));
!     }
  
!     /*
!      * Class to test for User retrieve(String)
!      */
!     public void testGetUserString() throws Exception {
!         User user = getUserManager().getUserInstance("QuietMike");
!         getUserManager().addUser(user, "bobo");
!         user = getUserManager().getUser("QuietMike");
!         assertNotNull(user);
!     }
  
!     public void testGetUserById() throws Exception {
!         User user = getUserManager().getUserInstance("QuietMike2");
!         getUserManager().addUser(user, "bobo");
!         User user2 = getUserManager().getUserById(user.getId());
!         assertEquals(user.getName(), user2.getName());
!         assertEquals(user.getId(), user2.getId());
!     }
  
!     /*
!      * Class to test for User retrieve(String, String)
!      */
!     public void testGetUserStringString() throws Exception {
!         User user = getUserManager().getUserInstance("Richard");
!         getUserManager().addUser(user, "va");
!         user = getUserManager().getUser("Richard", "va");
!         assertNotNull(user);
!         user = getUserManager().getUser("richard", "va");
!         assertNotNull(user);
!         try {
!             user = getUserManager().getUser("richard", "VA");
!             fail("should have thrown PasswordMismatchException");
!         } catch (PasswordMismatchException pme) {
!             //good
!         }
!     }
  
!     public void testGetAllUsers() throws Exception {
!         int size = getUserManager().getAllUsers().size();
!         User user = getUserManager().getUserInstance("Bob");
!         getUserManager().addUser(user, "");
!         UserSet userSet = getUserManager().getAllUsers();
!         assertEquals(size + 1, userSet.size());
!     }
  
!     public void testAuthenticate() throws Exception {
!         User user = getUserManager().getUserInstance("Kay");
!         getUserManager().addUser(user, "jc");
!         getUserManager().authenticate(user, "jc");
!         try {
!             getUserManager().authenticate(user, "JC");
!             fail("should have thrown PasswordMismatchException");
!         } catch (PasswordMismatchException pme) {
!             //good
!         }
!     }
  
!     public void testChangePassword() throws Exception {
!         User user = getUserManager().getUserInstance("Jonathan");
!         getUserManager().addUser(user, "jc");
!         try {
!             getUserManager().changePassword(user, "WrongPWD", "JC");
!             fail("should have thrown PasswordMismatchException");
!         } catch (PasswordMismatchException pme) {
!             //good
!         }
!         getUserManager().changePassword(user, "jc", "JC");
!         getUserManager().authenticate(user, "JC");
!     }
  
!     public void testForcePassword() throws Exception {
!         User user = getUserManager().getUserInstance("Connor");
!         getUserManager().addUser(user, "jc_subset");
!         getUserManager().forcePassword(user, "JC_SUBSET");
!         getUserManager().authenticate(user, "JC_SUBSET");
!     }
  
!     /*
!      * Class to test for User getUserInstance()
!      */
!     public void testGetUserInstance() throws Exception {
!         User user = getUserManager().getUserInstance();
!         assertNotNull(user);
!         assertTrue(user.getName() == null);
!     }
  
!     /*
!      * Class to test for User getUserInstance(String)
!      */
!     public void testGetUserInstanceString() throws Exception {
!         User user = getUserManager().getUserInstance("Philip");
!         assertEquals("philip", user.getName());
!     }
  
!     /**
!      * Need to figure out if save is something we want..
!      * right now it just bloes up if you actually cahnge anything.
!      * @todo figur out what to do here...
!      * @throws Exception
!      */
!     public void testSaveUser() throws Exception {
!         User user = getUserManager().getUserInstance("Kate");
!         getUserManager().addUser(user, "katiedid");
!         user = getUserManager().getUser(user.getName());
!         // user.setName("Katherine");
!         getUserManager().saveUser(user);
!         assertEquals("kate", getUserManager().getUser(user.getName()).getName());
!     }
  
!     public void testGetACL() throws Exception {
!         User user = getUserManager().getUserInstance("Tony");
!         getUserManager().addUser(user, "california");
!         AccessControlList acl = getUserManager().getACL(user);
!         assertNotNull(acl);
!     }
  
!     public void testRemoveUser() throws Exception {
!         User user = getUserManager().getUserInstance("Rick");
!         getUserManager().addUser(user, "nb");
!         getUserManager().removeUser(user);
!         try {
!             User user2 = getUserManager().getUser(user.getName());
!             fail("Should have thrown UEE");
!         } catch (UnknownEntityException uee) {
!             //good
!         }
!     }
  
!     public void testAddUser() throws Exception {
!         User user = getUserManager().getUserInstance("Joe1");
!         assertNull(user.getId());
!         getUserManager().addUser(user, "mc");
!         user = getUserManager().getUserInstance("Joe2");
!         assertNull(user.getId());
!         getUserManager().addUser(user, "mc");
!         assertNotNull(user.getId());
!         assertNotNull(getUserManager().getUser(user.getName()));
!     }
  
!     /*
!      * Class to test for boolean checkExists(string)
!      */
!     public void testAddUserTwiceFails() throws Exception {
!         User user = getUserManager().getUserInstance("EATLUNCH");
!         getUserManager().addUser(user, "bob");
!         assertTrue(getUserManager().checkExists(user.getName()));
!         User user2 = getUserManager().getUserInstance("EATLUNCH");
!         try {
!             getUserManager().addUser(user2, "bob");
!         } catch (EntityExistsException uee) {
!             //good
!         }
!         try {
!             getUserManager().addUser(user2, "differentpassword");
!         } catch (EntityExistsException uee) {
!             //good
!         }
!     }
  
!     public void testCheckUserCaseSensitiveExists() throws Exception {
!         User user = getUserManager().getUserInstance("borrisJohnson");
!         getUserManager().addUser(user, "bob");
  
!         assertTrue(getUserManager().checkExists("borrisJohnson"));
!     }
  
  }
--- 17,284 ----
   */
  
+ import java.util.GregorianCalendar;
+ import java.util.List;
+ 
  import org.apache.fulcrum.security.AbstractSecurityServiceTest;
  import org.apache.fulcrum.security.acl.AccessControlList;
  import org.apache.fulcrum.security.entity.User;
  import org.apache.fulcrum.security.util.EntityExistsException;
+ import org.apache.fulcrum.security.util.PasswordExpiredException;
+ import org.apache.fulcrum.security.util.PasswordHistoryException;
  import org.apache.fulcrum.security.util.PasswordMismatchException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
+ import org.apache.fulcrum.security.util.UserLockedException;
  import org.apache.fulcrum.security.util.UserSet;
  
  /**
   * @author Eric Pugh
!  * 
   * To change the template for this generated type comment go to
   * Window>Preferences>Java>Code Generation>Code and Comments
   */
! public abstract class AbstractUserManagerTest extends
! 		AbstractSecurityServiceTest {
  
! 	public void testCheckExists() throws Exception {
! 		User user = getUserManager().getUserInstance("Philipa");
! 		getUserManager().addUser(user, "bobo");
! 		assertTrue(getUserManager().checkExists("philipa"));
! 		assertTrue(getUserManager().checkExists(user));
! 		assertFalse(getUserManager().checkExists("ImaginaryFriend"));
! 		user = getUserManager().getUserInstance("ImaginaryFriend");
! 		assertFalse(getUserManager().checkExists(user));
! 	}
  
! 	public void testCheckExistsWithString() throws Exception {
! 		User user = getUserManager().getUserInstance("Philip2");
! 		getUserManager().addUser(user, "bobo");
! 		assertTrue(getUserManager().checkExists("philip2"));
! 		assertTrue(getUserManager().checkExists(user.getName()));
! 		assertFalse(getUserManager().checkExists("ImaginaryFriend2"));
! 		user = getUserManager().getUserInstance("ImaginaryFriend2");
! 		assertFalse(getUserManager().checkExists(user.getName()));
! 	}
  
! 	/*
! 	 * Class to test for User retrieve(String)
! 	 */
! 	public void testGetUserString() throws Exception {
! 		User user = getUserManager().getUserInstance("QuietMike");
! 		getUserManager().addUser(user, "bobo");
! 		user = getUserManager().getUser("QuietMike");
! 		assertNotNull(user);
! 	}
  
! 	public void testGetUserById() throws Exception {
! 		User user = getUserManager().getUserInstance("QuietMike2");
! 		getUserManager().addUser(user, "bobo");
! 		User user2 = getUserManager().getUserById(user.getId());
! 		assertEquals(user.getName(), user2.getName());
! 		assertEquals(user.getId(), user2.getId());
! 	}
  
! 	/*
! 	 * Class to test for User retrieve(String, String)
! 	 */
! 	public void testGetUserStringString() throws Exception {
! 		User user = getUserManager().getUserInstance("Richard");
! 		getUserManager().addUser(user, "va");
! 		user = getUserManager().getUser("Richard", "va");
! 		assertNotNull(user);
! 		user = getUserManager().getUser("richard", "va");
! 		assertNotNull(user);
! 		try {
! 			user = getUserManager().getUser("richard", "VA");
! 			fail("should have thrown PasswordMismatchException");
! 		} catch (PasswordMismatchException pme) {
! 			// good
! 		}
! 	}
  
! 	public void testGetAllUsers() throws Exception {
! 		int size = getUserManager().getAllUsers().size();
! 		User user = getUserManager().getUserInstance("Bob");
! 		getUserManager().addUser(user, "");
! 		UserSet userSet = getUserManager().getAllUsers();
! 		assertEquals(size + 1, userSet.size());
! 	}
  
! 	public void testAuthenticate() throws Exception {
! 		User user = getUserManager().getUserInstance("Kay");
! 		getUserManager().addUser(user, "jc");
! 		getUserManager().authenticate(user, "jc");
! 		try {
! 			getUserManager().authenticate(user, "JC");
! 			fail("should have thrown PasswordMismatchException");
! 		} catch (PasswordMismatchException pme) {
! 			// good - first permitted attempt
! 		}
! 		
! 		try {
! 			getUserManager().authenticate(user, "JC");
! 			fail("should have thrown PasswordMismatchException");
! 		} catch (PasswordMismatchException pme) {
! 			// good - second permitted attempt
! 		}
  
! 		try {
! 			getUserManager().authenticate(user, "JC");
! 			fail("should have thrown PasswordMismatchException");
! 		} catch (PasswordMismatchException pme) {
! 			// good - third permitted attempt
! 		}
  
! 		try {
! 			getUserManager().authenticate(user, "jc");
! 			fail("Should have thrown UserLockedException");
! 		} catch (UserLockedException ule) {
! 			//good - user is now locked
! 		}
! 		
! 		// Simulate enough time passing since user was locked
! 		GregorianCalendar gc = new GregorianCalendar(1974, 4, 25);
! 		user.setLockedDate(gc.getTime());
! 		getUserManager().authenticate(user, "jc");
! 		
! 		// Simulate password expiry
! 		user.setPasswordExpiryDate(gc.getTime());
! 		try {
! 			getUserManager().authenticate(user, "jc");
! 			fail("Should have thrown PasswordExpiredException");
! 		} catch (PasswordExpiredException ule) {
! 			//good
! 		}
! 	}
  
! 	public void testChangePassword() throws Exception {
! 		User user = getUserManager().getUserInstance("Jonathan");
! 		getUserManager().addUser(user, "one");
! 		try {
! 			getUserManager().changePassword(user, "WrongPWD", "two");
! 			fail("should have thrown PasswordMismatchException");
! 		} catch (PasswordMismatchException pme) {
! 			// good
! 		}
! 		getUserManager().changePassword(user, "one", "six");
! 		getUserManager().authenticate(user, "six");
! 		try {
! 			getUserManager().changePassword(user, "six", "one");
! 			fail("Should have thrown PasswordHistoryException");
! 		} catch (PasswordHistoryException phe) {
! 			// good
! 		}
  
! 		List passwordHistory = user.getPasswordHistory();
! 		passwordHistory.add("two");
! 		passwordHistory.add("three");
! 		passwordHistory.add("four");
! 		passwordHistory.add("five");
! 		try {
! 			getUserManager().changePassword(user, "six", "one");
! 			fail("Should have thrown PasswordHistoryException");
! 		} catch (PasswordHistoryException phe) {
! 			// good
! 		}
! 		getUserManager().changePassword(user, "six", "seven");
! 		getUserManager().changePassword(user, "seven", "one");
! 		getUserManager().authenticate(user, "one");		
! 	}
  
! 	public void testForcePassword() throws Exception {
! 		User user = getUserManager().getUserInstance("Connor");
! 		getUserManager().addUser(user, "jc_subset");
! 		getUserManager().forcePassword(user, "JC_SUBSET");
! 		getUserManager().authenticate(user, "JC_SUBSET");
! 	}
  
! 	/*
! 	 * Class to test for User getUserInstance()
! 	 */
! 	public void testGetUserInstance() throws Exception {
! 		User user = getUserManager().getUserInstance();
! 		assertNotNull(user);
! 		assertTrue(user.getName() == null);
! 	}
  
! 	/*
! 	 * Class to test for User getUserInstance(String)
! 	 */
! 	public void testGetUserInstanceString() throws Exception {
! 		User user = getUserManager().getUserInstance("Philip");
! 		assertEquals("philip", user.getName());
! 	}
  
! 	/**
! 	 * Need to figure out if save is something we want.. right now it just bloes
! 	 * up if you actually cahnge anything.
! 	 * 
! 	 * @todo figur out what to do here...
! 	 * @throws Exception
! 	 */
! 	public void testSaveUser() throws Exception {
! 		User user = getUserManager().getUserInstance("Kate");
! 		getUserManager().addUser(user, "katiedid");
! 		user = getUserManager().getUser(user.getName());
! 		// user.setName("Katherine");
! 		getUserManager().saveUser(user);
! 		assertEquals("kate", getUserManager().getUser(user.getName()).getName());
! 	}
  
! 	public void testGetACL() throws Exception {
! 		User user = getUserManager().getUserInstance("Tony");
! 		getUserManager().addUser(user, "california");
! 		AccessControlList acl = getUserManager().getACL(user);
! 		assertNotNull(acl);
! 	}
  
! 	public void testRemoveUser() throws Exception {
! 		User user = getUserManager().getUserInstance("Rick");
! 		getUserManager().addUser(user, "nb");
! 		getUserManager().removeUser(user);
! 		try {
! 			User user2 = getUserManager().getUser(user.getName());
! 			fail("Should have thrown UEE");
! 		} catch (UnknownEntityException uee) {
! 			// good
! 		}
! 	}
  
! 	public void testAddUser() throws Exception {
! 		User user = getUserManager().getUserInstance("Joe1");
! 		assertNull(user.getId());
! 		getUserManager().addUser(user, "mc");
! 		user = getUserManager().getUserInstance("Joe2");
! 		assertNull(user.getId());
! 		getUserManager().addUser(user, "mc");
! 		assertNotNull(user.getId());
! 		assertNotNull(getUserManager().getUser(user.getName()));
! 	}
! 
! 	/*
! 	 * Class to test for boolean checkExists(string)
! 	 */
! 	public void testAddUserTwiceFails() throws Exception {
! 		User user = getUserManager().getUserInstance("EATLUNCH");
! 		getUserManager().addUser(user, "bob");
! 		assertTrue(getUserManager().checkExists(user.getName()));
! 		User user2 = getUserManager().getUserInstance("EATLUNCH");
! 		try {
! 			getUserManager().addUser(user2, "bob");
! 		} catch (EntityExistsException uee) {
! 			// good
! 		}
! 		try {
! 			getUserManager().addUser(user2, "differentpassword");
! 		} catch (EntityExistsException uee) {
! 			// good
! 		}
! 	}
! 
! 	public void testCheckUserCaseSensitiveExists() throws Exception {
! 		User user = getUserManager().getUserInstance("borrisJohnson");
! 		getUserManager().addUser(user, "bob");
! 
! 		assertTrue(getUserManager().checkExists("borrisJohnson"));
! 	}
  
  }



From nobody at sheep.berlios.de  Tue Jan 17 10:17:55 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:55 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/test/java/org/apache/fulcrum/security/authenticator NoOpAuthenticatorTest.java,1.2,1.3 CryptoAuthenticatorTest.java,1.2,1.3 TextMatchAuthenticatorTest.java,1.2,1.3
Message-ID: <200601170917.k0H9Htx27943@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/test/java/org/apache/fulcrum/security/authenticator
In directory sheep:/tmp/cvs-serv30075/src/test/java/org/apache/fulcrum/security/authenticator

Modified Files:
	NoOpAuthenticatorTest.java CryptoAuthenticatorTest.java 
	TextMatchAuthenticatorTest.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: NoOpAuthenticatorTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/test/java/org/apache/fulcrum/security/authenticator/NoOpAuthenticatorTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** NoOpAuthenticatorTest.java	15 Nov 2005 13:17:58 -0000	1.2
--- NoOpAuthenticatorTest.java	17 Jan 2006 09:17:23 -0000	1.3
***************
*** 29,41 ****
  public class NoOpAuthenticatorTest extends TestCase
  {
!     public void testAuthenticate() throws Exception
!     {
!     	User user = new DynamicUser();
!     	user.setName("Bob");
!     	user.setPassword("myPassword");
!     	Authenticator authenticator = (Authenticator) RegistryManager.getInstance().getRegistry().getService("fulcrum.security.authenticatorNoop", Authenticator.class);
! 		assertTrue(authenticator.authenticate(user,"myPassword"));
! 		assertTrue(authenticator.authenticate(user,"mypassword"));
! 		assertTrue(authenticator.authenticate(null,null));
      }
  }
--- 29,60 ----
  public class NoOpAuthenticatorTest extends TestCase
  {
!     private static final String password = "myPassword";
! 
!     private Authenticator authenticator;
! 	private User user;
! 	
!     /**
!     	* Constructor for CryptoAuthenticatorTest.
!     	* @param arg0
!     	*/
!     public NoOpAuthenticatorTest(String arg0) {
!         super(arg0);
!     }
!     
!     public void setUp() {
!         user = new DynamicUser();
!         user.setName("Bob");
!         user.setPassword(password);
!     	authenticator = (Authenticator) RegistryManager.getInstance().getRegistry().getService("fulcrum.security.authenticatorNoop", Authenticator.class);
!     }
!     
!     public void testAuthenticate() throws Exception {
! 		assertTrue(authenticator.authenticate(user, password));
! 		assertTrue(authenticator.authenticate(user, password));
! 		assertTrue(authenticator.authenticate(null, null));
!     }
!     
!     public void testGetCryptoPassword() throws Exception {
!     	assertEquals(authenticator.getCryptoPassword(password), password);
      }
  }

Index: CryptoAuthenticatorTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/test/java/org/apache/fulcrum/security/authenticator/CryptoAuthenticatorTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** CryptoAuthenticatorTest.java	15 Nov 2005 09:30:28 -0000	1.2
--- CryptoAuthenticatorTest.java	17 Jan 2006 09:17:23 -0000	1.3
***************
*** 29,55 ****
  public class CryptoAuthenticatorTest extends TestCase
  {
-     
      private static final String preDefinedInput = "Oeltanks";
      private static final String preDefinedResult = "uVDiJHaavRYX8oWt5ctkaa7j1cw=";
      /**
      	* Constructor for CryptoAuthenticatorTest.
      	* @param arg0
      	*/
!     public CryptoAuthenticatorTest(String arg0)
!     {
          super(arg0);
      }
!     public void setUp()
!     {
!         
!     }
!     public void testAuthenticate() throws Exception
!     {
!         User user = new DynamicUser();
          user.setName("Bob");
          user.setPassword(preDefinedResult);
!         Authenticator authenticator = (Authenticator)RegistryManager.getInstance().getRegistry().getService("fulcrum.security.authenticatorCrypto", Authenticator.class);
          assertTrue(authenticator.authenticate(user, preDefinedInput));
          assertFalse(authenticator.authenticate(user, "mypassword"));
      }
  }
--- 29,59 ----
  public class CryptoAuthenticatorTest extends TestCase
  {
      private static final String preDefinedInput = "Oeltanks";
      private static final String preDefinedResult = "uVDiJHaavRYX8oWt5ctkaa7j1cw=";
+     
+ 	private Authenticator authenticator;
+ 	private User user;
      /**
      	* Constructor for CryptoAuthenticatorTest.
      	* @param arg0
      	*/
!     public CryptoAuthenticatorTest(String arg0) {
          super(arg0);
      }
!     
!     public void setUp() {
!         user = new DynamicUser();
          user.setName("Bob");
          user.setPassword(preDefinedResult);
!         authenticator = (Authenticator)RegistryManager.getInstance().getRegistry().getService("fulcrum.security.authenticatorCrypto", Authenticator.class);        
!     }
!     
!     public void testAuthenticate() throws Exception {
          assertTrue(authenticator.authenticate(user, preDefinedInput));
          assertFalse(authenticator.authenticate(user, "mypassword"));
+     }
+     
+     public void testGetCryptoPassword() throws Exception {
+     	assertEquals(authenticator.getCryptoPassword(preDefinedInput), preDefinedResult);
      }
  }

Index: TextMatchAuthenticatorTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/test/java/org/apache/fulcrum/security/authenticator/TextMatchAuthenticatorTest.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** TextMatchAuthenticatorTest.java	15 Nov 2005 13:17:58 -0000	1.2
--- TextMatchAuthenticatorTest.java	17 Jan 2006 09:17:23 -0000	1.3
***************
*** 30,33 ****
--- 30,53 ----
  public class TextMatchAuthenticatorTest extends TestCase
  {
+     private static final String password = "myPassword";
+ 
+     private Authenticator authenticator;
+ 	private User user;
+ 	
+     /**
+     	* Constructor for CryptoAuthenticatorTest.
+     	* @param arg0
+     	*/
+     public TextMatchAuthenticatorTest(String arg0) {
+         super(arg0);
+     }
+     
+     public void setUp() {
+         user = new DynamicUser();
+         user.setName("Bob");
+         user.setPassword(password);
+     	authenticator = (Authenticator) RegistryManager.getInstance().getRegistry().getService("fulcrum.security.authenticatorTextMatch", Authenticator.class);;
+     }
+ 
      public void testAuthenticate() throws Exception
      {
***************
*** 35,41 ****
      	user.setName("Bob");
      	user.setPassword("myPassword");
-     	Authenticator authenticator = (Authenticator) RegistryManager.getInstance().getRegistry().getService("fulcrum.security.authenticatorTextMatch", Authenticator.class);;
  		assertTrue(authenticator.authenticate(user,"myPassword"));
  		assertFalse(authenticator.authenticate(user,"mypassword"));
      }
  }
--- 55,64 ----
      	user.setName("Bob");
      	user.setPassword("myPassword");
  		assertTrue(authenticator.authenticate(user,"myPassword"));
  		assertFalse(authenticator.authenticate(user,"mypassword"));
+     }
+ 
+     public void testGetCryptoPassword() throws Exception {
+     	assertEquals(authenticator.getCryptoPassword(password), password);
      }
  }



From nobody at sheep.berlios.de  Tue Jan 17 10:17:56 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 10:17:56 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity User.java,1.1,1.2
Message-ID: <200601170917.k0H9Hux27946@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity
In directory sheep:/tmp/cvs-serv30075/src/main/java/org/apache/fulcrum/security/entity

Modified Files:
	User.java 
Log Message:
1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: User.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity/User.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** User.java	14 Nov 2005 18:20:46 -0000	1.1
--- User.java	17 Jan 2006 09:17:23 -0000	1.2
***************
*** 17,20 ****
--- 17,22 ----
   */
  import java.io.Serializable;
+ import java.util.Date;
+ import java.util.List;
  /**
   * This interface represents the basic functionality of a user.
***************
*** 48,50 ****
--- 50,125 ----
      void setPassword(String password);
      
+     /**
+      * 
+      * @return The date on which the user's password expires.
+      *
+      * @author richard.brooks
+      * Created on Jan 12, 2006
+      */
+     Date getPasswordExpiryDate();
+     
+     /**
+      * 
+      * @param expiryDate The date the user's password is due to expire.
+      *
+      * @author richard.brooks
+      * Created on Jan 12, 2006
+      */
+     void setPasswordExpiryDate(Date expiryDate);
+     
+     /**
+      * 
+      * @return The date the user was locked
+      *
+      * @author richard.brooks
+      * Created on Jan 12, 2006
+      */
+     Date getLockedDate();
+     
+     /**
+      * 
+      * @param locked Date of locking.
+      *
+      * @author richard.brooks
+      * Created on Jan 12, 2006
+      */
+     void setLockedDate(Date locked);
+     
+     /**
+      * 
+      * @return A list of the user's most recent passwords.
+      *
+      * @author richard.brooks
+      * Created on Jan 12, 2006
+      */
+     List getPasswordHistory();
+     
+     /**
+      * 
+      * @param passwordHistory List of passwords.
+      *
+      * @author richard.brooks
+      * Created on Jan 12, 2006
+      */
+     void setPasswordHistory(List passwordHistory);
+     
+     /**
+      * Gets the number of sequential failed login attempts.
+      * 
+      * @return number of failed login attempts
+      *
+      * @author richard.brooks
+      * Created on Jan 16, 2006
+      */
+     int getLoginAttempts();
+     
+     /**
+      * Sets the number of failed login attempts.
+      * 
+      * @param loginAttempts number of failed login attempts.
+      *
+      * @author richard.brooks
+      * Created on Jan 16, 2006
+      */
+     void setLoginAttempts(int loginAttempts);
  }



From nobody at sheep.berlios.de  Tue Jan 17 12:42:17 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 12:42:17 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate pom.xml,1.5,1.6
Message-ID: <200601171142.k0HBgHx02667@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate
In directory sheep:/tmp/cvs-serv25619

Modified Files:
	pom.xml 
Log Message:
Incremented library versions

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/pom.xml,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** pom.xml	17 Jan 2006 09:17:19 -0000	1.5
--- pom.xml	17 Jan 2006 11:42:13 -0000	1.6
***************
*** 77,81 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.4</version>
          </dependency>
          <dependency>
--- 77,81 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.5</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Tue Jan 17 12:42:20 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 12:42:20 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.12,1.13
Message-ID: <200601171142.k0HBgKx02673@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv25731

Modified Files:
	pom.xml 
Log Message:
Incremented library versions

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.12
retrieving revision 1.13
diff -C2 -d -r1.12 -r1.13
*** pom.xml	4 Jan 2006 15:55:33 -0000	1.12
--- pom.xml	17 Jan 2006 11:42:18 -0000	1.13
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.2</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.3</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
***************
*** 117,121 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.7</version>
          </dependency>
          <dependency>
--- 117,121 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.8</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Tue Jan 17 16:43:13 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 16:43:13 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security UserManager.java,1.2,1.3
Message-ID: <200601171543.k0HFhDx14915@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security
In directory sheep:/tmp/cvs-serv5237/src/main/java/org/apache/fulcrum/security

Modified Files:
	UserManager.java 
Log Message:
Prevented changePassword method from throwing a PasswordExpired
exception (which was a bit stupid when you think about it)

Index: UserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/UserManager.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** UserManager.java	17 Jan 2006 09:17:25 -0000	1.2
--- UserManager.java	17 Jan 2006 15:43:10 -0000	1.3
***************
*** 165,169 ****
       */
      void authenticate(User user, String password)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException, UserLockedException, PasswordExpiredException;
      /**
       * Creates new user account with specified attributes.
--- 165,169 ----
       */
      void authenticate(User user, String password)
!         throws PasswordMismatchException, UnknownEntityException, DataBackendException, UserLockedException;
      /**
       * Creates new user account with specified attributes.
***************
*** 202,206 ****
      void changePassword(User user, String oldPassword, String newPassword)
          throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, PasswordHistoryException, UserLockedException, PasswordExpiredException;
      /**
       * Forcibly sets new password for an User.
--- 202,206 ----
      void changePassword(User user, String oldPassword, String newPassword)
          throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, PasswordHistoryException, UserLockedException;
      /**
       * Forcibly sets new password for an User.



From nobody at sheep.berlios.de  Tue Jan 17 16:43:13 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 16:43:13 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test AbstractUserManagerTest.java,1.3,1.4
Message-ID: <200601171543.k0HFhDx14918@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test
In directory sheep:/tmp/cvs-serv5237/src/main/java/org/apache/fulcrum/security/model/test

Modified Files:
	AbstractUserManagerTest.java 
Log Message:
Prevented changePassword method from throwing a PasswordExpired
exception (which was a bit stupid when you think about it)

Index: AbstractUserManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test/AbstractUserManagerTest.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** AbstractUserManagerTest.java	17 Jan 2006 09:17:26 -0000	1.3
--- AbstractUserManagerTest.java	17 Jan 2006 15:43:11 -0000	1.4
***************
*** 94,97 ****
--- 94,108 ----
  			// good
  		}
+ 
+ 		// Simulate password expiry
+ 		GregorianCalendar gc = new GregorianCalendar(1974, 4, 25);
+ 		user.setLockedDate(gc.getTime());
+ 		user.setPasswordExpiryDate(gc.getTime());
+ 		try {
+ 			getUserManager().getUser("richard", "va");
+ 			fail("Should have thrown PasswordExpiredException");
+ 		} catch (PasswordExpiredException ule) {
+ 			//good
+ 		}
  	}
  
***************
*** 140,152 ****
  		user.setLockedDate(gc.getTime());
  		getUserManager().authenticate(user, "jc");
- 		
- 		// Simulate password expiry
- 		user.setPasswordExpiryDate(gc.getTime());
- 		try {
- 			getUserManager().authenticate(user, "jc");
- 			fail("Should have thrown PasswordExpiredException");
- 		} catch (PasswordExpiredException ule) {
- 			//good
- 		}
  	}
  
--- 151,154 ----



From nobody at sheep.berlios.de  Tue Jan 17 16:43:13 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 17 Jan 2006 16:43:13 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi AbstractUserManager.java,1.4,1.5
Message-ID: <200601171543.k0HFhDx14922@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi
In directory sheep:/tmp/cvs-serv5237/src/main/java/org/apache/fulcrum/security/spi

Modified Files:
	AbstractUserManager.java 
Log Message:
Prevented changePassword method from throwing a PasswordExpired
exception (which was a bit stupid when you think about it)

Index: AbstractUserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi/AbstractUserManager.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** AbstractUserManager.java	17 Jan 2006 09:17:25 -0000	1.4
--- AbstractUserManager.java	17 Jan 2006 15:43:11 -0000	1.5
***************
*** 110,113 ****
--- 110,118 ----
  			UserLockedException, DataBackendException, PasswordExpiredException {
  		User user = getUser(userName);
+ 		
+ 		if (user.getPasswordExpiryDate().compareTo(new Date()) <= 0) {
+ 			throw new PasswordExpiredException("Password expired on "+user.getPasswordExpiryDate());
+ 		}
+ 		
  		authenticate(user, password);
  		return user;
***************
*** 162,171 ****
  	 * @exception DataBackendException
  	 *                if there is a problem accessing the storage.
- 	 * @throws PasswordExpiredException
- 	 * 				  is the user's password has expired
  	 */
  	public void authenticate(User user, String password)
  			throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, UserLockedException, PasswordExpiredException {
  
  		if (user.getLockedDate() != null) {
--- 167,174 ----
  	 * @exception DataBackendException
  	 *                if there is a problem accessing the storage.
  	 */
  	public void authenticate(User user, String password)
  			throws PasswordMismatchException, UnknownEntityException,
! 			DataBackendException, UserLockedException {
  
  		if (user.getLockedDate() != null) {
***************
*** 177,187 ****
  		}
  		
- 		if (user.getPasswordExpiryDate().compareTo(new Date()) <= 0) {
- 			throw new PasswordExpiredException("Password expired on "+user.getPasswordExpiryDate());
- 		}
- 		
  		if (!authenticator.authenticate(user, password)) {
  			user.setLoginAttempts(user.getLoginAttempts()+1);
- 			System.out.println(user.getLoginAttempts()+" max="+maxLoginAttempts+" lockTime= "+lockReset);
  			if (user.getLoginAttempts() == maxLoginAttempts) {
  				user.setLockedDate(new Date());
--- 180,185 ----
***************
*** 210,223 ****
  	 * @exception DataBackendException
  	 *                if there is a problem accessing the storage.
- 	 * @throws PasswordExpiredException 
  	 */
  	public void changePassword(User user, String oldPassword, String newPassword)
! 			throws PasswordMismatchException, PasswordHistoryException,
! 			UserLockedException, UnknownEntityException, DataBackendException, PasswordExpiredException {
  		if (!checkExists(user)) {
  			throw new UnknownEntityException("The account '" + user.getName()
  					+ "' does not exist");
  		}
- 
  		authenticate(user, oldPassword);
  		cyclePassword(user, newPassword);
--- 208,219 ----
  	 * @exception DataBackendException
  	 *                if there is a problem accessing the storage.
  	 */
  	public void changePassword(User user, String oldPassword, String newPassword)
! 			throws PasswordMismatchException, UserLockedException, 
! 			       UnknownEntityException, DataBackendException, PasswordHistoryException {
  		if (!checkExists(user)) {
  			throw new UnknownEntityException("The account '" + user.getName()
  					+ "' does not exist");
  		}
  		authenticate(user, oldPassword);
  		cyclePassword(user, newPassword);



From nobody at sheep.berlios.de  Wed Jan 18 09:38:59 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Wed, 18 Jan 2006 09:38:59 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi AbstractUserManager.java,1.5,1.6
Message-ID: <200601180838.k0I8cxx25036@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi
In directory sheep:/tmp/cvs-serv26388/src/main/java/org/apache/fulcrum/security/spi

Modified Files:
	AbstractUserManager.java 
Log Message:
Removed System output

Index: AbstractUserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi/AbstractUserManager.java,v
retrieving revision 1.5
retrieving revision 1.6
diff -C2 -d -r1.5 -r1.6
*** AbstractUserManager.java	17 Jan 2006 15:43:11 -0000	1.5
--- AbstractUserManager.java	18 Jan 2006 08:38:55 -0000	1.6
***************
*** 185,189 ****
  				user.setLockedDate(new Date());
  				user.setLoginAttempts(0);
- 				System.out.println("User locked");
  			}
  			throw new PasswordMismatchException("Can not authenticate user.");
--- 185,188 ----



From nobody at sheep.berlios.de  Thu Jan 19 12:29:20 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Thu, 19 Jan 2006 12:29:20 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model HibernateDynamicUser.java,1.2,1.3
Message-ID: <200601191129.k0JBTKx02796@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model
In directory sheep:/tmp/cvs-serv9014/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model

Modified Files:
	HibernateDynamicUser.java 
Log Message:
Corrected annotations

Index: HibernateDynamicUser.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model/HibernateDynamicUser.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** HibernateDynamicUser.java	17 Jan 2006 09:17:20 -0000	1.2
--- HibernateDynamicUser.java	19 Jan 2006 11:29:18 -0000	1.3
***************
*** 13,16 ****
--- 13,17 ----
  import javax.persistence.ManyToMany;
  import javax.persistence.Table;
+ import javax.persistence.TemporalType;
  
  import org.apache.fulcrum.security.model.dynamic.entity.DynamicUser;
***************
*** 61,65 ****
      
      @Override
!     @Type(type="java.util.Date")
      public Date getPasswordExpiryDate() {
      	return super.getPasswordExpiryDate();
--- 62,66 ----
      
      @Override
!     @Basic(temporalType = TemporalType.DATE)
      public Date getPasswordExpiryDate() {
      	return super.getPasswordExpiryDate();
***************
*** 67,71 ****
      
      @Override
!     @Type(type="java.util.Date")
      public Date getLockedDate() {
      	return super.getLockedDate();
--- 68,72 ----
      
      @Override
!     @Basic(temporalType = TemporalType.DATE)
      public Date getLockedDate() {
      	return super.getLockedDate();
***************
*** 73,77 ****
      
      @Override
!     @Type(type="int")
      public int getLoginAttempts() {
      	return super.getLoginAttempts();
--- 74,78 ----
      
      @Override
!     @Basic
      public int getLoginAttempts() {
      	return super.getLoginAttempts();



From nobody at sheep.berlios.de  Fri Jan 20 12:28:30 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Fri, 20 Jan 2006 12:28:30 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz pom.xml,1.2,1.3
Message-ID: <200601201128.k0KBSUx00468@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz
In directory sheep:/tmp/cvs-serv15923

Modified Files:
	pom.xml 
Log Message:
Quartz now uses tables in the quartz schema in postgres. 
Bumped version to 1.0.1

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/pom.xml,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** pom.xml	5 Jan 2006 11:42:32 -0000	1.2
--- pom.xml	20 Jan 2006 11:28:27 -0000	1.3
***************
*** 6,10 ****
      <artifactId>fulcrum-quartz</artifactId>
      <packaging>jar</packaging>
!     <version>1.0.0</version>
      <name>fulcrum-hivemind-quartz - Scheduler factory for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-quartz</artifactId>
      <packaging>jar</packaging>
!     <version>1.0.1</version>
      <name>fulcrum-hivemind-quartz - Scheduler factory for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>



From nobody at sheep.berlios.de  Fri Jan 20 12:28:29 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Fri, 20 Jan 2006 12:28:29 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables CreatePostgresTables.java,1.2,1.3
Message-ID: <200601201128.k0KBSTx00465@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables
In directory sheep:/tmp/cvs-serv15923/src/main/java/org/apache/fulcrum/quartz/tables

Modified Files:
	CreatePostgresTables.java 
Log Message:
Quartz now uses tables in the quartz schema in postgres. 
Bumped version to 1.0.1

Index: CreatePostgresTables.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables/CreatePostgresTables.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** CreatePostgresTables.java	4 Jan 2006 12:59:10 -0000	1.2
--- CreatePostgresTables.java	20 Jan 2006 11:28:27 -0000	1.3
***************
*** 27,31 ****
  	public void addCommands() {
  	addSql("DROP TABLE qrtz_locks;");
- 	addSql("CREATE TABLE qrtz_locks (LOCK_NAME  VARCHAR(40) NOT NULL, PRIMARY KEY (LOCK_NAME));");
  	addSql("drop table qrtz_job_listeners;");
  	addSql("drop table qrtz_trigger_listeners;");
--- 27,30 ----
***************
*** 39,53 ****
  	addSql("drop table qrtz_job_details;");
  	addSql("drop table qrtz_calendars;");
! 	addSql("CREATE TABLE qrtz_job_details (JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, DESCRIPTION VARCHAR(120) NULL, JOB_CLASS_NAME VARCHAR(128) NOT NULL, IS_DURABLE BOOL NOT NULL, IS_VOLATILE BOOL NOT NULL, IS_STATEFUL BOOL NOT NULL, REQUESTS_RECOVERY BOOL NOT NULL, JOB_DATA BYTEA NULL, PRIMARY KEY (JOB_NAME,JOB_GROUP));");
! 	addSql("CREATE TABLE qrtz_job_listeners ( JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, JOB_LISTENER VARCHAR(80) NOT NULL, PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER), FOREIGN KEY (JOB_NAME,JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP));");
! 	addSql("CREATE TABLE qrtz_triggers (TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, IS_VOLATILE BOOL NOT NULL, DESCRIPTION VARCHAR(120) NULL, NEXT_FIRE_TIME BIGINT NULL, PREV_FIRE_TIME BIGINT NULL, TRIGGER_STATE VARCHAR(16) NOT NULL, TRIGGER_TYPE VARCHAR(8) NOT NULL, START_TIME BIGINT NOT NULL, END_TIME BIGINT NULL, CALENDAR_NAME VARCHAR(80) NULL, MISFIRE_INSTR SMALLINT NULL, JOB_DATA BYTEA NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (JOB_NAME,JOB_GROUP)REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP));");
! 	addSql("CREATE TABLE qrtz_simple_triggers ( TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, REPEAT_COUNT BIGINT NOT NULL, REPEAT_INTERVAL BIGINT NOT NULL, TIMES_TRIGGERED BIGINT NOT NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
! 	addSql("CREATE TABLE qrtz_cron_triggers (TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, CRON_EXPRESSION VARCHAR(80) NOT NULL, TIME_ZONE_ID VARCHAR(80), PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
! 	addSql("CREATE TABLE qrtz_blob_triggers ( TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, BLOB_DATA BYTEA NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
! 	addSql("CREATE TABLE qrtz_trigger_listeners ( TRIGGER_NAME  VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, TRIGGER_LISTENER VARCHAR(80) NOT NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
! 	addSql("CREATE TABLE qrtz_calendars ( CALENDAR_NAME  VARCHAR(80) NOT NULL, CALENDAR BYTEA NOT NULL, PRIMARY KEY (CALENDAR_NAME));");
! 	addSql("CREATE TABLE qrtz_paused_trigger_grps (TRIGGER_GROUP  VARCHAR(80) NOT NULL, PRIMARY KEY (TRIGGER_GROUP));");
! 	addSql("CREATE TABLE qrtz_fired_triggers  ( ENTRY_ID VARCHAR(95) NOT NULL, TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, IS_VOLATILE BOOL NOT NULL, INSTANCE_NAME VARCHAR(80) NOT NULL, FIRED_TIME BIGINT NOT NULL, STATE VARCHAR(16) NOT NULL, JOB_NAME VARCHAR(80) NULL, JOB_GROUP VARCHAR(80) NULL, IS_STATEFUL BOOL NULL, REQUESTS_RECOVERY BOOL NULL, PRIMARY KEY (ENTRY_ID));");
! 	addSql("CREATE TABLE qrtz_scheduler_state ( INSTANCE_NAME VARCHAR(80) NOT NULL, LAST_CHECKIN_TIME BIGINT NOT NULL, CHECKIN_INTERVAL BIGINT NOT NULL, RECOVERER VARCHAR(80) NULL, PRIMARY KEY (INSTANCE_NAME));");
  	addSql("INSERT INTO qrtz_locks values('TRIGGER_ACCESS');");
  	addSql("INSERT INTO qrtz_locks values('JOB_ACCESS');");
--- 38,56 ----
  	addSql("drop table qrtz_job_details;");
  	addSql("drop table qrtz_calendars;");
! 	addSql("drop schema quartz;");
! 	addSql("create schema quartz;");
! 	addSql("set search_path to public, quartz;");
! 	addSql("CREATE TABLE quartz.qrtz_locks (LOCK_NAME  VARCHAR(40) NOT NULL, PRIMARY KEY (LOCK_NAME));");
! 	addSql("CREATE TABLE quartz.qrtz_job_details (JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, DESCRIPTION VARCHAR(120) NULL, JOB_CLASS_NAME VARCHAR(128) NOT NULL, IS_DURABLE BOOL NOT NULL, IS_VOLATILE BOOL NOT NULL, IS_STATEFUL BOOL NOT NULL, REQUESTS_RECOVERY BOOL NOT NULL, JOB_DATA BYTEA NULL, PRIMARY KEY (JOB_NAME,JOB_GROUP));");
! 	addSql("CREATE TABLE quartz.qrtz_job_listeners ( JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, JOB_LISTENER VARCHAR(80) NOT NULL, PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER), FOREIGN KEY (JOB_NAME,JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP));");
! 	addSql("CREATE TABLE quartz.qrtz_triggers (TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, JOB_NAME  VARCHAR(80) NOT NULL, JOB_GROUP VARCHAR(80) NOT NULL, IS_VOLATILE BOOL NOT NULL, DESCRIPTION VARCHAR(120) NULL, NEXT_FIRE_TIME BIGINT NULL, PREV_FIRE_TIME BIGINT NULL, TRIGGER_STATE VARCHAR(16) NOT NULL, TRIGGER_TYPE VARCHAR(8) NOT NULL, START_TIME BIGINT NOT NULL, END_TIME BIGINT NULL, CALENDAR_NAME VARCHAR(80) NULL, MISFIRE_INSTR SMALLINT NULL, JOB_DATA BYTEA NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (JOB_NAME,JOB_GROUP)REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP));");
! 	addSql("CREATE TABLE quartz.qrtz_simple_triggers ( TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, REPEAT_COUNT BIGINT NOT NULL, REPEAT_INTERVAL BIGINT NOT NULL, TIMES_TRIGGERED BIGINT NOT NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
! 	addSql("CREATE TABLE quartz.qrtz_cron_triggers (TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, CRON_EXPRESSION VARCHAR(80) NOT NULL, TIME_ZONE_ID VARCHAR(80), PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
! 	addSql("CREATE TABLE quartz.qrtz_blob_triggers ( TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, BLOB_DATA BYTEA NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
! 	addSql("CREATE TABLE quartz.qrtz_trigger_listeners ( TRIGGER_NAME  VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, TRIGGER_LISTENER VARCHAR(80) NOT NULL, PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER), FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP));");
! 	addSql("CREATE TABLE quartz.qrtz_calendars ( CALENDAR_NAME  VARCHAR(80) NOT NULL, CALENDAR BYTEA NOT NULL, PRIMARY KEY (CALENDAR_NAME));");
! 	addSql("CREATE TABLE quartz.qrtz_paused_trigger_grps (TRIGGER_GROUP  VARCHAR(80) NOT NULL, PRIMARY KEY (TRIGGER_GROUP));");
! 	addSql("CREATE TABLE quartz.qrtz_fired_triggers  ( ENTRY_ID VARCHAR(95) NOT NULL, TRIGGER_NAME VARCHAR(80) NOT NULL, TRIGGER_GROUP VARCHAR(80) NOT NULL, IS_VOLATILE BOOL NOT NULL, INSTANCE_NAME VARCHAR(80) NOT NULL, FIRED_TIME BIGINT NOT NULL, STATE VARCHAR(16) NOT NULL, JOB_NAME VARCHAR(80) NULL, JOB_GROUP VARCHAR(80) NULL, IS_STATEFUL BOOL NULL, REQUESTS_RECOVERY BOOL NULL, PRIMARY KEY (ENTRY_ID));");
! 	addSql("CREATE TABLE quartz.qrtz_scheduler_state ( INSTANCE_NAME VARCHAR(80) NOT NULL, LAST_CHECKIN_TIME BIGINT NOT NULL, CHECKIN_INTERVAL BIGINT NOT NULL, RECOVERER VARCHAR(80) NULL, PRIMARY KEY (INSTANCE_NAME));");
  	addSql("INSERT INTO qrtz_locks values('TRIGGER_ACCESS');");
  	addSql("INSERT INTO qrtz_locks values('JOB_ACCESS');");



From nobody at sheep.berlios.de  Fri Jan 20 13:10:00 2006
From: nobody at sheep.berlios.de (peter_courcoux)
Date: Fri, 20 Jan 2006 13:10:00 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables CreatePostgresTables.java,1.3,1.4
Message-ID: <200601201210.k0KCA0x02697@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables
In directory sheep:/tmp/cvs-serv14716/src/main/java/org/apache/fulcrum/quartz/tables

Modified Files:
	CreatePostgresTables.java 
Log Message:
prefix drop table with schema name.

Index: CreatePostgresTables.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-hivemind-quartz/src/main/java/org/apache/fulcrum/quartz/tables/CreatePostgresTables.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** CreatePostgresTables.java	20 Jan 2006 11:28:27 -0000	1.3
--- CreatePostgresTables.java	20 Jan 2006 12:09:56 -0000	1.4
***************
*** 26,41 ****
  	
  	public void addCommands() {
! 	addSql("DROP TABLE qrtz_locks;");
! 	addSql("drop table qrtz_job_listeners;");
! 	addSql("drop table qrtz_trigger_listeners;");
! 	addSql("drop table qrtz_fired_triggers;");
! 	addSql("DROP TABLE qrtz_paused_trigger_grps;");
! 	addSql("DROP TABLE qrtz_scheduler_state;");
! 	addSql("drop table qrtz_simple_triggers;");
! 	addSql("drop table qrtz_cron_triggers;");
! 	addSql("DROP TABLE qrtz_blob_triggers;");
! 	addSql("drop table qrtz_triggers;");
! 	addSql("drop table qrtz_job_details;");
! 	addSql("drop table qrtz_calendars;");
  	addSql("drop schema quartz;");
  	addSql("create schema quartz;");
--- 26,41 ----
  	
  	public void addCommands() {
! 	addSql("DROP TABLE quartz.qrtz_locks;");
! 	addSql("drop table quartz.qrtz_job_listeners;");
! 	addSql("drop table quartz.qrtz_trigger_listeners;");
! 	addSql("drop table quartz.qrtz_fired_triggers;");
! 	addSql("DROP TABLE quartz.qrtz_paused_trigger_grps;");
! 	addSql("DROP TABLE quartz.qrtz_scheduler_state;");
! 	addSql("drop table quartz.qrtz_simple_triggers;");
! 	addSql("drop table quartz.qrtz_cron_triggers;");
! 	addSql("DROP TABLE quartz.qrtz_blob_triggers;");
! 	addSql("drop table quartz.qrtz_triggers;");
! 	addSql("drop table quartz.qrtz_job_details;");
! 	addSql("drop table quartz.qrtz_calendars;");
  	addSql("drop schema quartz;");
  	addSql("create schema quartz;");



From nobody at sheep.berlios.de  Tue Jan 24 12:25:22 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:25:22 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.13,1.14
Message-ID: <200601241125.k0OBPMx04967@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv24754

Modified Files:
	pom.xml 
Log Message:
Bumped up version number to correspond with new versions of
fulcrum-quartz and fulcrum-hibernate

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.13
retrieving revision 1.14
diff -C2 -d -r1.13 -r1.14
*** pom.xml	17 Jan 2006 11:42:18 -0000	1.13
--- pom.xml	24 Jan 2006 11:25:19 -0000	1.14
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.3</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.4</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
***************
*** 107,116 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-quartz</artifactId>
!             <version>1.0.0</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.7</version>
          </dependency>
          <dependency>
--- 107,116 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-quartz</artifactId>
!             <version>1.0.1</version>
          </dependency>
          <dependency>
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.8</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Tue Jan 24 12:38:56 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:38:56 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity DynamicUser.java,1.2,1.3
Message-ID: <200601241138.k0OBcux05664@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity
In directory sheep:/tmp/cvs-serv30775/src/main/java/org/apache/fulcrum/security/model/dynamic/entity

Modified Files:
	DynamicUser.java 
Log Message:
Completed changes for:

1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: DynamicUser.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/dynamic/entity/DynamicUser.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** DynamicUser.java	17 Jan 2006 09:17:25 -0000	1.2
--- DynamicUser.java	24 Jan 2006 11:38:54 -0000	1.3
***************
*** 43,47 ****
      private String password;
      private Date passwordExpiryDate;
!     private Date locked;
      private int loginAttempts;
          
--- 43,47 ----
      private String password;
      private Date passwordExpiryDate;
!     private long locked;
      private int loginAttempts;
          
***************
*** 146,150 ****
  	 * Created on Jan 11, 2006
  	 */
! 	public Date getLockedDate() {
  		return locked;
  	}
--- 146,150 ----
  	 * Created on Jan 11, 2006
  	 */
! 	public long getLockTime() {
  		return locked;
  	}
***************
*** 157,161 ****
  	 * Created on Jan 11, 2006
  	 */
! 	public void setLockedDate(Date locked) {
  		this.locked = locked;
  	}
--- 157,161 ----
  	 * Created on Jan 11, 2006
  	 */
! 	public void setLockTime(long locked) {
  		this.locked = locked;
  	}



From nobody at sheep.berlios.de  Tue Jan 24 12:38:57 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:38:57 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator CryptoAuthenticator.java,1.2,1.3
Message-ID: <200601241138.k0OBcux05668@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator
In directory sheep:/tmp/cvs-serv30775/src/main/java/org/apache/fulcrum/security/authenticator

Modified Files:
	CryptoAuthenticator.java 
Log Message:
Completed changes for:

1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: CryptoAuthenticator.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/authenticator/CryptoAuthenticator.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** CryptoAuthenticator.java	17 Jan 2006 09:17:24 -0000	1.2
--- CryptoAuthenticator.java	24 Jan 2006 11:38:54 -0000	1.3
***************
*** 1,3 ****
--- 1,4 ----
  package org.apache.fulcrum.security.authenticator;
+ 
  /*
   *  Copyright 2001-2004 The Apache Software Foundation
***************
*** 22,100 ****
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
  /**
!  * This class authenticates using the Fulcrum Crypto service a user and
!  * their password
!  *
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
!  * @version $Id$
   * @avalon.component name="crypto-authenticator"
   * @avalon.service type="org.apache.fulcrum.security.authenticator.Authenticator"
   */
! public class CryptoAuthenticator implements Authenticator
! {
!     boolean composed = false;
!     private CryptoService cryptoService = null;
!     private String algorithm="java";
!     private String cipher="SHA-1";
!     /**
!      * Authenticate an username with the specified password. If authentication
!      * is successful the method returns true. If it fails, it returns false
!      * If there are any problems, an exception is thrown.
!      * 
!      *
!      * @param usernameAndDomain an string in the format [domain]/[username].
!      * @param password the user supplied password.
!      * @exception UnknownEntityException if the user's account does not
!      *            exist in the database.
!      * @exception DataBackendException if there is a problem accessing the
!      *            storage.
!      */
!     public boolean authenticate(User user, String password) throws  DataBackendException
!     {
!  
!         /*try {
!             CryptoAlgorithm ca = cryptoService.getCryptoAlgorithm(algorithm);
!             ca.setCipher(cipher);
!             String output = ca.encrypt(password);*/
!         	String output = getCryptoPassword(password);
!             return output.equals(user.getPassword());
!         /*}
!         catch (NoSuchAlgorithmException e) {
!             throw new DataBackendException(e.getMessage(), e);
!         }
!         catch (Exception ex) {
!             throw new DataBackendException(ex.getMessage(), ex);
!         }*/
!     }
!     
!     public String getAlgorithm() {
!         return algorithm;
!     }
!     
!     public void setAlgorithm(String algorithm) {
!         this.algorithm = algorithm;
!     }
!     
!     public String getCipher() {
!         return cipher;
!     }
!     
!     public void setCipher(String cipher) {
!         this.cipher = cipher;
!     }
!    
!     public void setCryptoService(CryptoService cryptoService) {
!         this.cryptoService = cryptoService;
!     }
!     
! 	public String getCryptoPassword(String password) throws DataBackendException {
  		try {
  			CryptoAlgorithm ca = cryptoService.getCryptoAlgorithm(algorithm);
! 	        ca.setCipher(cipher);
! 	        return ca.encrypt(password);
! 		} catch (NoSuchAlgorithmException e) {
!             throw new DataBackendException(e.getMessage(), e);
  		} catch (Exception e) {
!             throw new DataBackendException(e.getMessage(), e);
  		}
  	}
--- 23,93 ----
  import org.apache.fulcrum.security.util.DataBackendException;
  import org.apache.fulcrum.security.util.UnknownEntityException;
+ 
  /**
!  * This class authenticates using the Fulcrum Crypto service a user and their
!  * password
!  * 
   * @author <a href="mailto:epugh at upstate.com">Eric Pugh</a>
!  * @version $Id: CryptoAuthenticator.java,v 1.2 2006/01/17 09:17:24
!  *          biggus_richus Exp $
   * @avalon.component name="crypto-authenticator"
   * @avalon.service type="org.apache.fulcrum.security.authenticator.Authenticator"
   */
! public class CryptoAuthenticator implements Authenticator {
! 	boolean composed = false;
! 
! 	private CryptoService cryptoService = null;
! 
! 	private String algorithm = "java";
! 
! 	private String cipher = "SHA-1";
! 
! 	/**
! 	 * Authenticate an username with the specified password. If authentication
! 	 * is successful the method returns true. If it fails, it returns false If
! 	 * there are any problems, an exception is thrown.
! 	 * 
! 	 * 
! 	 * @param usernameAndDomain
! 	 *            an string in the format [domain]/[username].
! 	 * @param password
! 	 *            the user supplied password.
! 	 * @exception DataBackendException
! 	 *                if there is a problem accessing the storage.
! 	 */
! 	public boolean authenticate(User user, String password)
! 			throws DataBackendException {
! 		String output = getCryptoPassword(password);
! 		return output.equals(user.getPassword());
! 	}
! 
! 	public String getAlgorithm() {
! 		return algorithm;
! 	}
! 
! 	public void setAlgorithm(String algorithm) {
! 		this.algorithm = algorithm;
! 	}
! 
! 	public String getCipher() {
! 		return cipher;
! 	}
! 
! 	public void setCipher(String cipher) {
! 		this.cipher = cipher;
! 	}
! 
! 	public void setCryptoService(CryptoService cryptoService) {
! 		this.cryptoService = cryptoService;
! 	}
! 
! 	public String getCryptoPassword(String password)
! 			throws DataBackendException {
  		try {
  			CryptoAlgorithm ca = cryptoService.getCryptoAlgorithm(algorithm);
! 			ca.setCipher(cipher);
! 			return ca.encrypt(password);
  		} catch (Exception e) {
! 			throw new DataBackendException(e.getMessage(), e);
  		}
  	}



From nobody at sheep.berlios.de  Tue Jan 24 12:38:57 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:38:57 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi AbstractUserManager.java,1.6,1.7
Message-ID: <200601241138.k0OBcvx05676@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi
In directory sheep:/tmp/cvs-serv30775/src/main/java/org/apache/fulcrum/security/spi

Modified Files:
	AbstractUserManager.java 
Log Message:
Completed changes for:

1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: AbstractUserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/spi/AbstractUserManager.java,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** AbstractUserManager.java	18 Jan 2006 08:38:55 -0000	1.6
--- AbstractUserManager.java	24 Jan 2006 11:38:55 -0000	1.7
***************
*** 48,51 ****
--- 48,53 ----
  		implements UserManager {
  
+ 	private static final long HOURS_TO_MILLIS = 3600000L;
+ 	
  	protected abstract User persistNewUser(User user)
  			throws DataBackendException;
***************
*** 62,70 ****
  	private int passwordCyclePolicy;
  
! 	private int passwordDuration;
  	
  	private int maxLoginAttempts;
  	
! 	private int lockReset;
  
  	public AccessControlList getACL(User user) throws UnknownEntityException {
--- 64,72 ----
  	private int passwordCyclePolicy;
  
! 	private int passwordDurationDays;
  	
  	private int maxLoginAttempts;
  	
! 	private int lockResetHours;
  
  	public AccessControlList getACL(User user) throws UnknownEntityException {
***************
*** 115,119 ****
  		}
  		
! 		authenticate(user, password);
  		return user;
  	}
--- 117,126 ----
  		}
  		
! 		try {
! 			authenticate(user, password);
! 		} finally {
! 			saveUser(user);
! 		}
! 		
  		return user;
  	}
***************
*** 158,180 ****
  	 * 
  	 * @param user
! 	 *            an User object to authenticate.
  	 * @param password
  	 *            the user supplied password.
  	 * @exception PasswordMismatchException
  	 *                if the supplied password was incorrect.
- 	 * @exception UnknownEntityException
- 	 *                if the user's account does not exist in the database.
  	 * @exception DataBackendException
  	 *                if there is a problem accessing the storage.
  	 */
  	public void authenticate(User user, String password)
! 			throws PasswordMismatchException, UnknownEntityException,
  			DataBackendException, UserLockedException {
  
! 		if (user.getLockedDate() != null) {
! 			Calendar cal = Calendar.getInstance();
! 			cal.add(Calendar.HOUR_OF_DAY, (-1 * lockReset));
! 			if (cal.getTime().before(user.getLockedDate())) {
  				throw new UserLockedException("User is locked");
  			}
  		}
--- 165,195 ----
  	 * 
  	 * @param user
! 	 *            a User object to authenticate.
  	 * @param password
  	 *            the user supplied password.
  	 * @exception PasswordMismatchException
  	 *                if the supplied password was incorrect.
  	 * @exception DataBackendException
  	 *                if there is a problem accessing the storage.
  	 */
  	public void authenticate(User user, String password)
! 			throws PasswordMismatchException, UnknownEntityException, 
  			DataBackendException, UserLockedException {
  
! 		if (!checkExists(user)) {
! 			throw new UnknownEntityException("The account '" + user.getName()
! 					+ "' does not exist");
! 		}
! 
! 		if (user.getLockTime() != 0) {
! 			long elapsedTime = user.getLockTime() + (HOURS_TO_MILLIS * lockResetHours);
! 
! 			// See if enough time has elapsed to unlock the user 
! 			if (elapsedTime > System.currentTimeMillis()) {
! 				// Nope
  				throw new UserLockedException("User is locked");
+ 			} else {
+ 				// Yep
+ 				user.setLockTime(0);
  			}
  		}
***************
*** 183,187 ****
  			user.setLoginAttempts(user.getLoginAttempts()+1);
  			if (user.getLoginAttempts() == maxLoginAttempts) {
! 				user.setLockedDate(new Date());
  				user.setLoginAttempts(0);
  			}
--- 198,202 ----
  			user.setLoginAttempts(user.getLoginAttempts()+1);
  			if (user.getLoginAttempts() == maxLoginAttempts) {
! 				user.setLockTime(System.currentTimeMillis());
  				user.setLoginAttempts(0);
  			}
***************
*** 211,224 ****
  			throws PasswordMismatchException, UserLockedException, 
  			       UnknownEntityException, DataBackendException, PasswordHistoryException {
- 		if (!checkExists(user)) {
- 			throw new UnknownEntityException("The account '" + user.getName()
- 					+ "' does not exist");
- 		}
  		authenticate(user, oldPassword);
! 		cyclePassword(user, newPassword);
! 		// save the changes in the database imediately, to prevent the password
! 		// being 'reverted' to the old value if the user data is lost somehow
! 		// before it is saved at session's expiry.
! 		saveUser(user);
  	}
  
--- 226,231 ----
  			throws PasswordMismatchException, UserLockedException, 
  			       UnknownEntityException, DataBackendException, PasswordHistoryException {
  		authenticate(user, oldPassword);
! 		forcePassword(user, newPassword);
  	}
  
***************
*** 267,271 ****
                  												 date.get(Calendar.MONTH),
                  												 date.get(Calendar.DAY_OF_MONTH));
! 		passwordExpiry.add(Calendar.DAY_OF_MONTH, getPasswordDuration());
  		user.setPasswordExpiryDate(passwordExpiry.getTime());
  	}
--- 274,278 ----
                  												 date.get(Calendar.MONTH),
                  												 date.get(Calendar.DAY_OF_MONTH));
! 		passwordExpiry.add(Calendar.DAY_OF_MONTH, getPasswordDurationDays());
  		user.setPasswordExpiryDate(passwordExpiry.getTime());
  	}
***************
*** 289,304 ****
  	 */
  	public void forcePassword(User user, String password)
! 			throws UnknownEntityException, DataBackendException,
! 			PasswordHistoryException {
! 		if (!checkExists(user)) {
! 			throw new UnknownEntityException("The account '" + user.getName()
! 					+ "' does not exist");
! 		}
! 		// user.setPassword(authenticator.getCryptoPassword(password));
! 		cyclePassword(user, password);
  		// save the changes in the database immediately, to prevent the
  		// password being 'reverted' to the old value if the user data
  		// is lost somehow before it is saved at session's expiry.
! 		saveUser(user);
  	}
  
--- 296,308 ----
  	 */
  	public void forcePassword(User user, String password)
! 			throws DataBackendException, PasswordHistoryException {		
! 		try {
! 			cyclePassword(user, password);
! 		} finally {
  		// save the changes in the database immediately, to prevent the
  		// password being 'reverted' to the old value if the user data
  		// is lost somehow before it is saved at session's expiry.
! 			saveUser(user);
! 		}
  	}
  
***************
*** 371,375 ****
  		user.setPassword(authenticator.getCryptoPassword(password));
  		setPasswordExpiry(user);
! 		user.setLockedDate(null);
  		user.setLoginAttempts(0);
  		try {
--- 375,379 ----
  		user.setPassword(authenticator.getCryptoPassword(password));
  		setPasswordExpiry(user);
! 		user.setLockTime(0);
  		user.setLoginAttempts(0);
  		try {
***************
*** 418,435 ****
  	}
  
! 	public int getPasswordDuration() {
! 		return this.passwordDuration;
  	}
  
! 	public void setPasswordDuration(int passwordDuration) {
! 		this.passwordDuration = passwordDuration;
  	}
  
! 	public int getLockReset() {
! 		return lockReset;
  	}
  
! 	public void setLockReset(int lockReset) {
! 		this.lockReset = lockReset;
  	}
  
--- 422,439 ----
  	}
  
! 	public int getPasswordDurationDays() {
! 		return this.passwordDurationDays;
  	}
  
! 	public void setPasswordDurationDays(int passwordDuration) {
! 		this.passwordDurationDays = passwordDuration;
  	}
  
! 	public int getLockResetHours() {
! 		return lockResetHours;
  	}
  
! 	public void setLockResetHours(int lockReset) {
! 		this.lockResetHours = lockReset;
  	}
  



From nobody at sheep.berlios.de  Tue Jan 24 12:38:56 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:38:56 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity User.java,1.2,1.3
Message-ID: <200601241138.k0OBcux05657@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity
In directory sheep:/tmp/cvs-serv30775/src/main/java/org/apache/fulcrum/security/entity

Modified Files:
	User.java 
Log Message:
Completed changes for:

1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: User.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/entity/User.java,v
retrieving revision 1.2
retrieving revision 1.3
diff -C2 -d -r1.2 -r1.3
*** User.java	17 Jan 2006 09:17:23 -0000	1.2
--- User.java	24 Jan 2006 11:38:53 -0000	1.3
***************
*** 75,79 ****
       * Created on Jan 12, 2006
       */
!     Date getLockedDate();
      
      /**
--- 75,79 ----
       * Created on Jan 12, 2006
       */
!     long getLockTime();
      
      /**
***************
*** 84,88 ****
       * Created on Jan 12, 2006
       */
!     void setLockedDate(Date locked);
      
      /**
--- 84,88 ----
       * Created on Jan 12, 2006
       */
!     void setLockTime(long locked);
      
      /**



From nobody at sheep.berlios.de  Tue Jan 24 12:38:57 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:38:57 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security UserManager.java,1.3,1.4
Message-ID: <200601241138.k0OBcvx05670@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security
In directory sheep:/tmp/cvs-serv30775/src/main/java/org/apache/fulcrum/security

Modified Files:
	UserManager.java 
Log Message:
Completed changes for:

1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: UserManager.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/UserManager.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** UserManager.java	17 Jan 2006 15:43:10 -0000	1.3
--- UserManager.java	24 Jan 2006 11:38:54 -0000	1.4
***************
*** 143,151 ****
      *
      * @param user the user object to save
-     * @throws UnknownEntityException if the user's account does not
-     *         exist in the database.
      * @throws DataBackendException if there is a problem accessing the storage.
      */
!     void saveUser(User user) throws UnknownEntityException, DataBackendException;
      /**
       * Authenticate an User with the specified password. If authentication
--- 143,149 ----
      *
      * @param user the user object to save
      * @throws DataBackendException if there is a problem accessing the storage.
      */
!     void saveUser(User user) throws DataBackendException;
      /**
       * Authenticate an User with the specified password. If authentication



From nobody at sheep.berlios.de  Tue Jan 24 12:38:57 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:38:57 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test AbstractUserManagerTest.java,1.4,1.5
Message-ID: <200601241138.k0OBcvx05672@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test
In directory sheep:/tmp/cvs-serv30775/src/main/java/org/apache/fulcrum/security/model/test

Modified Files:
	AbstractUserManagerTest.java 
Log Message:
Completed changes for:

1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: AbstractUserManagerTest.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/src/main/java/org/apache/fulcrum/security/model/test/AbstractUserManagerTest.java,v
retrieving revision 1.4
retrieving revision 1.5
diff -C2 -d -r1.4 -r1.5
*** AbstractUserManagerTest.java	17 Jan 2006 15:43:11 -0000	1.4
--- AbstractUserManagerTest.java	24 Jan 2006 11:38:54 -0000	1.5
***************
*** 97,101 ****
  		// Simulate password expiry
  		GregorianCalendar gc = new GregorianCalendar(1974, 4, 25);
! 		user.setLockedDate(gc.getTime());
  		user.setPasswordExpiryDate(gc.getTime());
  		try {
--- 97,101 ----
  		// Simulate password expiry
  		GregorianCalendar gc = new GregorianCalendar(1974, 4, 25);
! 		user.setLockTime(gc.getTimeInMillis());
  		user.setPasswordExpiryDate(gc.getTime());
  		try {
***************
*** 149,153 ****
  		// Simulate enough time passing since user was locked
  		GregorianCalendar gc = new GregorianCalendar(1974, 4, 25);
! 		user.setLockedDate(gc.getTime());
  		getUserManager().authenticate(user, "jc");
  	}
--- 149,153 ----
  		// Simulate enough time passing since user was locked
  		GregorianCalendar gc = new GregorianCalendar(1974, 4, 25);
! 		user.setLockTime(gc.getTimeInMillis());
  		getUserManager().authenticate(user, "jc");
  	}
***************
*** 184,188 ****
  		getUserManager().changePassword(user, "six", "seven");
  		getUserManager().changePassword(user, "seven", "one");
! 		getUserManager().authenticate(user, "one");		
  	}
  
--- 184,189 ----
  		getUserManager().changePassword(user, "six", "seven");
  		getUserManager().changePassword(user, "seven", "one");
! 		getUserManager().authenticate(user, "one");
! 		getUserManager().changePassword(user, "one", "ninety-nine");
  	}
  



From nobody at sheep.berlios.de  Tue Jan 24 12:38:56 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:38:56 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind pom.xml,1.10,1.11
Message-ID: <200601241138.k0OBcux05660@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind
In directory sheep:/tmp/cvs-serv30775

Modified Files:
	pom.xml 
Log Message:
Completed changes for:

1 - Make all methods pass passwords via crypto
2 - Make the Authenticator available on API
3 - Add Expiry Date
4 - Add Use locking
5 - Add Password History
6 - Add Password Cycle Policy

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind/pom.xml,v
retrieving revision 1.10
retrieving revision 1.11
diff -C2 -d -r1.10 -r1.11
*** pom.xml	17 Jan 2006 09:17:24 -0000	1.10
--- pom.xml	24 Jan 2006 11:38:54 -0000	1.11
***************
*** 1,139 ****
  <project xmlns="http://maven.apache.org/POM/4.0.0"
!   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
!   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
!   <modelVersion>4.0.0</modelVersion>
!   <groupId>fulcrum-hivemind</groupId>
!   <artifactId>fulcrum-security</artifactId>
!   <packaging>jar</packaging>
!   <name>Fulcrum Security for Hivemind</name>
!   <version>1.5</version>
!   <description>A port of Fulcrum Security to run inside Hivemind.</description>
!   <url>http://zebra.berlios.de</url>
!   <issueManagement>
!     <system>Berlios</system>
!     <url>http://developer.berlios.de/bugs/?group_id=2683</url>
!   </issueManagement>
!   <ciManagement>
!     <system>Luntbuild</system>
!     <url>http://clank:8080/luntbuild/</url>
!   </ciManagement>
!   <inceptionYear>2005</inceptionYear>
!   <developers>
!     <developer>
!       <id>bgidley</id>
!       <name>Ben Gidley</name>
!       <email>ben.gidley at anite.com</email>
!       <url>http://www.gidley.co.uk</url>
!       <organization>Anite</organization>
!       <organizationUrl>http://www.anite.com/</organizationUrl>
!       <roles>
!         <role>Developer</role>
!       </roles>
!     </developer>
!   </developers>
!   <licenses>
!     <license>
!       <name>Apache License 2.0</name>
!       <url>http://www.apache.org/licenses/LICENSE-2.0</url>
!       <distribution>repo</distribution>
!     </license>
!   </licenses>
!   <scm>
!     <connection>scm:cvs:pserver:anonymous at cvs.zebra.berlios.de:/cvsroot/zebra:zebra/src/java/fulcrum-security-hivemind</connection>
!     <url>http://cvs.berlios.de/cgi-bin/viewcvs.cgi/zebra</url>
!   </scm>
!   <build>
!     <plugins>
!       <plugin>
!         <groupId>org.apache.maven.plugins</groupId>
!         <artifactId>maven-eclipse-plugin</artifactId>
!         <executions>
!           <execution>
!             <phase>compile</phase>
!             <goals>
!               <goal>eclipse</goal>
!             </goals>
!           </execution>
!         </executions>
!       </plugin>
!       <plugin>
!         <groupId>org.apache.maven.plugins</groupId>
!         <artifactId>maven-source-plugin</artifactId>
!         <executions>
!           <execution>
!             <goals>
!               <goal>jar</goal>
!             </goals>
!           </execution>
!         </executions>
!       </plugin>
!       <plugin>
!         <groupId>org.apache.maven.plugins</groupId>
!         <artifactId>maven-compiler-plugin</artifactId>
!         <configuration>
!           <source>1.5</source>
!           <target>1.5</target>
!         </configuration>
!       </plugin>
!     </plugins>
!   </build>
!   <repositories>
!     <repository>
!       <id>Zebra</id>
!       <name>Zebra at Berlios</name>
!       <layout>default</layout>
!       <url>http://zebra.berlios.de/maven2/</url>
!     </repository>
!     <repository>
!       <id>Anite</id>
!       <name>Anite Mirror</name>
!       <layout>default</layout>
!       <url>http://gnasher.aniteps.com/maven2</url>
!       <snapshots>
!         <enabled>false</enabled>
!       </snapshots>
!     </repository>
!     <repository>
!       <id>Zebra M1</id>
!       <name>Zebra Maven 1</name>
!       <layout>legacy</layout>
!       <url>http://zebra.berlios.de/MavenRepository</url>
!     </repository>
!   </repositories>
!   <dependencies>
!     <dependency>
!       <groupId>fulcrum-hivemind</groupId>
!       <artifactId>fulcrum-hivemind</artifactId>
!       <version>1.3</version>
!     </dependency>
!     <dependency>
!       <groupId>junit</groupId>
!       <artifactId>junit</artifactId>
!       <version>3.8.1</version>
!     </dependency>
!     <dependency>
!       <groupId>fulcrum-hivemind</groupId>
!       <artifactId>fulcrum-crypto</artifactId>
!       <version>1.2</version>
!     </dependency>
!   </dependencies>
!   <distributionManagement>
!     <repository>
!       <id>zebra-berlios</id>
!       <url>scp://shell.berlios.de/home/groups/zebra/htdocs/maven2</url>
!     </repository>
!     <site>
!       <id>zebra-berlios</id>
!       <url>scp://shell.berlios.de/home/groups/zebra/htdocs/cc/fulcrum-security</url>
!     </site>
!   </distributionManagement>
!   <reporting>
!     <plugins>
!       <plugin>
!         <groupId>fulcrum-hivemind</groupId>
!         <artifactId>hivedoc-maven-plugin</artifactId>
!         <version>0.2</version>
!       </plugin>
!     </plugins>
!   </reporting>
  </project>
--- 1,141 ----
  <project xmlns="http://maven.apache.org/POM/4.0.0"
! 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
! 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
! 	<modelVersion>4.0.0</modelVersion>
! 	<groupId>fulcrum-hivemind</groupId>
! 	<artifactId>fulcrum-security</artifactId>
! 	<packaging>jar</packaging>
! 	<name>Fulcrum Security for Hivemind</name>
! 	<version>1.6</version>
! 	<description>A port of Fulcrum Security to run inside Hivemind.</description>
! 	<url>http://zebra.berlios.de</url>
! 	<issueManagement>
! 		<system>Berlios</system>
! 		<url>http://developer.berlios.de/bugs/?group_id=2683</url>
! 	</issueManagement>
! 	<ciManagement>
! 		<system>Luntbuild</system>
! 		<url>http://clank:8080/luntbuild/</url>
! 	</ciManagement>
! 	<inceptionYear>2005</inceptionYear>
! 	<developers>
! 		<developer>
! 			<id>bgidley</id>
! 			<name>Ben Gidley</name>
! 			<email>ben.gidley at anite.com</email>
! 			<url>http://www.gidley.co.uk</url>
! 			<organization>Anite</organization>
! 			<organizationUrl>http://www.anite.com/</organizationUrl>
! 			<roles>
! 				<role>Developer</role>
! 			</roles>
! 		</developer>
! 	</developers>
! 	<licenses>
! 		<license>
! 			<name>Apache License 2.0</name>
! 			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
! 			<distribution>repo</distribution>
! 		</license>
! 	</licenses>
! 	<scm>
! 		<connection>
! 			scm:cvs:pserver:anonymous at cvs.zebra.berlios.de:/cvsroot/zebra:zebra/src/java/fulcrum-security-hivemind</connection>
! 		<url>http://cvs.berlios.de/cgi-bin/viewcvs.cgi/zebra</url>
! 	</scm>
! 	<build>
! 		<plugins>
! 			<plugin>
! 				<groupId>org.apache.maven.plugins</groupId>
! 				<artifactId>maven-eclipse-plugin</artifactId>
! 				<executions>
! 					<execution>
! 						<phase>compile</phase>
! 						<goals>
! 							<goal>eclipse</goal>
! 						</goals>
! 					</execution>
! 				</executions>
! 			</plugin>
! 			<plugin>
! 				<groupId>org.apache.maven.plugins</groupId>
! 				<artifactId>maven-source-plugin</artifactId>
! 				<executions>
! 					<execution>
! 						<goals>
! 							<goal>jar</goal>
! 						</goals>
! 					</execution>
! 				</executions>
! 			</plugin>
! 			<plugin>
! 				<groupId>org.apache.maven.plugins</groupId>
! 				<artifactId>maven-compiler-plugin</artifactId>
! 				<configuration>
! 					<source>1.5</source>
! 					<target>1.5</target>
! 				</configuration>
! 			</plugin>
! 		</plugins>
! 	</build>
! 	<repositories>
! 		<repository>
! 			<id>Zebra</id>
! 			<name>Zebra at Berlios</name>
! 			<layout>default</layout>
! 			<url>http://zebra.berlios.de/maven2/</url>
! 		</repository>
! 		<repository>
! 			<id>Anite</id>
! 			<name>Anite Mirror</name>
! 			<layout>default</layout>
! 			<url>http://gnasher.aniteps.com/maven2</url>
! 			<snapshots>
! 				<enabled>false</enabled>
! 			</snapshots>
! 		</repository>
! 		<repository>
! 			<id>Zebra M1</id>
! 			<name>Zebra Maven 1</name>
! 			<layout>legacy</layout>
! 			<url>http://zebra.berlios.de/MavenRepository</url>
! 		</repository>
! 	</repositories>
! 	<dependencies>
! 		<dependency>
! 			<groupId>fulcrum-hivemind</groupId>
! 			<artifactId>fulcrum-hivemind</artifactId>
! 			<version>1.3</version>
! 		</dependency>
! 		<dependency>
! 			<groupId>junit</groupId>
! 			<artifactId>junit</artifactId>
! 			<version>3.8.1</version>
! 		</dependency>
! 		<dependency>
! 			<groupId>fulcrum-hivemind</groupId>
! 			<artifactId>fulcrum-crypto</artifactId>
! 			<version>1.2</version>
! 		</dependency>
! 	</dependencies>
! 	<distributionManagement>
! 		<repository>
! 			<id>zebra-berlios</id>
! 			<url>scp://shell.berlios.de/home/groups/zebra/htdocs/maven2</url>
! 		</repository>
! 		<site>
! 			<id>zebra-berlios</id>
! 			<url>
! 				scp://shell.berlios.de/home/groups/zebra/htdocs/cc/fulcrum-security</url>
! 		</site>
! 	</distributionManagement>
! 	<reporting>
! 		<plugins>
! 			<plugin>
! 				<groupId>fulcrum-hivemind</groupId>
! 				<artifactId>hivedoc-maven-plugin</artifactId>
! 				<version>0.2</version>
! 			</plugin>
! 		</plugins>
! 	</reporting>
  </project>



From nobody at sheep.berlios.de  Tue Jan 24 12:57:52 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:57:52 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/model/test - New directory
Message-ID: <200601241157.k0OBvpx06666@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/model/test
In directory sheep:/tmp/cvs-serv13948/src/main/java/org/apache/fulcrum/security/model/test

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/model/test added to the repository




From nobody at sheep.berlios.de  Tue Jan 24 12:57:51 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:57:51 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/model - New directory
Message-ID: <200601241157.k0OBvpx06662@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/model
In directory sheep:/tmp/cvs-serv13948/src/main/java/org/apache/fulcrum/security/model

Log Message:
Directory /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/model added to the repository




From nobody at sheep.berlios.de  Tue Jan 24 12:57:59 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:57:59 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate PersistenceHelperHivemindImplementation.java,1.1,1.2 HibernateUserManagerImpl.java,1.1,1.2
Message-ID: <200601241157.k0OBvxx06682@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate
In directory sheep:/tmp/cvs-serv14042/src/main/java/org/apache/fulcrum/security/hibernate

Modified Files:
	PersistenceHelperHivemindImplementation.java 
	HibernateUserManagerImpl.java 
Log Message:
Fixed issues with user modification not writing thru to database

Index: PersistenceHelperHivemindImplementation.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/PersistenceHelperHivemindImplementation.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** PersistenceHelperHivemindImplementation.java	25 Nov 2005 08:50:12 -0000	1.1
--- PersistenceHelperHivemindImplementation.java	24 Jan 2006 11:57:56 -0000	1.2
***************
*** 38,42 ****
          try {
              transaction = session.beginTransaction();
!             session.update(entity);
              transaction.commit();
  
--- 38,42 ----
          try {
              transaction = session.beginTransaction();
!             session.saveOrUpdate(entity);
              transaction.commit();
  

Index: HibernateUserManagerImpl.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/HibernateUserManagerImpl.java,v
retrieving revision 1.1
retrieving revision 1.2
diff -C2 -d -r1.1 -r1.2
*** HibernateUserManagerImpl.java	25 Nov 2005 08:50:12 -0000	1.1
--- HibernateUserManagerImpl.java	24 Jan 2006 11:57:56 -0000	1.2
***************
*** 132,136 ****
       *
       * @param user the object describing account to be created.
-      * @param password The password to use for the account.
       *
       * @throws DataBackendException if there was an error accessing the
--- 132,135 ----
***************
*** 152,163 ****
       * @throws UnknownEntityException if the role does not exist.
       */
!     public void saveUser(User user) throws DataBackendException, UnknownEntityException {
!         boolean userExists = false;
!         userExists = checkExists(user);
!         if (userExists) {
              getPersistenceHelper().updateEntity(user);
-         } else {
-             throw new UnknownEntityException("Unknown user '" + user + "'");
-         }
      }
  
--- 151,156 ----
       * @throws UnknownEntityException if the role does not exist.
       */
!     public void saveUser(User user) throws DataBackendException {
              getPersistenceHelper().updateEntity(user);
      }
  



From nobody at sheep.berlios.de  Tue Jan 24 12:57:58 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:57:58 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate pom.xml,1.6,1.7
Message-ID: <200601241157.k0OBvwx06672@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate
In directory sheep:/tmp/cvs-serv14042

Modified Files:
	pom.xml 
Log Message:
Fixed issues with user modification not writing thru to database

Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/pom.xml,v
retrieving revision 1.6
retrieving revision 1.7
diff -C2 -d -r1.6 -r1.7
*** pom.xml	17 Jan 2006 11:42:13 -0000	1.6
--- pom.xml	24 Jan 2006 11:57:56 -0000	1.7
***************
*** 6,10 ****
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
!     <version>1.8</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
--- 6,10 ----
      <artifactId>fulcrum-security-hibernate</artifactId>
      <packaging>jar</packaging>
! 	<version>1.9</version>
      <name>fulcrum-hibernate-security- Fuclrum Security Hibernate layer for Hivemind</name>
      <url>http://gnasher.aniteps.com/docs/</url>
***************
*** 82,86 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.7</version>
          </dependency>
      </dependencies>
--- 82,86 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-hibernate</artifactId>
!             <version>1.8</version>
          </dependency>
      </dependencies>



From nobody at sheep.berlios.de  Tue Jan 24 12:57:59 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:57:59 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/model/test DatabaseWriteThroughTest.java,NONE,1.1
Message-ID: <200601241157.k0OBvwx06678@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/model/test
In directory sheep:/tmp/cvs-serv14042/src/main/java/org/apache/fulcrum/security/model/test

Added Files:
	DatabaseWriteThroughTest.java 
Log Message:
Fixed issues with user modification not writing thru to database

--- NEW FILE: DatabaseWriteThroughTest.java ---
package org.apache.fulcrum.security.model.test;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import junit.framework.TestCase;

import org.apache.fulcrum.hivemind.RegistryManager;
import org.apache.fulcrum.security.SecurityService;
import org.apache.fulcrum.security.UserManager;
import org.apache.fulcrum.security.hibernate.PersistenceHelper;
import org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser;
import org.apache.hivemind.Resource;
import org.apache.hivemind.impl.DefaultClassResolver;
import org.apache.hivemind.util.ClasspathResource;
import org.hibernate.Query;
import org.hibernate.Session;

public class DatabaseWriteThroughTest extends TestCase {
	
	public static final String USER_NAME = "rich28";

	public void setUp() throws Exception {
		// Force Registry to have test configuration
		Resource resource = new ClasspathResource(new DefaultClassResolver(),
				"META-INF/hivemodule_test.xml");
		RegistryManager.getInstance().getResources().add(resource);
		super.setUp();
	}

	public void testAddUser() throws Exception {
		PersistenceHelper persistenceHelper = (PersistenceHelper) RegistryManager
				.getInstance().getRegistry()
				.getService(PersistenceHelper.class);

		
		HibernateDynamicUser user = new HibernateDynamicUser();
		user.setName(USER_NAME);
		user.setPassword("password");
		user.setLoginAttempts(0);
		user.setLockTime(0);

		Calendar date = Calendar.getInstance();
		GregorianCalendar passwordExpiry = new GregorianCalendar(date.get(Calendar.YEAR),
                												 date.get(Calendar.MONTH),
                												 date.get(Calendar.DAY_OF_MONTH));
		passwordExpiry.add(Calendar.DAY_OF_MONTH, 28);
		user.setPasswordExpiryDate(passwordExpiry.getTime());

		user.setPasswordExpiryDate(passwordExpiry.getTime());
		
		//Session session = persistenceHelper.retrieveSession();
        //Transaction transaction = session.beginTransaction();
        //session.save(user);
        //transaction.commit();
		persistenceHelper.addEntity(user);
	}
	
	public void testChangeUser() throws Exception {
		PersistenceHelper persistenceHelper = (PersistenceHelper) RegistryManager
		.getInstance().getRegistry()
		.getService(PersistenceHelper.class);
		
		Session session = persistenceHelper.retrieveSession();
		
		Query query = session.createQuery("from HibernateDynamicUser hdu where hdu.name=:name");
		query.setString("name", USER_NAME);
		
		List users = query.list();
		HibernateDynamicUser user = (HibernateDynamicUser) users.get(0);
		user.setPassword("changed");
        //Transaction transaction = session.beginTransaction();
        //session.saveOrUpdate(user);
        //transaction.commit();
		persistenceHelper.updateEntity(user);
	}
	
	public void testGetUserFromManager() throws Exception {
		SecurityService securityService = (SecurityService) RegistryManager.getInstance().getRegistry().getService(SecurityService.class);
        UserManager userManager = securityService.getUserManager();
        HibernateDynamicUser user = (HibernateDynamicUser) userManager.getUser(USER_NAME);
        user.setPassword("changed_2");
        user.setLoginAttempts(1);
        
        userManager.saveUser(user);

		/*PersistenceHelper persistenceHelper = (PersistenceHelper) RegistryManager
		.getInstance().getRegistry()
		.getService(PersistenceHelper.class);
		persistenceHelper.updateEntity(user);*/
	}
}



From nobody at sheep.berlios.de  Tue Jan 24 12:57:59 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:57:59 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model HibernateDynamicUser.java,1.3,1.4
Message-ID: <200601241157.k0OBvxx06685@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model
In directory sheep:/tmp/cvs-serv14042/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model

Modified Files:
	HibernateDynamicUser.java 
Log Message:
Fixed issues with user modification not writing thru to database

Index: HibernateDynamicUser.java
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/java/org/apache/fulcrum/security/hibernate/dynamic/model/HibernateDynamicUser.java,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** HibernateDynamicUser.java	19 Jan 2006 11:29:18 -0000	1.3
--- HibernateDynamicUser.java	24 Jan 2006 11:57:57 -0000	1.4
***************
*** 68,74 ****
      
      @Override
!     @Basic(temporalType = TemporalType.DATE)
!     public Date getLockedDate() {
!     	return super.getLockedDate();
      }
      
--- 68,74 ----
      
      @Override
!     @Basic
!     public long getLockTime() {
!     	return super.getLockTime();
      }
      



From nobody at sheep.berlios.de  Tue Jan 24 12:57:58 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 12:57:58 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/resources/META-INF hivemodule.xml,1.3,1.4
Message-ID: <200601241157.k0OBvwx06675@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/resources/META-INF
In directory sheep:/tmp/cvs-serv14042/src/main/resources/META-INF

Modified Files:
	hivemodule.xml 
Log Message:
Fixed issues with user modification not writing thru to database

Index: hivemodule.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/src/main/resources/META-INF/hivemodule.xml,v
retrieving revision 1.3
retrieving revision 1.4
diff -C2 -d -r1.3 -r1.4
*** hivemodule.xml	17 Jan 2006 09:17:20 -0000	1.3
--- hivemodule.xml	24 Jan 2006 11:57:56 -0000	1.4
***************
*** 1,68 ****
  <?xml version="1.0"?>
  <module id="fulcrum.security.hivemind" version="1.0.0">
!   <service-point id="peristenceHelper"
!     interface="org.apache.fulcrum.security.hibernate.PersistenceHelper">
!     <invoke-factory model="threaded">
!       <construct class="org.apache.fulcrum.security.hibernate.PersistenceHelperHivemindImplementation">
!         <set-service property="session" service-id="fulcrum.hibernate.Session"/>
!       </construct>
!     </invoke-factory>
!   </service-point>
!   <service-point id="modelManagerDynamic"
!     interface="org.apache.fulcrum.security.model.dynamic.DynamicModelManager">
!     <invoke-factory>
!       <construct class="org.apache.fulcrum.security.hibernate.dynamic.HibernateModelManagerImpl"
!       > </construct>
!     </invoke-factory>
!   </service-point>
!   <service-point id="userManagerDynamic" interface="org.apache.fulcrum.security.UserManager">
!     <invoke-factory>
!       <construct class="org.apache.fulcrum.security.hibernate.HibernateUserManagerImpl">
!         <set property="className"
!           value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser"/>
! 		<set property="passwordDuration" value="28"/>
! 		<set property="passwordCyclePolicy" value="5"/>
! 		<set property="maxLoginAttempts" value="3"/>
! 		<set property="lockReset" value="12"/>
!         <set-service property="authenticator" service-id="fulcrum.security.authenticatorTextMatch"/>
!         <set-service property="aclFactory" service-id="fulcrum.security.aclFactoryDynamic"/>
!       </construct>
!     </invoke-factory>
!   </service-point>
!   <service-point id="groupManagerDynamic" interface="org.apache.fulcrum.security.GroupManager">
!     <invoke-factory>
!       <construct class="org.apache.fulcrum.security.hibernate.HibernateGroupManagerImpl">
!         <set property="className"
!           value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicGroup"/>
!       </construct>
!     </invoke-factory>
!   </service-point>
!   <service-point id="permissionManagerDynamic"
!     interface="org.apache.fulcrum.security.PermissionManager">
!     <invoke-factory>
!       <construct class="org.apache.fulcrum.security.hibernate.HibernatePermissionManagerImpl">
!         <set property="className"
!           value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicPermission"/>
!       </construct>
!     </invoke-factory>
!   </service-point>
!   <service-point id="roleManagerDynamic" interface="org.apache.fulcrum.security.RoleManager">
!     <invoke-factory>
!       <construct class="org.apache.fulcrum.security.hibernate.HibernateRoleManagerImpl">
!         <set property="className"
!           value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicRole"/>
!       </construct>
!     </invoke-factory>
!   </service-point>
!   <service-point id="securityServiceDynamic" interface="org.apache.fulcrum.security.SecurityService">
!     <invoke-factory>
!       <construct class="org.apache.fulcrum.security.BaseSecurityService">
!         <set-service property="modelManager" service-id="modelManagerDynamic"/>
!         <set-service property="groupManager" service-id="groupManagerDynamic"/>
!         <set-service property="userManager" service-id="userManagerDynamic"/>
!         <set-service property="permissionManager" service-id="permissionManagerDynamic"/>
!         <set-service property="roleManager" service-id="roleManagerDynamic"/>
!       </construct>
!     </invoke-factory>
!   </service-point>
! </module>
--- 1,86 ----
  <?xml version="1.0"?>
  <module id="fulcrum.security.hivemind" version="1.0.0">
! 	<service-point id="peristenceHelper"
! 		interface="org.apache.fulcrum.security.hibernate.PersistenceHelper">
! 		<invoke-factory model="threaded">
! 			<construct
! 				class="org.apache.fulcrum.security.hibernate.PersistenceHelperHivemindImplementation">
! 				<set-service property="session"
! 					service-id="fulcrum.hibernate.Session"/>
! 			</construct>
! 		</invoke-factory>
! 	</service-point>
! 	<service-point id="modelManagerDynamic"
! 		interface="org.apache.fulcrum.security.model.dynamic.DynamicModelManager">
! 		<invoke-factory>
! 			<construct
! 				class="org.apache.fulcrum.security.hibernate.dynamic.HibernateModelManagerImpl">
! 			</construct>
! 		</invoke-factory>
! 	</service-point>
! 	<service-point id="userManagerDynamic"
! 		interface="org.apache.fulcrum.security.UserManager">
! 		<invoke-factory>
! 			<construct
! 				class="org.apache.fulcrum.security.hibernate.HibernateUserManagerImpl">
! 				<set property="className"
! 					value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicUser"/>
! 				<set property="passwordDurationDays" value="28"/>
! 				<set property="passwordCyclePolicy" value="5"/>
! 				<set property="maxLoginAttempts" value="3"/>
! 				<set property="lockResetHours" value="12"/>
! 				<set-service property="authenticator"
! 					service-id="fulcrum.security.authenticatorTextMatch"/>
! 				<set-service property="aclFactory"
! 					service-id="fulcrum.security.aclFactoryDynamic"/>
! 			</construct>
! 		</invoke-factory>
! 	</service-point>
! 	<service-point id="groupManagerDynamic"
! 		interface="org.apache.fulcrum.security.GroupManager">
! 		<invoke-factory>
! 			<construct
! 				class="org.apache.fulcrum.security.hibernate.HibernateGroupManagerImpl">
! 				<set property="className"
! 					value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicGroup"/>
! 			</construct>
! 		</invoke-factory>
! 	</service-point>
! 	<service-point id="permissionManagerDynamic"
! 		interface="org.apache.fulcrum.security.PermissionManager">
! 		<invoke-factory>
! 			<construct
! 				class="org.apache.fulcrum.security.hibernate.HibernatePermissionManagerImpl">
! 				<set property="className"
! 					value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicPermission"/>
! 			</construct>
! 		</invoke-factory>
! 	</service-point>
! 	<service-point id="roleManagerDynamic"
! 		interface="org.apache.fulcrum.security.RoleManager">
! 		<invoke-factory>
! 			<construct
! 				class="org.apache.fulcrum.security.hibernate.HibernateRoleManagerImpl">
! 				<set property="className"
! 					value="org.apache.fulcrum.security.hibernate.dynamic.model.HibernateDynamicRole"/>
! 			</construct>
! 		</invoke-factory>
! 	</service-point>
! 	<service-point id="securityServiceDynamic"
! 		interface="org.apache.fulcrum.security.SecurityService">
! 		<invoke-factory>
! 			<construct class="org.apache.fulcrum.security.BaseSecurityService">
! 				<set-service property="modelManager"
! 					service-id="modelManagerDynamic"/>
! 				<set-service property="groupManager"
! 					service-id="groupManagerDynamic"/>
! 				<set-service property="userManager"
! 					service-id="userManagerDynamic"/>
! 				<set-service property="permissionManager"
! 					service-id="permissionManagerDynamic"/>
! 				<set-service property="roleManager"
! 					service-id="roleManagerDynamic"/>
! 			</construct>
! 		</invoke-factory>
! 	</service-point>
! </module>
\ No newline at end of file



From nobody at sheep.berlios.de  Tue Jan 24 13:10:32 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 13:10:32 +0100
Subject: [Zebra-checkins] zebra/src/java/fulcrum-security-hivemind-hibernate pom.xml,1.7,1.8
Message-ID: <200601241210.k0OCAWx07280@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate
In directory sheep:/tmp/cvs-serv20886

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/fulcrum-security-hivemind-hibernate/pom.xml,v
retrieving revision 1.7
retrieving revision 1.8
diff -C2 -d -r1.7 -r1.8
*** pom.xml	24 Jan 2006 11:57:56 -0000	1.7
--- pom.xml	24 Jan 2006 12:10:29 -0000	1.8
***************
*** 77,81 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.5</version>
          </dependency>
          <dependency>
--- 77,81 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security</artifactId>
!             <version>1.6</version>
          </dependency>
          <dependency>



From nobody at sheep.berlios.de  Tue Jan 24 13:12:41 2006
From: nobody at sheep.berlios.de (biggus_richus)
Date: Tue, 24 Jan 2006 13:12:41 +0100
Subject: [Zebra-checkins] zebra/src/java/zebra-hivemind pom.xml,1.14,1.15
Message-ID: <200601241212.k0OCCfx07363@bat.berlios.de>

Update of /cvsroot/zebra/zebra/src/java/zebra-hivemind
In directory sheep:/tmp/cvs-serv21785

Modified Files:
	pom.xml 
Log Message:


Index: pom.xml
===================================================================
RCS file: /cvsroot/zebra/zebra/src/java/zebra-hivemind/pom.xml,v
retrieving revision 1.14
retrieving revision 1.15
diff -C2 -d -r1.14 -r1.15
*** pom.xml	24 Jan 2006 11:25:19 -0000	1.14
--- pom.xml	24 Jan 2006 12:12:32 -0000	1.15
***************
*** 6,10 ****
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.4</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
--- 6,10 ----
      <artifactId>zebra-hivemind</artifactId>
      <packaging>jar</packaging>
!     <version>1.5</version>
      <name>Zebra Hivemind Layer</name>
      <url>http://zebra.berlios.de/</url>
***************
*** 117,121 ****
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.8</version>
          </dependency>
          <dependency>
--- 117,121 ----
              <groupId>fulcrum-hivemind</groupId>
              <artifactId>fulcrum-security-hibernate</artifactId>
!             <version>1.9</version>
          </dependency>
          <dependency>



